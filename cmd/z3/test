(z3s5-image (version ("2.3.3+45ae59b" 16 "linux/amd64" Z3S5-Lisp)) (info ("test image")) (nonce "6s2HlJkVR") (min-version 0.1) (time ((2022 8 2 2 31) (10 35 37 599245127 1659436537599245127))) (entry nil))(letrec "6s2HlJkVR" (macro (args &rest body) ((lambda (vars setqs) (progn (setq vars (lambda (x) (cond (x (cons (caar x) (vars (cdr x))))))) 'vars) (progn (setq sets (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x))))))) 'sets) (append (cons 'let (cons (vars args) (sets args))) body)) nil nil)))(setcdr "6s2HlJkVR" (intrinsic 'rplacd))(synout "6s2HlJkVR" (lambda (arg) (enq (lambda nil (out arg) (cond ((permission? 'interactive (read-eval-reply))) (t (void)))))))(array? "6s2HlJkVR" (intrinsic 'array?))(_build-list "6s2HlJkVR" (lambda (n proc acc) (cond ((= n 0) acc) (t (_build-list (sub1 n) proc (cons (proc n) acc))))))(task-send "6s2HlJkVR" (lambda (id msg) (cond ((not (task? id)) (error "task-send: invalid task %v" id)) (t (void))) (set *tasks-to-msg* id (array-append (get *tasks-to-msg* id (array)) msg))))(list "6s2HlJkVR" (intrinsic 'list))(*hooks-added-once* "6s2HlJkVR" (dict 'nil))(file-exists? "6s2HlJkVR" (intrinsic 'file-exists?))(member "6s2HlJkVR" (lambda (key x) (cond ((null? x) nil) ((equal? key (car x)) x) (t (member key (cdr x))))))(out "6s2HlJkVR" (lambda (s) (void (princ s))))(str-index "6s2HlJkVR" (lambda (s chars &rest pos) (_str-index s chars (cond ((null? pos) 0) (t (car pos))) (strlen s))))(dec.less-than? "6s2HlJkVR" (intrinsic 'dec.less-than?))(dict-key-equal? "6s2HlJkVR" (intrinsic 'dict-key-equal?))(*log10e* . 0.43429448190325176)(base64->blob "6s2HlJkVR" (intrinsic 'base64->blob))(set-difference "6s2HlJkVR" (lambda (a b) ((lambda (c) (dict-foreach a (lambda (k v) (cond ((not (has-key? b k)) (set c k t)) (t (void))))) c) (dict))))(cons "6s2HlJkVR" (intrinsic 'cons))(seekable? "6s2HlJkVR" (intrinsic 'seekable?))(sysmsg "6s2HlJkVR" (lambda (msg) (cond ((member (sys 'editmode) '(page console)) (enq (lambda nil (synouty (list (list 'fg (the-color 'z3s5-sysmsg-text) (list 'bg (the-color 'z3s5-sysmsg-back) (fmt "%v\n" msg)))))))) (t (log msg)))))(protect "6s2HlJkVR" (lambda (&rest symbols) (cond ((permission? 'allow-protect) (list-foreach symbols (lambda (x) (_protect x)))) (t (error "protect: security violation - no permission to protect symbols!")))))(minute+ "6s2HlJkVR" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *minute-ns* delta)))))(minmax "6s2HlJkVR" (lambda (pred li so-far) (cond ((null? li) so-far) ((pred (car li) so-far) (minmax pred (cdr li) (car li))) (t (minmax pred (cdr li) so-far)))))(break "6s2HlJkVR" (intrinsic 'break))(the-color "6s2HlJkVR" (lambda (spec) (cond ((sym? spec) ((lambda (c) (cond (c (cond ((sym? c) (color c)) ((> (len c) 3) c) (t (nreverse (cons 255 (nreverse c)))))) (t (error "color not in *colors*: %v" spec)))) (get *colors* spec nil))) ((list? spec) (cond ((< (len spec) 3) (error "expected a list of r g b values, given %v" spec)) ((= (len spec) 3) (nreverse (cons 255 (nreverse spec)))) ((> (len spec) 3) spec) (t (error "malformed color list: %v" spec)))) (t (error "malformed color specification: %v" spec)))))(*e* . 2.718281828459045)(*minute-ns* . 60000000000)(array-sort "6s2HlJkVR" (intrinsic 'array-sort))(protect-toplevel-symbols "6s2HlJkVR" (lambda nil (apply protect (filter (dump-bindings) (lambda (sym) (cond ((not (protected? sym)) (not (has-key? *mutable-toplevel-symbols* sym)))))))))(str-exists? "6s2HlJkVR" (lambda (seq pred) (_seq-exists? seq pred 0 (strlen seq))))(abs "6s2HlJkVR" (lambda (x) (cond ((< x 0) (* x -1)) (t x))))(task? "6s2HlJkVR" (lambda (id) (cond (*tasks* (cond ((get *tasks* id nil) t) (t nil))))))(valid? "6s2HlJkVR" (intrinsic 'valid?))(remove-hook "6s2HlJkVR" (lambda (h id2) ((lambda (id1) (cond ((num? id1) (progn (remove-hook-internal id1 id2) t)) (t nil))) (hook h))))(zimage-header-info "6s2HlJkVR" (lambda (header file c) (cons file (cons c header))))(_remove-duplicates "6s2HlJkVR" (lambda (li acc d) (cond ((null? li) (reverse acc)) ((has-key? d (1st li nil)) (_remove-duplicates (cdr li) acc d)) (t (set d (1st li nil) t) (_remove-duplicates (cdr li) (cons (car li) acc) d)))))(dec.less-than-or-equal? "6s2HlJkVR" (intrinsic 'dec.less-than-or-equal?))(*running-tasks* . 0)(caaar "6s2HlJkVR" (lambda (x) (car (car (car x)))))(_testouty "6s2HlJkVR" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (outy arg)) (t (void)))))(pushstacked "6s2HlJkVR" (lambda (dic key datum) (set dic key (cons datum (get dic key nil)))))(expect-err "6s2HlJkVR" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list '_testout (list 'fmt "%v " (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-error-handler) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed))))) (list (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'fmt "\n%v FAIL, expect error but none occurred\n" (list '_testidx))))))) (list 'pop-error-handler))) '*tests*))))(fl.remainder "6s2HlJkVR" (intrinsic 'fl.remainder))(strlen "6s2HlJkVR" (intrinsic 'strlen))(ling.damerau-levenshtein "6s2HlJkVR" (intrinsic 'ling.damerau-levenshtein))(db-result? "6s2HlJkVR" (intrinsic 'db-result?))(readable? "6s2HlJkVR" (intrinsic 'readable?))(*help-topics* "6s2HlJkVR" (dict '(binary ("Binary Manipulation" "This section lists functions for manipulating binary data in memory and on disk.") numeric ("Numeric Functions" "This section describes functions that provide standard arithmetics for non-floating point numbers such as integers. Notice that Z3S5 Lisp uses automatic bignum support but only for select standard operations like multiplication, addition, and subtraction.") time ("Time & Date" "This section lists functions that are time and date-related. Most of them use `(now)` and turn it into more human-readable form.") str ("String Manipulation" "These functions all manipulate strings in one way or another.") char ("Characters and UTF-8 Glyphs" "This section concerns functions related to character representations.") system ("System Functions" "These functions concern the inner workings of the Lisp interpreter. Your warranty might be void if you abuse them!") semver ("Semver Semantic Versioning" "The `semver` package provides functions to deal with the validation and parsing of semantic versioning strings.") zimage ("Runtime System Images" "The following functions allow the saving, loading, and running of runtime system images to and from disk.") float ("Floating Point Arithmetics Package" "The package `fl` provides floating point arithmetics functions. They require the given number not to exceed a value that can be held by a 64 bit float in the range 2.2E-308 to 1.7E+308.") sound ("Sound Support" "Only a few functions are provided for sound support.") boxed ("Boxed Data Structures" "Boxed values are used for dealing with foreign data structures in Lisp.") conversion ("Data Type Conversion" "This section lists various ways in which one data type can be converted to another.") concurrency ("Concurrency and Parallel Programming" "There are several mechanisms for doing parallel and concurrent programming in Z3S5 Lisp. Synchronization primitives are also listed in this section. Generally, users are advised to remain vigilant about potential race conditions.") db ("Databases" "These functions concern Sqlite3 database access. The module needs to be enabled with the \"db\" build tag.") array ("Arrays" "This section concerns functions related to arrays, which are dynamic indexed sequences of values.") uncategorized ("Other / Not Categorized" "This section lists functions and symbols that have no associated help topic.") dict ("Dictionaries" "Dictionaries are thread-safe key-value repositories held in memory. They are internally based on hash tables and have fast access.") fileio ("File Input & Output" "These functions allow direct access for reading and writing to files. This module requires the `fileio` build tag.") console ("Console Input & Output" "These functions access the operating system console (terminal) mostly for string output.") ui ("User Interface" "This section lists miscellaneous user interface commands such as color for terminals.") io ("Input & Output" "This section concerns functions related to input and output.") help ("Help System" "This section lists functions related to the built-in help system.") ling ("Soundex, Metaphone, etc." "The package `ling` provides various phonemic transcription functions like Soundex and Metaphone that are commonly used for fuzzy search and similarity comparisons between strings.") lisp ("Lisp - Traditional Lisp Functions" "This section comprises a large number of list processing functions as well the standard control flow macros and functions you'd expect in a Lisp system.") equality ("Equality Predicates" "Equality predicates are used to test whether two values are equal in some sense.") data ("Special Data Structures" "This section lists some more specialized data structures and helper functions for them.") seq ("Sequence Functions" "Sequences are either strings, lists, or arrays. Sequences functions are generally abstractions for more specific functions of these data types, and therefore may be a bit slower than their native counterparts. It is still recommended to use them liberally, since they make programs more readable."))))(_darken-delta "6s2HlJkVR" (lambda (c proposed) ((lambda (li m) (setq li (reverse (cdr (reverse c)))) (setq m (apply min li)) (cond ((< m proposed) m) (t proposed))) nil nil)))(help-entry "6s2HlJkVR" (lambda (sym) (get *help* sym nil)))(prin1 "6s2HlJkVR" (intrinsic 'prin1))(_prefix-lib-sym "6s2HlJkVR" (lambda (prefixli oldsym) (str+ (str-join (mapcar (reverse prefixli) sym->str) ".") "." (sym->str oldsym))))(write "6s2HlJkVR" (intrinsic 'write))(queue-empty? "6s2HlJkVR" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (null? (array-ref q 2)))))(year+ "6s2HlJkVR" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns (list (list (+ (1st (1st ti)) delta) (2nd (1st ti) 1) (3rd (1st ti) 1)) (list (1st (2nd ti nil) 12) (2nd (2nd ti nil) 0) (3rd (2nd ti nil) 0) (4th (2nd ti nil) 0))))))))(str->list "6s2HlJkVR" (lambda (s) (array->list (str->array s))))(*pi* . 3.141592653589793)(make-set "6s2HlJkVR" (lambda (&rest opt) (list->set opt)))(sort-symbols "6s2HlJkVR" (lambda (li) (sort li (lambda (x y) (strless (sym->str x) (sym->str y))))))(_push-current-lib "6s2HlJkVR" (lambda (lib) (setq *_current-lib* (cons lib *_current-lib*))))(_unprotect "6s2HlJkVR" (intrinsic '_unprotect))(fl.ilogb "6s2HlJkVR" (intrinsic 'fl.ilogb))(str-slice "6s2HlJkVR" (intrinsic 'str-slice))(peek "6s2HlJkVR" (intrinsic 'peek))(*sqrte* . 1.6487212707001282)(hex->blob "6s2HlJkVR" (intrinsic 'hex->blob))(eof? "6s2HlJkVR" (intrinsic 'eof?))(dec.round-bank "6s2HlJkVR" (intrinsic 'dec.round-bank))(load-zimage "6s2HlJkVR" (lambda (fi) ((lambda (in) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (close in) (cond (err (*error-printer* err)) (t (void)))))) (read-zimage in fi) (pop-error-handler) (close in))) (open fi))))(_str-index "6s2HlJkVR" (lambda (s chars pos end) (cond ((>= pos end) nil) ((inchars (str->char (slice s pos (add1 pos))) chars) pos) (t (_str-index s chars (add1 pos) end)))))(cddr "6s2HlJkVR" (lambda (x) (cdr (cdr x))))(iterate "6s2HlJkVR" (lambda (it proc) ((lambda (i G82) ((lambda (G83) (setq G83 (lambda nil (cond ((< i G82) (proc (it i)) (setq i (+ i 1)) (G83)) (t (void))))) (G83)) nil)) 0 (it))))(dec.str-fixed-bank "6s2HlJkVR" (intrinsic 'dec.str-fixed-bank))(feature? "6s2HlJkVR" (lambda (sym) (if (member sym *reflect*) t nil)))(outy1 "6s2HlJkVR" (lambda (te) (cond ((list? te) (_outy1 te)) (t (out te)))))(set-subset? "6s2HlJkVR" (lambda (a b) (dict-key-subset? a b)))(dec.str-fixed-cash "6s2HlJkVR" (intrinsic 'dec.str-fixed-cash))(dir "6s2HlJkVR" (intrinsic 'dir))(map "6s2HlJkVR" (lambda (seq proc) (cond ((list? seq) (mapcar seq proc)) ((array? seq) ((lambda (c) ((lambda (i G50) ((lambda (G51) (setq G51 (lambda nil (cond ((< i G50) (array-set c i (proc (array-ref seq i))) (setq i (+ i 1)) (G51)) (t (void))))) (G51)) nil)) 0 (array-len seq)) c) (array-copy seq))) ((str? seq) (strmap seq proc)) (t (error "map - not a sequence: %v" seq)))))(dec.tan "6s2HlJkVR" (intrinsic 'dec.tan))(readall "6s2HlJkVR" (lambda (n) (nreverse (_readall n nil))))(when-permission "6s2HlJkVR" (macro (perm &rest body) (list 'cond (cons (list 'permission? perm) body))))(reverse "6s2HlJkVR" (lambda (seq) (cond ((array? seq) (array-reverse seq)) ((list? seq) (list-reverse seq)) ((str? seq) (str-reverse seq)) (t (error "reverse - not a sequence: %v" seq)))))(semver.major-minor "6s2HlJkVR" (intrinsic 'semver.major-minor))(blob->hex "6s2HlJkVR" (intrinsic 'blob->hex))(declare-unprotected "6s2HlJkVR" (lambda (sym) (set *mutable-toplevel-symbols* sym t)))(dequeue! "6s2HlJkVR" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result))))))(ling.porter "6s2HlJkVR" (intrinsic 'ling.porter))(make-symbol "6s2HlJkVR" (intrinsic 'make-symbol))(int "6s2HlJkVR" (intrinsic 'int))(str-ref "6s2HlJkVR" (intrinsic 'str-ref))(cdaar "6s2HlJkVR" (lambda (x) (cdr (car (car x)))))(index "6s2HlJkVR" (lambda (seq elem &rest pred) (_index seq elem 0 (len seq) (cond (pred (car pred)) (t eq?)))))(list->array "6s2HlJkVR" (lambda (li) (apply array li)))(chars->str "6s2HlJkVR" (intrinsic 'chars->str))(*halfhour-ns* . 1800000000000)(defhelp "6s2HlJkVR" (macro (sym &rest entries) (list '_set-help-entries (list 'quote sym) (list 'quote entries))))(has "6s2HlJkVR" (lambda (d k) ((lambda (s) (cond ((equal? (get d k s) s) nil) (t t))) (gensym))))(cd "6s2HlJkVR" (intrinsic 'cd))(mapcar "6s2HlJkVR" (lambda (x f) (cond (x (cons (f (car x)) (mapcar (cdr x) f))))))(sec+ "6s2HlJkVR" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *second-ns* delta)))))(semver.build "6s2HlJkVR" (intrinsic 'semver.build))(dec.atan "6s2HlJkVR" (intrinsic 'dec.atan))(*max-float64* . 1.7976931348623157e+308)(dump-bindings "6s2HlJkVR" (intrinsic 'dump-bindings))(dec.div "6s2HlJkVR" (intrinsic 'dec.div))(_out-help-warn-maybe "6s2HlJkVR" (lambda (msg) (cond ((str? msg) (list 'fg (the-color 'z3s5-error-text) (list 'bg (the-color 'z3s5-error-back) (str+ " WARNING: " (strcase msg 'upper))))) (t nil))))(time "6s2HlJkVR" (intrinsic 'time))(strless "6s2HlJkVR" (intrinsic 'strless))(fl.pow10 "6s2HlJkVR" (intrinsic 'fl.pow10))(expect-ok "6s2HlJkVR" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-eror-handler) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed)))) (list (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'pop-error-handler))) '*tests*))))(color "6s2HlJkVR" (intrinsic 'color))(array->str "6s2HlJkVR" (intrinsic 'array->str))(fmt "6s2HlJkVR" (intrinsic 'fmt))(epoch-ns->datelist "6s2HlJkVR" (intrinsic 'epoch-ns->datelist))(memstats "6s2HlJkVR" (intrinsic 'memstats))(internalize "6s2HlJkVR" (lambda (arg nonce) (cond ((list? arg) (cond ((equal? (1st arg nil) nonce) (eval (internalize (2nd arg nil) nonce))) (t (mapcar arg (lambda (x) (internalize x nonce)))))) ((str? arg) arg) ((array? arg) (map arg (lambda (x) (internalize x nonce)))) ((dict? arg) (dict-map arg (lambda (k v) (internalize v nonce)))) (t arg))))(array-append "6s2HlJkVR" (intrinsic 'array-append))(caar "6s2HlJkVR" (lambda (x) (car (car x))))(fl.erfc "6s2HlJkVR" (intrinsic 'fl.erfc))(intrinsic "6s2HlJkVR" (intrinsic 'intrinsic))(shorten "6s2HlJkVR" (lambda (s n) (cond ((not (str? s)) s) ((< (len s) n) s) (t (str+ (slice s 0 (div (- n 3) 2)) "..." (slice s (div (- n 3) 2) (- n 3)))))))(str-segment "6s2HlJkVR" (lambda (s start end) (filter (_str-segment s (chars start) (chars end) nil) (lambda (x) (not (equal? (2nd x) ""))))))(*day-ns* . 86400000000000)(protected? "6s2HlJkVR" (intrinsic 'protected?))(lighten "6s2HlJkVR" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_lighten-delta c (cond (amount (car amount)) (t 30)))) (list (min (+ (1st c 180) delta) 255) (min (+ (2nd c 180) delta) 255) (min (+ (3rd c 180) delta) 255) (4th c))) nil nil)))(seq? "6s2HlJkVR" (lambda (seq) (cond ((array? seq)) ((cond ((list? seq)) ((str? seq)))))))(db.query "6s2HlJkVR" (intrinsic 'db.query))(_nreverse "6s2HlJkVR" (lambda (x prev) ((lambda (next) (setcdr x prev) (cond ((null? next) x) (t (_nreverse next x)))) (cdr x))))(make-stack "6s2HlJkVR" (lambda nil (array 'stack (make-mutex) nil)))(stop-task-scheduler "6s2HlJkVR" (lambda nil (cond ((task? *scheduler*) (task-send *scheduler* 'end)) (t (void)))))(_externalize-nonce "6s2HlJkVR" (lambda (arg nonce) ((lambda (s) ((lambda (G89) (push-finalizer (lambda (err x) (cond (err (*error-handler* err)) (t (void))) ((lambda (result) (close s) (cond (nonce (list nonce result)) (t result))) (car (readall s))))) (push-error-handler (lambda (err) (void (pop-error-handler)) ((pop-finalizer) err G89) ((lambda (handler) (cond (handler (handler err)) (t (void)))) (pop-error-handler)))) (setq G89 (progn)) (pop-error-handler) ((pop-finalizer) nil G89)) nil)) (stropen (_external arg)))))(hour+ "6s2HlJkVR" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *hour-ns* delta)))))(db.step "6s2HlJkVR" (intrinsic 'db.step))(car "6s2HlJkVR" (intrinsic 'car))(caddr "6s2HlJkVR" (lambda (x) (car (cdr (cdr x)))))(now-ms "6s2HlJkVR" (lambda nil (div (now-ns) 1000000)))(cinc! "6s2HlJkVR" (intrinsic 'cinc!))(functional? "6s2HlJkVR" (lambda (sym) (cond ((proc? sym)) ((macro? sym)))))(ling.hamming "6s2HlJkVR" (intrinsic 'ling.hamming))(find-missing-help-entries "6s2HlJkVR" (lambda nil (filter (dump) (lambda (sym) (get *help* sym nil)))))(*sync-wait-lower-bound* . 1)(dec.str "6s2HlJkVR" (intrinsic 'dec.str))(z3s5-image (version ("2.3.3+45ae59b" 16 "linux/amd64" Z3S5-Lisp)) (info ("test image")) (nonce "aQ5yXJk4g") (min-version 0.1) (time ((2022 8 2 2 31) (11 1 15 699099745 1659438075699099745))) (entry nil))(ling.match-rating-compare "aQ5yXJk4g" (intrinsic 'ling.match-rating-compare))(run-hook-internal "aQ5yXJk4g" (intrinsic 'run-hook-internal))(mutex-rlock "aQ5yXJk4g" (intrinsic 'mutex-rlock))(_protect "aQ5yXJk4g" (intrinsic '_protect))(ling.nysiis "aQ5yXJk4g" (intrinsic 'ling.nysiis))(stropen "aQ5yXJk4g" (intrinsic 'stropen))(exists? "aQ5yXJk4g" (lambda (seq pred) (cond ((list? seq) (list-exists? seq pred)) ((array? seq) (array-exists? seq pred)) ((str? seq) (str-exists? seq pred)) (t (error "exists? - not a sequence: %v" seq)))))(dec.less-than-or-equal? "aQ5yXJk4g" (intrinsic 'dec.less-than-or-equal?))(mutex-runlock "aQ5yXJk4g" (intrinsic 'mutex-runlock))(hex->blob "aQ5yXJk4g" (intrinsic 'hex->blob))(fmt "aQ5yXJk4g" (intrinsic 'fmt))(4th "aQ5yXJk4g" (lambda (seq &rest default) (cond ((null? default) (nth seq 3)) (t (nthdef seq 3 (car default))))))(mod "aQ5yXJk4g" (intrinsic 'mod))(semver.max "aQ5yXJk4g" (intrinsic 'semver.max))(unprotect "aQ5yXJk4g" (lambda (&rest symbols) (cond ((permission? 'allow-unprotect) (list-foreach symbols (lambda (x) (_unprotect x)))) (t (error "unprotect: security violation - no permission to unprotect symbols!")))))(set-element? "aQ5yXJk4g" (lambda (s elem) (has-key? s elem)))(with-colors "aQ5yXJk4g" (lambda (f b proc) ((lambda (fg bg) (try ((set-color 'text fg) (set-color 'back bg)) (set-color 'text (the-color f)) (set-color 'back (the-color b)) (proc))) (color 'text) (color 'back))))(int "aQ5yXJk4g" (intrinsic 'int))(fl.tanh "aQ5yXJk4g" (intrinsic 'fl.tanh))(make-stack "aQ5yXJk4g" (lambda nil (array 'stack (make-mutex) nil)))(dolist "aQ5yXJk4g" (macro (spec &rest body) ((lambda (name list) (cons 'let (cons (list name (list list (cadr spec))) (cons (_append (cons 'while (cons list (cons (list 'setq name (list 'car list)) body))) (list (list 'setq list (list 'cdr list)))) (cond ((cddr spec) (list (list 'setq name nil) (caddr spec)))))))) (car spec) (gensym))))(car "aQ5yXJk4g" (intrinsic 'car))(queue? "aQ5yXJk4g" (lambda (sym) (cond ((not (array? sym)) nil) ((< (len sym) 2) nil) ((not (mutex? (array-ref sym 1))) nil) (t (equal? (array-ref sym 0) 'queue)))))(ccmp "aQ5yXJk4g" (intrinsic 'ccmp))(dec.floor "aQ5yXJk4g" (intrinsic 'dec.floor))(*max-float32* . 3.4028234663852886e+38)(run-hook "aQ5yXJk4g" (lambda (h &rest args) ((lambda (id) (cond ((num? id) (apply run-hook-internal (cons id args))) (t nil))) (hook h))))(*hooks* "aQ5yXJk4g" (dict 'nil))(array-foreach "aQ5yXJk4g" (lambda (arr proc) ((lambda (i G77) ((lambda (G78) (setq G78 (lambda nil (cond ((< i G77) (proc (array-ref arr i)) (setq i (+ i 1)) (G78)) (t (void))))) (G78)) nil)) 0 (array-len arr)) (void)))(error->str "aQ5yXJk4g" (intrinsic 'error->str))(outy1 "aQ5yXJk4g" (lambda (te) (cond ((list? te) (_outy1 te)) (t (out te)))))(task? "aQ5yXJk4g" (lambda (id) (cond (*tasks* (cond ((get *tasks* id nil) t) (t nil))))))(_pop-current-lib "aQ5yXJk4g" (lambda nil (void (setq *_current-lib* (cdr *_current-lib*)))))(array-ref "aQ5yXJk4g" (intrinsic 'array-ref))(set-difference "aQ5yXJk4g" (lambda (a b) ((lambda (c) (dict-foreach a (lambda (k v) (cond ((not (has-key? b k)) (set c k t)) (t (void))))) c) (dict))))(false)(list? "aQ5yXJk4g" (lambda (x) (cond ((null? x)) ((cons? x)))))(array->list "aQ5yXJk4g" (intrinsic 'array->list))(fl.trunc "aQ5yXJk4g" (intrinsic 'fl.trunc))(print "aQ5yXJk4g" (lambda (x) (prin1 x) (terpri) x))(add-hook-once "aQ5yXJk4g" (lambda (h proc) (cond ((get *hooks-added-once* h) (set *hooks-added-once* h true) (add-hook h proc)) (t nil))))(def-custom-hook "aQ5yXJk4g" (lambda (h) (cinc! '*custom-hook-counter*) (set *custom-hooks* h (+ 65635 *custom-hook-counter*))))(cons "aQ5yXJk4g" (intrinsic 'cons))(cdddr "aQ5yXJk4g" (lambda (x) (cdr (cdr (cdr x)))))(2nd "aQ5yXJk4g" (lambda (seq &rest default) (cond ((null? default) (nth seq 1)) (t (nthdef seq 1 (car default))))))(array-map! "aQ5yXJk4g" (intrinsic 'array-map!))(synouty "aQ5yXJk4g" (lambda (li) (enq (lambda nil (outy li) (cond ((permission? 'interactive) (read-eval-reply)) (t (void)))))))(sys-key? "aQ5yXJk4g" (lambda (k) ((lambda (s) (cond ((equal? (sys k s) s) nil) (t t))) (gensym))))(str-count-substr "aQ5yXJk4g" (intrinsic 'str-count-substr))(has-key? "aQ5yXJk4g" (intrinsic 'has-key?))(break "aQ5yXJk4g" (intrinsic 'break))(fl.cosh "aQ5yXJk4g" (intrinsic 'fl.cosh))(cdec! "aQ5yXJk4g" (intrinsic 'cdec!))(expect-ok "aQ5yXJk4g" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-eror-handler) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed)))) (list (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'pop-error-handler))) '*tests*))))(void "aQ5yXJk4g" (intrinsic 'void))(*ln2* . 0.6931471805599453)(*last-error*)(*gensym-counter* . 90)(dec.from-blob "aQ5yXJk4g" (intrinsic 'dec.from-blob))(_prefix-lib-sym "aQ5yXJk4g" (lambda (prefixli oldsym) (str+ (str-join (mapcar (reverse prefixli) sym->str) ".") "." (sym->str oldsym))))(start-task-scheduler "aQ5yXJk4g" (lambda nil (cond ((not (task? *scheduler*)) (setq *scheduler* (_schedule-task-future))) (t (void))) (task-run *scheduler*)))(fl.sqrt "aQ5yXJk4g" (intrinsic 'fl.sqrt))(str->expr* "aQ5yXJk4g" (intrinsic 'str->expr*))(dec.round-cash "aQ5yXJk4g" (intrinsic 'dec.round-cash))(now "aQ5yXJk4g" (intrinsic 'now))(forall? "aQ5yXJk4g" (lambda (seq pred) (cond ((list? seq) (list-forall? seq pred)) ((array? seq) (array-forall? seq pred)) ((str? seq) (str-forall? seq pred)) (t (error "all - not a sequence: %v" seq)))))(end-of-file "aQ5yXJk4g" (intrinsic 'end-of-file))(db.exec "aQ5yXJk4g" (intrinsic 'db.exec))(fl.atanh "aQ5yXJk4g" (intrinsic 'fl.atanh))(_str-join "aQ5yXJk4g" (lambda (fields sep acc) (cond ((null? fields) (cond ((str-empty? acc) "") (t (str-slice acc 0 (- (strlen acc) (strlen sep)))))) (t (_str-join (cdr fields) sep (str+ acc (car fields) sep))))))(when-permission "aQ5yXJk4g" (macro (perm &rest body) (list 'cond (cons (list 'permission? perm) body))))(num? "aQ5yXJk4g" (intrinsic 'num?))(fl.expm1 "aQ5yXJk4g" (intrinsic 'fl.expm1))(help "aQ5yXJk4g" (macro (sym) (list 'cond (list (list 'has-key? '*help* (list 'quote sym)) (list '_out-help (list 'quote sym) (list 'get '*help* (list 'quote sym) nil))) (list t (list 'outy (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-help-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-help-back) (list 'fmt "Sorry, no help is available for '%v.\n" (list 'quote sym))))))))))(str-port? "aQ5yXJk4g" (intrinsic 'str-port?))(min "aQ5yXJk4g" (lambda (&rest args) (minmax < (cdr args) (car args))))(ling.metaphone "aQ5yXJk4g" (intrinsic 'ling.metaphone))(getstacked "aQ5yXJk4g" (lambda (dic key default) ((lambda (li) (cond ((null? li) default) (t (car li)))) (get dic key nil))))(strlimit "aQ5yXJk4g" (lambda (s n) (cond ((> (len s) n) (slice s 0 n)) (t s))))(outy "aQ5yXJk4g" (lambda (li) ((lambda (styled G87) ((lambda (G88) (setq G88 (lambda nil (cond (G87 (setq styled (car G87)) (outy1 styled) (setq G87 (cdr G87)) (G88)) (t (void))))) (G88)) nil) (setq styled nil) (void)) nil li)))(has "aQ5yXJk4g" (lambda (d k) ((lambda (s) (cond ((equal? (get d k s) s) nil) (t t))) (gensym))))(and "aQ5yXJk4g" (macro (x &rest y) (cond ((null? y) x) (t (list 'cond (list x (cons 'and y)))))))(nreverse "aQ5yXJk4g" (lambda (list) (cond (list (_nreverse list nil)))))(fl.log "aQ5yXJk4g" (intrinsic 'fl.log))(array->str "aQ5yXJk4g" (intrinsic 'array->str))(epoch-ns->datelist "aQ5yXJk4g" (intrinsic 'epoch-ns->datelist))(week+ "aQ5yXJk4g" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *week-ns* delta)))))(write-binary "aQ5yXJk4g" (intrinsic 'write-binary))(prune-task-table "aQ5yXJk4g" (lambda nil (dict-foreach *tasks-state* (lambda (k v) (cond ((cond ((eq? v 'finished)) ((cond ((eq? v 'canceled)) ((eq? v 'error))))) (task-remove k)) (t (void)))))))(day-of-week "aQ5yXJk4g" (intrinsic 'day-of-week))(ascii85->blob "aQ5yXJk4g" (intrinsic 'ascii85->blob))(assq "aQ5yXJk4g" (lambda (key alist) (cond (alist ((lambda (e) (cond ((cond ((cons? e) (eq? key (car e)))) e) (t (assq key (cdr alist))))) (car alist))))))(bound? "aQ5yXJk4g" (macro (sym) (_bound? sym)))(fl.acos "aQ5yXJk4g" (intrinsic 'fl.acos))(dec.from-num "aQ5yXJk4g" (intrinsic 'dec.from-num))(dec.sum "aQ5yXJk4g" (intrinsic 'dec.sum))(nth-partition "aQ5yXJk4g" (lambda (m k idx) (cond ((= idx (div m k)) (list (* idx k) (sub1 m) (% m k))) (t (list (* k idx) (+ (* k idx) (sub1 k)) k)))))(init-tasking "aQ5yXJk4g" (lambda nil (start-task-scheduler)))(load-zimage "aQ5yXJk4g" (lambda (fi) ((lambda (in) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (close in) (cond (err (*error-printer* err)) (t (void)))))) (read-zimage in fi) (pop-error-handler) (close in))) (open fi))))(semver.prerelease "aQ5yXJk4g" (intrinsic 'semver.prerelease))(dict-foreach "aQ5yXJk4g" (intrinsic 'dict-foreach))(dict->alist "aQ5yXJk4g" (lambda (d) ((lambda (arr c) (dict-foreach d (lambda (k v) (array-set arr c (cons k v)) (setq c (add1 c)))) (array->list arr)) (build-array (len d) nil) 0)))(* "aQ5yXJk4g" (intrinsic '*))(list-ref "aQ5yXJk4g" (intrinsic 'list-ref))(fl.erfcinv "aQ5yXJk4g" (intrinsic 'fl.erfcinv))(fl.asin "aQ5yXJk4g" (intrinsic 'fl.asin))(ling.hamming "aQ5yXJk4g" (intrinsic 'ling.hamming))(ling.porter "aQ5yXJk4g" (intrinsic 'ling.porter))(expect-false "aQ5yXJk4g" (macro (&rest computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym (cons 'progn computed))) (list 'cond (list (list 'not sym) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect true, result is %v\n" (list '_testidx) sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil)))(list-slice "aQ5yXJk4g" (intrinsic 'list-slice))(sort "aQ5yXJk4g" (intrinsic 'sort))(sys "aQ5yXJk4g" (intrinsic 'sys))(unbind "aQ5yXJk4g" (intrinsic 'unbind))(str-remove-suffix "aQ5yXJk4g" (lambda (s sfx) (cond ((cond ((str-empty? sfx)) ((str-empty? s))) s) ((equal? (str-slice s (- (len s) (min (len sfx) (len s))) (len s)) sfx) (str-slice s (- (len s) (min (len sfx) (len s))) (len s))) (t s))))(*blackboard-mutex* "aQ5yXJk4g" (make-mutex))(str-exists? "aQ5yXJk4g" (lambda (seq pred) (_seq-exists? seq pred 0 (strlen seq))))(assoc "aQ5yXJk4g" (lambda (key alist) (cond (alist ((lambda (e) (cond ((cond ((cons? e) (equal? key (car e)))) e) (t (assoc key (cdr alist))))) (car alist))))))(princ "aQ5yXJk4g" (intrinsic 'princ))(<= "aQ5yXJk4g" (lambda (x y) (not (< y x))))(the-color-names "aQ5yXJk4g" (lambda nil (dict->keys *colors*)))(dict->values "aQ5yXJk4g" (lambda (d) ((lambda (li) (dict-foreach d (lambda (k v) (setq li (cons v li)))) li) nil)))(fl.asinh "aQ5yXJk4g" (intrinsic 'fl.asinh))(dict->list "aQ5yXJk4g" (intrinsic 'dict->list))(db? "aQ5yXJk4g" (intrinsic 'db?))(wait-until* "aQ5yXJk4g" (lambda (dict key pred timeout) (_wait-until* dict key pred timeout (now-ns))))(assoc1 "aQ5yXJk4g" (lambda (sym li) (cadr (assoc sym li))))(dec.new "aQ5yXJk4g" (intrinsic 'dec.new))(terpri "aQ5yXJk4g" (intrinsic 'terpri))(list-last "aQ5yXJk4g" (lambda (list) (cond ((atom? (cdr list)) list) (t (list-last (cdr list))))))(fl.erfinv "aQ5yXJk4g" (intrinsic 'fl.erfinv))(dec.sign "aQ5yXJk4g" (intrinsic 'dec.sign))(close "aQ5yXJk4g" (intrinsic 'close))(task-send "aQ5yXJk4g" (lambda (id msg) (cond ((not (task? id)) (error "task-send: invalid task %v" id)) (t (void))) (set *tasks-to-msg* id (array-append (get *tasks-to-msg* id (array)) msg))))(_testouty "aQ5yXJk4g" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (outy arg)) (t (void)))))(bitshr "aQ5yXJk4g" (intrinsic 'bitshr))(array-forall? "aQ5yXJk4g" (lambda (arr pred) (_seq-forall? arr pred 0 (array-len arr))))(minmax "aQ5yXJk4g" (lambda (pred li so-far) (cond ((null? li) so-far) ((pred (car li) so-far) (minmax pred (cdr li) (car li))) (t (minmax pred (cdr li) so-far)))))(fl.log10 "aQ5yXJk4g" (intrinsic 'fl.log10))(*colors* "aQ5yXJk4g" (dict '(floral-white (255 250 240) light-gray (211 211 211) magenta (255 0 255) dim-gray (105 105 105) tan (210 180 140) z3s5-log-error-text (120 0 0 255) spring-green (0 255 127) sea-green (46 139 87) z3s5-help-back back light-sea-green (32 178 170) dark-magenta (139 0 139) hot-pink (255 105 180) z3-title-bg-5 back saddle-brown (139 69 19) z3-title-fg-5 (0 0 0 255) firebrick (178 34 34) light-coral (240 128 128) z3s5-help-entry-back (0 80 0 255) cyan (0 255 255) z3s5-log-warn-back back dark-violet (148 0 211) turquoise (64 224 208) tomato (255 99 71) dark-salmon (233 150 122) linen (250 240 230) dark-olive-green (85 107 47) z3-title-fg-4 (0 0 0 255) lime (0 255 0) z3-text-fg (220 220 220 255) dark-goldenrod (184 134 11) cornflower-blue (100 149 237) peru (205 133 63) pink (255 192 203) navy (0 0 128) z3-title-bg-2 back z3s5-help-entry-text (255 255 255 255) white (255 255 255) z3s5-orange (200 100 0 180) z3s5-warn-back back lemon-chiffon (255 250 205) medium-spring-green (0 250 154) dark-orchid (153 50 204) teal (0 128 128) dark-gray (169 169 169) dark-red (139 0 0) black (0 0 0) light-cyan (224 255 255) silver (192 192 192) honeydew (240 255 240) purple (128 0 128) crimson (220 20 60) chartreuse (127 255 0) z3s5-sysmsg-back back slate-blue (106 90 205) z3s5-help-text text fuchsia (255 0 255) dark-orange (255 140 0) z3-title-bg-6 back dark-turquoise (0 206 209) burlywood (222 184 135) light-slate-gray (119 136 153) medium-sea-green (60 179 113) green-yellow (173 255 47) medium-purple (147 112 219) yellow (255 255 0) light-sky-blue (135 206 250) steel-blue (70 130 180) z3s5-log-warn-text (160 94 35 255) gray (128 128 128) pale-green (152 251 152) dark-khaki (189 183 107) blue-violet (138 43 226) dark-cyan (0 139 139) z3-title-fg-1 (0 0 0 255) light-pink (255 182 193) bisque (255 228 196) olive-drab (107 142 35) lavender (230 230 250) z3-title-fg-2 (0 0 0 255) pale-turquoise (175 238 238) z3s5-help-warn-text (120 0 0 255) z3s5-help-entry-arg (0 0 120 255) z3-text-bg back ivory (255 255 240) medium-orchid (186 85 211) alice-blue (240 248 255) sky-blue (135 206 235) indigo (75 0 130) sienna (160 82 45) z3-link-bg back rosy-wood (188 143 143) z3s5-error-text (120 0 0 255) indian-red (205 92 92) powder-blue (176 224 230) light-goldenrod-yellow (250 250 210) z3-title-fg-6 (0 0 0 255) orange (255 165 0) peach-puff (255 218 185) dodger-blue (30 144 255) midnight-blue (25 25 112) coral (255 127 80) aquamarine (127 255 212) mint-cream (245 255 250) ghost-white (248 248 255) royal-blue (65 105 225) navajo-white (255 222 173) z3-title-fg-3 (0 0 0 255) red (255 0 0) z3-title-fg-0 (255 255 255 255) wheat (245 222 179) light-salmon (255 160 122) khaki (240 230 140) medium-turquoise (72 209 204) pale-goldenrod (238 232 170) dark-blue (0 0 139) medium-aquamarine (102 205 170) antique-white (250 235 215) chocolate (210 105 30) gold (255 215 0) cornsilk (255 248 220) orange-red (255 69 0) z3s5-help-warn-back back pale-violet-red (219 112 147) light-blue (173 216 230) z3s5-warn-text (160 94 35 255) light-green (144 238 144) z3-title-bg-0 (0 0 0 255) medium-violet-red (199 21 133) gainsboro (220 220 220) z3s5-error-back back light-steel-blue (176 196 222) dark-sea-green (143 188 143) lavender-blush (255 240 245) goldenrod (218 165 32) slate-gray (112 128 144) lawn-green (124 252 0) z3-linknum-fg (100 100 250 255) violet (238 130 238) z3-title-bg-1 back yellow-green (154 205 50) sandy-brown (244 164 96) green (0 128 0) z3-title-bg-3 back blanched-almond (255 235 205) azure (240 255 255) forrest-green (34 139 34) orchid (218 112 214) moccasin (255 228 181) z3s5-blue (0 0 60 255) salmon (250 128 114) blue (0 0 255) old-lace (253 245 230) thistle (216 191 216) light-yellow (255 255 224) cadet-blue (95 158 160) z3s5-log-error-back back medium-blue (0 0 205) maroon (128 0 0) z3-link-fg (0 0 120 255) brown (165 42 42) snow (255 250 250) white-smoke (245 245 245) plum (221 160 221) dark-green (0 100 0) seashell (255 245 238) misty-rose (255 228 225) papaya-whip (255 239 213) aqua (0 255 255) dark-slate-blue (72 61 139) z3-title-bg-4 back olive (128 128 0) z3s5-sysmsg-text (255 255 255 180) lime-green (50 205 50) medium-slate-blue (123 104 238) deep-sky-blue (0 191 255) deep-pink (255 20 147) dark-slate-gray (47 79 79) z3-linknum-bg (0 0 120 255) beige (245 245 220))))(identity "aQ5yXJk4g" (lambda (x) x))(eql? "aQ5yXJk4g" (intrinsic 'eql?))(*help-topics* "aQ5yXJk4g" (dict '(seq ("Sequence Functions" "Sequences are either strings, lists, or arrays. Sequences functions are generally abstractions for more specific functions of these data types, and therefore may be a bit slower than their native counterparts. It is still recommended to use them liberally, since they make programs more readable.") str ("String Manipulation" "These functions all manipulate strings in one way or another.") system ("System Functions" "These functions concern the inner workings of the Lisp interpreter. Your warranty might be void if you abuse them!") db ("Databases" "These functions concern Sqlite3 database access. The module needs to be enabled with the \"db\" build tag.") sound ("Sound Support" "Only a few functions are provided for sound support.") binary ("Binary Manipulation" "This section lists functions for manipulating binary data in memory and on disk.") uncategorized ("Other / Not Categorized" "This section lists functions and symbols that have no associated help topic.") array ("Arrays" "This section concerns functions related to arrays, which are dynamic indexed sequences of values.") ling ("Soundex, Metaphone, etc." "The package `ling` provides various phonemic transcription functions like Soundex and Metaphone that are commonly used for fuzzy search and similarity comparisons between strings.") ui ("User Interface" "This section lists miscellaneous user interface commands such as color for terminals.") conversion ("Data Type Conversion" "This section lists various ways in which one data type can be converted to another.") dict ("Dictionaries" "Dictionaries are thread-safe key-value repositories held in memory. They are internally based on hash tables and have fast access.") numeric ("Numeric Functions" "This section describes functions that provide standard arithmetics for non-floating point numbers such as integers. Notice that Z3S5 Lisp uses automatic bignum support but only for select standard operations like multiplication, addition, and subtraction.") concurrency ("Concurrency and Parallel Programming" "There are several mechanisms for doing parallel and concurrent programming in Z3S5 Lisp. Synchronization primitives are also listed in this section. Generally, users are advised to remain vigilant about potential race conditions.") boxed ("Boxed Data Structures" "Boxed values are used for dealing with foreign data structures in Lisp.") float ("Floating Point Arithmetics Package" "The package `fl` provides floating point arithmetics functions. They require the given number not to exceed a value that can be held by a 64 bit float in the range 2.2E-308 to 1.7E+308.") data ("Special Data Structures" "This section lists some more specialized data structures and helper functions for them.") console ("Console Input & Output" "These functions access the operating system console (terminal) mostly for string output.") fileio ("File Input & Output" "These functions allow direct access for reading and writing to files. This module requires the `fileio` build tag.") equality ("Equality Predicates" "Equality predicates are used to test whether two values are equal in some sense.") zimage ("Runtime System Images" "The following functions allow the saving, loading, and running of runtime system images to and from disk.") lisp ("Lisp - Traditional Lisp Functions" "This section comprises a large number of list processing functions as well the standard control flow macros and functions you'd expect in a Lisp system.") semver ("Semver Semantic Versioning" "The `semver` package provides functions to deal with the validation and parsing of semantic versioning strings.") help ("Help System" "This section lists functions related to the built-in help system.") time ("Time & Date" "This section lists functions that are time and date-related. Most of them use `(now)` and turn it into more human-readable form.") char ("Characters and UTF-8 Glyphs" "This section concerns functions related to character representations.") io ("Input & Output" "This section concerns functions related to input and output."))))(fl.frexp "aQ5yXJk4g" (intrinsic 'fl.frexp))(remove-hooks-internal "aQ5yXJk4g" (intrinsic 'remove-hooks-internal))(dec.to-text "aQ5yXJk4g" (intrinsic 'dec.to-text))(dec.shift "aQ5yXJk4g" (intrinsic 'dec.shift))(fl.round "aQ5yXJk4g" (intrinsic 'fl.round))(mutex-lock "aQ5yXJk4g" (intrinsic 'mutex-lock))(array-set "aQ5yXJk4g" (intrinsic 'array-set))(dict? "aQ5yXJk4g" (intrinsic 'dict?))(proc? "aQ5yXJk4g" (lambda (sym) (cond ((intrinsic? sym)) ((closure? sym)))))(even? "aQ5yXJk4g" (lambda (x) (= (mod (abs x) 2) 0)))(set* "aQ5yXJk4g" (intrinsic 'set*))(read-binary "aQ5yXJk4g" (intrinsic 'read-binary))(base64->blob "aQ5yXJk4g" (intrinsic 'base64->blob))(dec.quorem "aQ5yXJk4g" (intrinsic 'dec.quorem))(stack? "aQ5yXJk4g" (lambda (sym) (cond ((not (array? sym)) nil) ((< (len sym) 2) nil) ((not (mutex? (array-ref sym 1))) nil) (t (equal? (array-ref sym 0) 'stack)))))(slice "aQ5yXJk4g" (lambda (seq low high) (cond ((array? seq) (array-slice seq low high)) ((list? seq) (list-slice seq low high)) ((str? seq) (str-slice seq low high)) (t (error "ref - not a sequence: %v" seq)))))(build-array "aQ5yXJk4g" (intrinsic 'build-array))(cadar "aQ5yXJk4g" (lambda (x) (car (cdr (car x)))))(db.int "aQ5yXJk4g" (intrinsic 'db.int))(map-pairwise "aQ5yXJk4g" (lambda (seq proc) (cond ((not (even? (len seq))) (error "map-pairwise: expected sequence of even length, but the given sequence has length %v" (len seq))) (t (void))) ((lambda (k traverse li) (setq k (len seq)) (setq traverse (lambda (i s acc) (cond ((= i k) acc) ((odd? i) (traverse (add1 i) s (_append acc (proc (nth s (sub1 i)) (nth s i))))) (t (traverse (add1 i) s acc))))) (setq li (traverse 0 seq nil)) (cond ((list? seq) li) ((array? seq) (list->array li)) ((str? seq) (list->str li)) (t (error "map-pairwise - not a sequence: %v" seq)))) nil nil nil)))(*finalizers* "aQ5yXJk4g" (dict 'nil))(fl.max "aQ5yXJk4g" (intrinsic 'fl.max))(semver.build "aQ5yXJk4g" (intrinsic 'semver.build))(run-zimage "aQ5yXJk4g" (lambda (&rest fi) (cond ((apply zimage-runable? fi) (_run-zimage fi)) (t (error "zimage not runable, no entry point: %v" fi)))))(str-replace* "aQ5yXJk4g" (intrinsic 'str-replace*))(feature? "aQ5yXJk4g" (lambda (sym) (if (member sym *reflect*) t nil)))(ling.soundex "aQ5yXJk4g" (intrinsic 'ling.soundex))(file-exists? "aQ5yXJk4g" (intrinsic 'file-exists?))(now-ns "aQ5yXJk4g" (intrinsic 'now-ns))(make-queue "aQ5yXJk4g" (lambda nil (array 'queue (make-mutex) nil)))(dfc! "aQ5yXJk4g" (lambda (sym) (progn (bind sym 0) sym)))(dict-key-subset? "aQ5yXJk4g" (intrinsic 'dict-key-subset?))(protect-toplevel-symbols "aQ5yXJk4g" (lambda nil (apply protect (filter (dump-bindings) (lambda (sym) (cond ((not (protected? sym)) (not (has-key? *mutable-toplevel-symbols* sym)))))))))(functional? "aQ5yXJk4g" (lambda (sym) (cond ((proc? sym)) ((macro? sym)))))(_out-help-fix-end "aQ5yXJk4g" (lambda (li) ((lambda (arr m) (setq arr (list->array li)) (setq m (sub1 (len arr))) ((lambda (n G8) ((lambda (G9) (setq G9 (lambda nil (cond ((< n G8) (cond ((1st (array-ref arr n)) ((lambda (a b) (array-set arr (add1 n) (list (1st b) (str+ (slice (2nd a) (sub1 (len (2nd a))) (len (2nd a))) (2nd b)))) (array-set arr n (list (1st a) (slice (2nd a) 0 (sub1 (len (2nd a))))))) (array-ref arr n) (array-ref arr (add1 n)))) (t (void))) (setq n (+ n 1)) (G9)) (t (void))))) (G9)) nil) (array->list arr)) 0 m)) nil nil)))(list-reverse "aQ5yXJk4g" (intrinsic 'list-reverse))(ling.jaro-winkler "aQ5yXJk4g" (intrinsic 'ling.jaro-winkler))(*week-ns* . 604800000000000)(queue-len "aQ5yXJk4g" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (len (array-ref q 2)))))(fl.cbrt "aQ5yXJk4g" (intrinsic 'fl.cbrt))(*sync-wait-upper-bound* . 2000)(fl.round-to-even "aQ5yXJk4g" (intrinsic 'fl.round-to-even))(_unprotect "aQ5yXJk4g" (intrinsic '_unprotect))(dump "aQ5yXJk4g" (lambda (&rest arg) ((lambda (all? li) (cond (all? li) (t (filter li (lambda (x) (< (instr (sym->str x) "_") 0)))))) (2nd arg nil) (cond ((list? arg) ((lambda (start) (cond ((sym? start) ((lambda (sym0 n) (setq sym0 (sym->str start)) (setq n (len sym0)) (sort-symbols (filter (dump-bindings) (lambda (sym) (cond ((> n (len (sym->str sym))) nil) (t (equal? (slice (sym->str sym) 0 n) sym0))))))) nil nil)) (t (sort-symbols (dump-bindings))))) (1st arg nil))) (t (t (sort-symbols (dump-bindings))))))))(dec.greater-than-or-equal? "aQ5yXJk4g" (intrinsic 'dec.greater-than-or-equal?))(delete "aQ5yXJk4g" (intrinsic 'delete))(_testout "aQ5yXJk4g" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (out arg)) (t (void)))))(mapcar "aQ5yXJk4g" (lambda (x f) (cond (x (cons (f (car x)) (mapcar (cdr x) f))))))(foreach "aQ5yXJk4g" (lambda (seq proc) (cond ((list? seq) (list-foreach seq proc)) ((array? seq) (array-foreach seq proc)) ((str? seq) (str-foreach seq proc)) (t (error "foreach - not a sequence: %v" seq)))))(str+ "aQ5yXJk4g" (intrinsic 'str+))(wait-for* "aQ5yXJk4g" (lambda (dict key timeout) (_wait-for* dict key timeout (now-ns))))(str-forall? "aQ5yXJk4g" (lambda (s pred) ((lambda (c) (_seq-forall? c pred 0 (array-len c))) (str->chars s))))(synout "aQ5yXJk4g" (lambda (arg) (enq (lambda nil (out arg) (cond ((permission? 'interactive (read-eval-reply))) (t (void)))))))(caar "aQ5yXJk4g" (lambda (x) (car (car x))))(bind "aQ5yXJk4g" (intrinsic 'bind))(dict-map! "aQ5yXJk4g" (intrinsic 'dict-map!))(lighten "aQ5yXJk4g" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_lighten-delta c (cond (amount (car amount)) (t 30)))) (list (min (+ (1st c 180) delta) 255) (min (+ (2nd c 180) delta) 255) (min (+ (3rd c 180) delta) 255) (4th c))) nil nil)))(dec.pow "aQ5yXJk4g" (intrinsic 'dec.pow))(str-join "aQ5yXJk4g" (lambda (fields sep) (_str-join fields sep "")))(fl.lgamma "aQ5yXJk4g" (intrinsic 'fl.lgamma))(set-help-topic-info "aQ5yXJk4g" (lambda (topic header info) (set *help-topics* topic (list header info))))(dec.round "aQ5yXJk4g" (intrinsic 'dec.round))(rplaca "aQ5yXJk4g" (intrinsic 'rplaca))(% "aQ5yXJk4g" (intrinsic '%))(str-foreach "aQ5yXJk4g" (lambda (s proc) ((lambda (i G79) ((lambda (G80) (setq G80 (lambda nil (cond ((< i G79) (proc (str-ref s i)) (setq i (+ i 1)) (G80)) (t (void))))) (G80)) nil)) 0 (len s)) (void)))(atom? "aQ5yXJk4g" (intrinsic 'atom?))(dec.exponent "aQ5yXJk4g" (intrinsic 'dec.exponent))(caaar "aQ5yXJk4g" (lambda (x) (car (car (car x)))))(+ "aQ5yXJk4g" (intrinsic '+))(task-schedule "aQ5yXJk4g" (lambda (id) (cond ((not (task? id)) (error "task-schedule: not a valid task %v" id)) (t (void))) (cond ((>= *running-tasks* (cpunum)) (progn (mutex-lock (array-ref *scheduled-tasks* 1)) (array-set *scheduled-tasks* 2 (_append (array-ref *scheduled-tasks* 2) (list id))) (mutex-unlock (array-ref *scheduled-tasks* 1)))) (t (task-run id)))))(6th "aQ5yXJk4g" (lambda (seq &rest default) (cond ((null? default) (nth seq 5)) (t (nthdef seq 5 (car default))))))(*scheduled-tasks* . #(queue ("aQ5yXJk4g" (make-mutex)) nil))(strsplit "aQ5yXJk4g" (intrinsic 'strsplit))(day+ "aQ5yXJk4g" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *day-ns* delta)))))(replace-hook "aQ5yXJk4g" (lambda (h proc) (remove-hooks h) (add-hook h proc)))(remove-duplicates "aQ5yXJk4g" (lambda (seq) (cond ((list? seq) (_remove-duplicates seq nil (dict))) ((array? seq) (list->array (_remove-duplicates (array->list seq) nil (dict)))) ((str? seq) (list->str (_remove-duplicates (str->list seq) nil (dict)))) (t (error "remove-duplicates: not a sequence: %v" seq)))))(*error-handler* "aQ5yXJk4g" (dict '(0 (lambda (err) (setq *last-error* err) (*error-printer* err)))))(dec.str-fixed-cash "aQ5yXJk4g" (intrinsic 'dec.str-fixed-cash))(pop-error-handler "aQ5yXJk4g" (lambda nil (popstacked *error-handler* (sys 'taskid) nil)))(*testinfo* "aQ5yXJk4g" (dict 'nil))(cd "aQ5yXJk4g" (intrinsic 'cd))(task-state "aQ5yXJk4g" (lambda (id) (cond ((task? id) (get *tasks-state* id 'undefined)) (t (error "task-state: invalid task %v" id)))))(stop-task-scheduler "aQ5yXJk4g" (lambda nil (cond ((task? *scheduler*) (task-send *scheduler* 'end)) (t (void)))))(ling.levenshtein "aQ5yXJk4g" (intrinsic 'ling.levenshtein))(letrec "aQ5yXJk4g" (macro (args &rest body) ((lambda (vars setqs) (progn (setq vars (lambda (x) (cond (x (cons (caar x) (vars (cdr x))))))) 'vars) (progn (setq sets (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x))))))) 'sets) (append (cons 'let (cons (vars args) (sets args))) body)) nil nil)))(*blackboard*)(dec.is-zero? "aQ5yXJk4g" (intrinsic 'dec.is-zero?))(sysmsg* "aQ5yXJk4g" (lambda (msg) (cond ((member (sys 'editmode) '(page console)) (synouty (list (list 'fg (the-color 'z3s5-sysmsg-text) (list 'bg (the-color 'z3s5-sysmsg-back) (fmt "%v\n" msg)))))) (t (log msg)))))(force "aQ5yXJk4g" (intrinsic 'force))(_index "aQ5yXJk4g" (lambda (seq elem idx n pred) (cond ((= idx n) -1) ((pred (nth seq idx) elem) idx) (t (_index seq elem (add1 idx) n pred)))))(array? "aQ5yXJk4g" (intrinsic 'array?))(set "aQ5yXJk4g" (intrinsic 'set))(reverse "aQ5yXJk4g" (lambda (seq) (cond ((array? seq) (array-reverse seq)) ((list? seq) (list-reverse seq)) ((str? seq) (str-reverse seq)) (t (error "reverse - not a sequence: %v" seq)))))(db.open "aQ5yXJk4g" (intrinsic 'db.open))(with-mutex-lock "aQ5yXJk4g" (macro (mu &rest body) (list 'progn (list 'mutex-lock mu) (cons 'with-final (cons (list 'lambda (list 'err 'result) (list 'mutex-unlock mu) (list 'if 'err (list '*error-handler* 'err) 'result)) body)))))(internalize "aQ5yXJk4g" (lambda (arg nonce) (cond ((list? arg) (cond ((equal? (1st arg nil) nonce) (eval (internalize (2nd arg nil) nonce))) (t (mapcar arg (lambda (x) (internalize x nonce)))))) ((str? arg) arg) ((array? arg) (map arg (lambda (x) (internalize x nonce)))) ((dict? arg) (dict-map arg (lambda (k v) (internalize v nonce)))) (t arg))))(_readall "aQ5yXJk4g" (lambda (n acc) ((lambda (datum) (cond ((eof? datum) acc) (t (_readall n (cons datum acc))))) (read n))))(str-empty? "aQ5yXJk4g" (intrinsic 'str-empty?))(abs "aQ5yXJk4g" (lambda (x) (cond ((< x 0) (* x -1)) (t x))))(map "aQ5yXJk4g" (lambda (seq proc) (cond ((list? seq) (mapcar seq proc)) ((array? seq) ((lambda (c) ((lambda (i G50) ((lambda (G51) (setq G51 (lambda nil (cond ((< i G50) (array-set c i (proc (array-ref seq i))) (setq i (+ i 1)) (G51)) (t (void))))) (G51)) nil)) 0 (array-len seq)) c) (array-copy seq))) ((str? seq) (strmap seq proc)) (t (error "map - not a sequence: %v" seq)))))(rndseed "aQ5yXJk4g" (intrinsic 'rndseed))(*quarter-ns* . 900000000000)(null? "aQ5yXJk4g" (lambda (x) (eq? x nil)))(get-partitions "aQ5yXJk4g" (lambda (x n) (lambda (&rest idx) (cond ((null? idx) (count-partitions x n)) (t (cond ((cond ((< (1st idx -1) 0)) ((>= (1st idx -1) (count-partitions x n)))) nil) (t (nth-partition x n (1st idx 0)))))))))(*second-ns* . 1000000000)(inchars "aQ5yXJk4g" (lambda (c chs) (set-element? chs c)))(externalize0 "aQ5yXJk4g" (lambda (arg) (cond ((sym? arg) arg) ((list? arg) (mapcar arg (lambda (x) (externalize0 x)))) ((array? arg) (map arg (lambda (x) (externalize0 x)))) ((dict? arg) (list 'dict (list 'quote (externalize0 (dict->list arg))))) ((num? arg) arg) ((str? arg) arg) ((port? arg) arg) (t (_external-str arg)))))(9th "aQ5yXJk4g" (lambda (seq &rest default) (cond ((null? default) (nth seq 8)) (t (nthdef seq 8 (car default))))))(permissions "aQ5yXJk4g" (intrinsic 'permissions))(fdelete "aQ5yXJk4g" (intrinsic 'fdelete))(get-or-set "aQ5yXJk4g" (intrinsic 'get-or-set))(add-hook "aQ5yXJk4g" (lambda (h proc) ((lambda (id) (cond ((num? id) (add-hook-internal id proc)) (t nil))) (hook h))))(fl.mod "aQ5yXJk4g" (intrinsic 'fl.mod))(wait-for-empty* "aQ5yXJk4g" (lambda (dict key timeout) (_wait-for-empty* dict key timeout (now-ns))))(on-feature "aQ5yXJk4g" (macro (test &rest body) (cons 'when (cons (list 'feature? test) body))))(dec.ceil "aQ5yXJk4g" (intrinsic 'dec.ceil))(random-color "aQ5yXJk4g" (lambda (&rest alpha) (list (rand 0 0 255) (rand 0 0 255) (rand 0 0 255) (1st alpha 255))))(with-mutex-rlock "aQ5yXJk4g" (macro (mu &rest body) (list 'progn (list 'mutex-rlock mu) (cons 'with-final (cons (list 'lambda (list 'err 'result) (list 'mutex-runlock mu) (list 'if 'err (list '*error-handler* 'err) 'result)) body)))))(task "aQ5yXJk4g" (lambda (sel proc) ((lambda (i tproc) (set *tasks-state* i 'new) (set *tasks* i tproc) i) (_new-task-id) (lambda (id) (with-final (lambda (err result) (cond ((eq? sel 'remove) (task-remove id)) (t (cond (err (task-broadcast 'error id err) (set *tasks-state* id 'error) (*error-printer* err)) (t (cond ((eq? sel 'auto) (task-remove id)) (t (task-broadcast 'finished id result) (set *tasks-state* id 'finished))))))) (cdec! '*running-tasks*) result) (set *tasks-state* id 'running) (cinc! '*running-tasks*) (proc id))))))(cst! "aQ5yXJk4g" (intrinsic 'cst!))(or "aQ5yXJk4g" (macro (x &rest y) (cond ((null? y) x) (t (list 'cond (list x) (list (cons 'or y)))))))(testing "aQ5yXJk4g" (macro (name) (list 'setq '*tests* (list 'cons (list 'lambda nil (list '_testout name) (list '_testout " ") (list 'set '*testinfo* (list 'quote 'test) name)) '*tests*))))(*scheduler*)(dict->array "aQ5yXJk4g" (intrinsic 'dict->array))(dump-bindings "aQ5yXJk4g" (intrinsic 'dump-bindings))(writable? "aQ5yXJk4g" (intrinsic 'writable?))(push! "aQ5yXJk4g" (macro (sym elem) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'array-set sym 2 (list 'cons elem (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)))))(queue-empty? "aQ5yXJk4g" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (null? (array-ref q 2)))))(fl.sinh "aQ5yXJk4g" (intrinsic 'fl.sinh))(if "aQ5yXJk4g" (macro (test then &rest else) (cons 'cond (cons (list test then) (cond (else (list (cons t else))))))))(/ "aQ5yXJk4g" (intrinsic '/))(the-color "aQ5yXJk4g" (lambda (spec) (cond ((sym? spec) ((lambda (c) (cond (c (cond ((sym? c) (color c)) ((> (len c) 3) c) (t (nreverse (cons 255 (nreverse c)))))) (t (error "color not in *colors*: %v" spec)))) (get *colors* spec nil))) ((list? spec) (cond ((< (len spec) 3) (error "expected a list of r g b values, given %v" spec)) ((= (len spec) 3) (nreverse (cons 255 (nreverse spec)))) ((> (len spec) 3) spec) (t (error "malformed color list: %v" spec)))) (t (error "malformed color specification: %v" spec)))))(dict-protect "aQ5yXJk4g" (intrinsic 'dict-protect))(task-broadcast "aQ5yXJk4g" (lambda (sel id &rest msg) (mutex-lock *blackboard-mutex*) (setq *blackboard* (cons (list sel (cons id msg)) *blackboard*)) (mutex-unlock *blackboard-mutex*)))(member "aQ5yXJk4g" (lambda (key x) (cond ((null? x) nil) ((equal? key (car x)) x) (t (member key (cdr x))))))(fl.log2 "aQ5yXJk4g" (intrinsic 'fl.log2))(help-topics "aQ5yXJk4g" (lambda nil ((lambda (d) (dict-foreach *help* (lambda (k v) ((lambda (li) (cond ((not (null? li)) (foreach (car li) (lambda (topic) (set d topic t)))) (t (void)))) (cdr (assoc 'topic v))))) (sort-symbols (dict->keys d))) (dict))))(now-ms "aQ5yXJk4g" (lambda nil (div (now-ns) 1000000)))(hook "aQ5yXJk4g" (lambda (h) ((lambda (id) (cond (id id) (t (get *custom-hooks* h nil)))) (get *hooks* h nil))))(case "aQ5yXJk4g" (macro (test &rest cases) ((lambda (sym clauses) (setq sym (gensym)) (setq clauses (mapcar cases (lambda (x) (cond ((cond ((equal? (car x) 'true)) ((cond ((equal? (car x) 't)) ((equal? (car x) 'else))))) x) ((atom? (car x)) (cons (list 'equal? sym (list 'quote (car x))) (cdr x))) (t (cons (list 'member sym (list 'quote (car x))) (cdr x))))))) (list 'let (list (list sym test)) (cons 'cond clauses))) nil nil)))(dec.num? "aQ5yXJk4g" (intrinsic 'dec.num?))(sets "aQ5yXJk4g" (letrec nil (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x))))))))(dequeue! "aQ5yXJk4g" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result))))))(*e* . 2.718281828459045)(defun "aQ5yXJk4g" (macro (name args &rest body) (list 'progn (list 'setq name (cons 'lambda (cons args body))) (list 'quote name))))(eof? "aQ5yXJk4g" (intrinsic 'eof?))(char->str "aQ5yXJk4g" (intrinsic 'char->str))(dec.less-than? "aQ5yXJk4g" (intrinsic 'dec.less-than?))(str-remove-prefix "aQ5yXJk4g" (lambda (s pfx) (cond ((cond ((str-empty? pfx)) ((str-empty? s))) s) ((equal? (str-slice s 0 (min (len pfx) (len s))) pfx) (str-slice s (min (len pfx) (len s)) (len s))) (t s))))(stack-len "aQ5yXJk4g" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (len (array-ref q 2)))))(fl.j0 "aQ5yXJk4g" (intrinsic 'fl.j0))(array-reverse "aQ5yXJk4g" (intrinsic 'array-reverse))(_seq-exists? "aQ5yXJk4g" (lambda (seq pred n m) (cond ((< n m) (cond ((pred (nth seq n)) t) (t (_seq-exists? seq pred (add1 n) m)))) (t nil))))(str->blob "aQ5yXJk4g" (intrinsic 'str->blob))(seek "aQ5yXJk4g" (intrinsic 'seek))(dec.is-negative? "aQ5yXJk4g" (intrinsic 'dec.is-negative?))(write-string "aQ5yXJk4g" (intrinsic 'write-string))(dict->keys "aQ5yXJk4g" (lambda (d) ((lambda (li) (dict-foreach d (lambda (k v) (setq li (cons k li)))) li) nil)))(*scheduler-sleep-interval* . 800)(glance "aQ5yXJk4g" (lambda (q &rest default) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (1st (array-ref q 2) (cond (default (car default)) (t nil))))))(run-selftest "aQ5yXJk4g" (lambda (&rest opt) (set *testinfo* 'silent? (1st opt nil)) (_testouty (list (list 'fg 'z3s5-blue (list 'bg 'z3s5-orange (list 'text "<<< RUNNING Z3S5 LISP SELFTEST >>>\n"))))) (cond ((not (get *testinfo* 'silent? nil)) (beep 'info)) (t (void))) (set *testinfo* 'count 0) (set *testinfo* 'failure 0) (set *testinfo* 'success 0) (set *testinfo* 'error 0) ((lambda (tests traverse continue) (setq tests (reverse *tests*)) (setq traverse (lambda nil (cond ((null? tests) (void)) (t ((lambda (test) (setq tests (cdr tests)) (test) (traverse)) (car tests)))))) (setq continue (lambda nil (pop-error-handler) (set *testinfo* 'continuation nil) ((lambda (perfect?) (cond ((not (get *testinfo* 'silent? nil)) (cond (perfect? (void (future ((lambda (n G1) ((lambda (G3) (setq G3 (lambda nil (cond ((< n G1) (beep 'okay) (sleep 500) (setq n (+ n 1)) (G3)) (t (void))))) (G3)) nil)) 0 3)))) (t (void (future ((lambda (n G2) ((lambda (G4) (setq G4 (lambda nil (cond ((< n G2) (beep 'error) (sleep 400) (setq n (+ n 1)) (G4)) (t (void))))) (G4)) nil)) 0 3)))))) (t (void))) ((lambda (msg) (cond (perfect? (_testout msg)) (t (_testouty (list (list 'bg 'z3s5-error-back (list 'fg 'z3s5-error-text (list 'text msg)))))))) (fmt "\n==> Passed %v of %v tests, %v errors, %v failures.\n" (get *testinfo* 'success) (get *testinfo* 'count) (get *testinfo* 'error) (get *testinfo* 'failure)))) (cond ((= (get *testinfo* 'failure 0) 0) (= (get *testinfo* 'error 0) 0)))))) (set *testinfo* 'continuation (lambda nil (traverse) (continue))) (push-error-handler (lambda (err) (set *testinfo* 'error (add1 (get *testinfo* 'error 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (str+ (shorten (fmt "\n%v ERR %v" (get *testinfo* 'count 0) err) (* 3 (sys 'cols 80))) "\n")))))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (traverse) (continue)) nil nil nil)))(_str-segment "aQ5yXJk4g" (lambda (s sc ec acc) ((lambda (start) (cond ((not start) (_append acc (list (list nil s)))) (t ((lambda (end) (cond ((cond ((not end)) ((<= end start))) (_append acc (list (list nil (slice s 0 start)) (list t (slice s start (len s)))))) (t (_str-segment (slice s (add1 end) (len s)) sc ec (_append acc (list (list nil (slice s 0 start)) (list t (slice s start (add1 end))))))))) (str-index s ec (add1 start)))))) (str-index s sc))))(dec.truncate "aQ5yXJk4g" (intrinsic 'dec.truncate))(array-copy "aQ5yXJk4g" (intrinsic 'array-copy))(*halfhour-ns* . 1800000000000)(dec.str "aQ5yXJk4g" (intrinsic 'dec.str))(fl.nan "aQ5yXJk4g" (intrinsic 'fl.nan))(pop! "aQ5yXJk4g" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result))))))(> "aQ5yXJk4g" (lambda (x y) (< y x)))(poke "aQ5yXJk4g" (intrinsic 'poke))(fl.log1p "aQ5yXJk4g" (intrinsic 'fl.log1p))(_maybe-translate-help "aQ5yXJk4g" (lambda (datum strnew strold) (cond ((sym? datum) ((lambda (dstr) (cond ((equal? dstr strold) (str->sym strnew)) ((equal? (1st dstr 0) 46) ((lambda (without-dot) (cond (*_current-lib* (str->sym (_prefix-lib-sym *_current-lib* without-dot))) (t without-dot))) (str->sym (slice dstr 1 (len dstr))))) (t datum))) (sym->str datum))) ((str? datum) (str-replace datum strold strnew -1)) ((cond ((list? datum) (not (null? datum)))) (cons (_maybe-translate-help (car datum) strnew strold) (_maybe-translate-help (cdr datum) strnew strold))) (t datum))))(db.str "aQ5yXJk4g" (intrinsic 'db.str))(/= "aQ5yXJk4g" (lambda (x y) (not (= x y))))(eq? "aQ5yXJk4g" (intrinsic 'eq?))(dec.sub "aQ5yXJk4g" (intrinsic 'dec.sub))(dict "aQ5yXJk4g" (intrinsic 'dict))(_externalize-nonce "aQ5yXJk4g" (lambda (arg nonce) ((lambda (s) ((lambda (G89) (push-finalizer (lambda (err x) (cond (err (*error-handler* err)) (t (void))) ((lambda (result) (close s) (cond (nonce (list nonce result)) (t result))) (car (readall s))))) (push-error-handler (lambda (err) (void (pop-error-handler)) ((pop-finalizer) err G89) ((lambda (handler) (cond (handler (handler err)) (t (void)))) (pop-error-handler)))) (setq G89 (progn)) (pop-error-handler) ((pop-finalizer) nil G89)) nil)) (stropen (_external arg)))))(_seq-forall? "aQ5yXJk4g" (lambda (seq pred n m) (cond ((< n m) (cond ((pred (nth seq n)) (_seq-forall? seq pred (add1 n) m)) (t nil))) (t t))))(dec.mod "aQ5yXJk4g" (intrinsic 'dec.mod))(declare-unprotected "aQ5yXJk4g" (lambda (sym) (set *mutable-toplevel-symbols* sym t)))(_out-help-segment "aQ5yXJk4g" (lambda (s start end) (_out-help-fix-end (mapcar (str-segment s start end) (lambda (x) (cond ((1st x nil) (list t (slice (2nd x) 1 (len (2nd x))))) (t x)))))))(_read-zimage "aQ5yXJk4g" (lambda (in header file c nonce) ((lambda (li) (cond ((eof? li) (zimage-header-info header file c)) ((not (list? li)) (error "zimage corrupted: %v" li)) (t (bind (car li) (eval (internalize (cadr li) nonce))) (_read-zimage in header file (add1 c) nonce)))) (read in))))(read "aQ5yXJk4g" (intrinsic 'read))(beep "aQ5yXJk4g" (intrinsic 'beep))(db.row "aQ5yXJk4g" (intrinsic 'db.row))(= "aQ5yXJk4g" (intrinsic 'eql?))(dec.cmp "aQ5yXJk4g" (intrinsic 'dec.cmp))(index "aQ5yXJk4g" (lambda (seq elem &rest pred) (_index seq elem 0 (len seq) (cond (pred (car pred)) (t eq?)))))(alist->dict "aQ5yXJk4g" (lambda (li) ((lambda (d) (foreach li (lambda (p) (set d (car p) (cdr p)))) d) (dict))))(*ln10* . 2.302585092994046)(memstats "aQ5yXJk4g" (intrinsic 'memstats))(z3s5-image (version ("2.3.3+45ae59b" 16 "linux/amd64" Z3S5-Lisp)) (info ("test image")) (nonce "19L9uJzVR") (min-version 0.1) (time ((2022 8 2 2 31) (11 4 8 849494574 1659438248849494574))) (entry nil))(ccmp ("19L9uJzVR" (intrinsic 'ccmp)))(lighten ("19L9uJzVR" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_lighten-delta c (cond (amount (car amount)) (t 30)))) (list (min (+ (1st c 180) delta) 255) (min (+ (2nd c 180) delta) 255) (min (+ (3rd c 180) delta) 255) (4th c))) nil nil))))