(z3s5-image (version ("2.3.3+36c0f36" 16 "linux/amd64" Z3S5-Lisp)) (info ("testimage")) (nonce "NTVXKykVg") (min-version "0.0") (time ((2022 8 4 4 31) (14 19 9 672828015 1659622749672828015))) (entry nil))(synout t ("NTVXKykVg" (lambda (arg) (enq (lambda nil (out arg) (cond ((permission? 'interactive (read-eval-reply))) (t (void))))))))(fl.pow t ("NTVXKykVg" (intrinsic 'fl.pow)))(stack-len t ("NTVXKykVg" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (len (array-ref q 2))))))(fl.is-nan? t ("NTVXKykVg" (intrinsic 'fl.is-nan?)))(abs t ("NTVXKykVg" (lambda (x) (cond ((< x 0) (* x -1)) (t x)))))(_testout t ("NTVXKykVg" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (out arg)) (t (void))))))(dec.sum t ("NTVXKykVg" (intrinsic 'dec.sum)))(array? t ("NTVXKykVg" (intrinsic 'array?)))(fl.round t ("NTVXKykVg" (intrinsic 'fl.round)))(fl.log t ("NTVXKykVg" (intrinsic 'fl.log)))(bound? t ("NTVXKykVg" (macro (sym) (_bound? sym))))(dec.to-json t ("NTVXKykVg" (intrinsic 'dec.to-json)))(div t ("NTVXKykVg" (intrinsic 'div)))(with-mutex-lock t ("NTVXKykVg" (macro (mu &rest body) (list 'progn (list 'mutex-lock mu) (cons 'with-final (cons (list 'lambda (list 'err 'result) (list 'mutex-unlock mu) (list 'if 'err (list '*error-handler* 'err) 'result)) body))))))(char->str t ("NTVXKykVg" (intrinsic 'char->str)))(push-finalizer t ("NTVXKykVg" (lambda (proc) (pushstacked *finalizers* (sys 'taskid) proc))))(expect-true t ("NTVXKykVg" (macro (&rest computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym (cons 'progn computed))) (list 'cond (list sym (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect true, result is %v\n" (list '_testidx) sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil))))(*sync-wait-lower-bound* t 1)(list-ref t ("NTVXKykVg" (intrinsic 'list-ref)))(fl.ldexp t ("NTVXKykVg" (intrinsic 'fl.ldexp)))(str-slice t ("NTVXKykVg" (intrinsic 'str-slice)))(dict->keys t ("NTVXKykVg" (lambda (d) ((lambda (li) (dict-foreach d (lambda (k v) (setq li (cons k li)))) li) nil))))(dict? t ("NTVXKykVg" (intrinsic 'dict?)))(beep t ("NTVXKykVg" (intrinsic 'beep)))(dec.str-fixed-bank t ("NTVXKykVg" (intrinsic 'dec.str-fixed-bank)))(array-reverse t ("NTVXKykVg" (intrinsic 'array-reverse)))(open t ("NTVXKykVg" (intrinsic 'open)))(cpunum t ("NTVXKykVg" (lambda nil (2nd (sys 'version)))))(fl.lgamma t ("NTVXKykVg" (intrinsic 'fl.lgamma)))(db.open* t ("NTVXKykVg" (intrinsic 'db.open*)))(week+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *week-ns* delta))))))(cadar t ("NTVXKykVg" (lambda (x) (car (cdr (car x))))))(db.result-column-count t ("NTVXKykVg" (intrinsic 'db.result-column-count)))(_wait-until* t ("NTVXKykVg" (lambda (dict key pred timeout first-time) ((lambda (value) (cond ((cond ((pred value)) ((cond ((>= timeout 0) (>= (- (now-ns) first-time) timeout)) (t nil)))) value) (t (sleep-ns (rand 0 *sync-wait-lower-bound* *sync-wait-upper-bound*)) (_wait-until* dict key pred timeout first-time)))) (get dict key nil)))))(array-forall? t ("NTVXKykVg" (lambda (arr pred) (_seq-forall? arr pred 0 (array-len arr)))))(dict-merge t ("NTVXKykVg" (lambda (a b) ((lambda (c) (dict-foreach b (lambda (k v) (cond ((not (has-key? a k)) (set c k v)) (t (void))))) c) (dict-copy a)))))(nconc t ("NTVXKykVg" (lambda (&rest lists) (cond ((null? (cdr lists)) (car lists)) (t (cond ((null? (car lists)) (apply nconc (cdr lists))) (t (setcdr (list-last (car lists)) (apply nconc (cdr lists))) (car lists))))))))(caaar t ("NTVXKykVg" (lambda (x) (car (car (car x))))))(fl.exp t ("NTVXKykVg" (intrinsic 'fl.exp)))(list-forall? t ("NTVXKykVg" (lambda (li pred) (cond ((null? li) t) ((pred (car li)) (list-forall? (cdr li) pred)) (t nil)))))(unless t ("NTVXKykVg" (macro (test &rest then) (cons 'cond (cons (cons (list 'not test) then) (cond (t (list (list t (list 'void))))))))))(dump t ("NTVXKykVg" (lambda (&rest arg) ((lambda (all? li) (cond (all? li) (t (filter li (lambda (x) (< (instr (sym->str x) "_") 0)))))) (2nd arg nil) (cond ((list? arg) ((lambda (start) (cond ((sym? start) ((lambda (sym0 n) (setq sym0 (sym->str start)) (setq n (len sym0)) (sort-symbols (filter (dump-bindings) (lambda (sym) (cond ((> n (len (sym->str sym))) nil) (t (equal? (slice (sym->str sym) 0 n) sym0))))))) nil nil)) (t (sort-symbols (dump-bindings))))) (1st arg nil))) (t (t (sort-symbols (dump-bindings)))))))))(ling.nysiis t ("NTVXKykVg" (intrinsic 'ling.nysiis)))(blob? t ("NTVXKykVg" (intrinsic 'blob?)))(db? t ("NTVXKykVg" (intrinsic 'db?)))(truncate t ("NTVXKykVg" (intrinsic 'truncate)))(dec.avg t ("NTVXKykVg" (intrinsic 'dec.avg)))(externalize t ("NTVXKykVg" (lambda (arg &rest rest) ((lambda (nonce) (externalize* arg nonce)) (1st rest nil)))))(get-or-set t ("NTVXKykVg" (intrinsic 'get-or-set)))(dict-protected? t ("NTVXKykVg" (intrinsic 'dict-protected?)))(cwait t ("NTVXKykVg" (intrinsic 'cwait)))(fl.tanh t ("NTVXKykVg" (intrinsic 'fl.tanh)))(forall? t ("NTVXKykVg" (lambda (seq pred) (cond ((list? seq) (list-forall? seq pred)) ((array? seq) (array-forall? seq pred)) ((str? seq) (str-forall? seq pred)) (t (error "all - not a sequence: %v" seq))))))(list-last t ("NTVXKykVg" (lambda (list) (cond ((atom? (cdr list)) list) (t (list-last (cdr list)))))))(ling.match-rating-codex t ("NTVXKykVg" (intrinsic 'ling.match-rating-codex)))(fl.atanh t ("NTVXKykVg" (intrinsic 'fl.atanh)))(cdar t ("NTVXKykVg" (lambda (x) (cdr (car x)))))(_str-join t ("NTVXKykVg" (lambda (fields sep acc) (cond ((null? fields) (cond ((str-empty? acc) "") (t (str-slice acc 0 (- (strlen acc) (strlen sep)))))) (t (_str-join (cdr fields) sep (str+ acc (car fields) sep)))))))(db.query t ("NTVXKykVg" (intrinsic 'db.query)))(gensym t ("NTVXKykVg" (intrinsic 'gensym)))(db.step t ("NTVXKykVg" (intrinsic 'db.step)))(dotimes t ("NTVXKykVg" (macro (spec &rest body) ((lambda (name count) (cons 'let (cons (list (list name 0) (list count (cadr spec))) (cons (_append (cons 'while (cons (list '< name count) body)) (list (list 'setq name (list '+ name 1)))) (cond ((cddr spec) (list (caddr spec)))))))) (car spec) (gensym)))))(array-slice t ("NTVXKykVg" (intrinsic 'array-slice)))(*gensym-counter* nil 90)(with-error-handler t ("NTVXKykVg" (macro (handler &rest body) ((lambda (result) (list 'let (list (list result nil)) (list 'push-error-handler handler) (list 'setq result (cons 'progn body)) (list 'void (list 'pop-error-handler)) result)) (gensym)))))(datelist->epoch-ns t ("NTVXKykVg" (lambda (d) ((lambda (unix-ns) (cond (unix-ns unix-ns) (t (date->epoch-ns (1st (1st d)) (2nd (1st d) 1) (3rd (1st d) 1) (1st (2nd d nil) 12) (2nd (2nd d nil) 0) (3rd (2nd d nil) 0) (4th (2nd d nil) 0))))) (5th (2nd d nil) nil)))))(shorten t ("NTVXKykVg" (lambda (s n) (cond ((not (str? s)) s) ((< (len s) n) s) (t (str+ (slice s 0 (div (- n 3) 2)) "..." (slice s (div (- n 3) 2) (- n 3))))))))(*phi* t 1.618033988749895)(task-broadcast t ("NTVXKykVg" (lambda (sel id &rest msg) (mutex-lock *blackboard-mutex*) (setq *blackboard* (cons (list sel (cons id msg)) *blackboard*)) (mutex-unlock *blackboard-mutex*))))(+ t ("NTVXKykVg" (intrinsic '+)))(case t ("NTVXKykVg" (macro (test &rest cases) ((lambda (sym clauses) (setq sym (gensym)) (setq clauses (mapcar cases (lambda (x) (cond ((cond ((equal? (car x) 'true)) ((cond ((equal? (car x) 't)) ((equal? (car x) 'else))))) x) ((atom? (car x)) (cons (list 'equal? sym (list 'quote (car x))) (cdr x))) (t (cons (list 'member sym (list 'quote (car x))) (cdr x))))))) (list 'let (list (list sym test)) (cons 'cond clauses))) nil nil))))(let t ("NTVXKykVg" (macro (args &rest body) ((lambda (vars vals) (progn (setq vars (lambda (x) (cond (x (cons (cond ((atom? (car x)) (car x)) (t (caar x))) (vars (cdr x))))))) 'vars) (progn (setq vals (lambda (x) (cond (x (cons (cond ((atom? (car x)) nil) (t (cadar x))) (vals (cdr x))))))) 'vals) (cons (cons 'lambda (cons (vars args) body)) (vals args))) nil nil))))(nl t ("NTVXKykVg" (lambda nil (out "\n"))))(macro? t ("NTVXKykVg" (intrinsic 'macro?)))(testing t ("NTVXKykVg" (macro (name) (list 'setq '*tests* (list 'cons (list 'lambda nil (list '_testout name) (list '_testout " ") (list 'set '*testinfo* (list 'quote 'test) name)) '*tests*)))))(_index t ("NTVXKykVg" (lambda (seq elem idx n pred) (cond ((= idx n) -1) ((pred (nth seq idx) elem) idx) (t (_index seq elem (add1 idx) n pred))))))(fl.erfc t ("NTVXKykVg" (intrinsic 'fl.erfc)))(fl.asin t ("NTVXKykVg" (intrinsic 'fl.asin)))(6th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 5)) (t (nthdef seq 5 (car default)))))))(task-recv t ("NTVXKykVg" (lambda (id) (cond ((not (task? id)) (error "task-recv: invalid task %v" id)) (t ((lambda (arr msg? msg) (setq arr (get *tasks-to-msg* id nil)) (setq msg? (cond (arr (cond ((array? arr) (>= (len arr) 1)))))) (setq msg (cond (msg? (array-ref arr 0)) (t nil))) (cond (msg? (set *tasks-to-msg* id (array-slice arr 1 (len arr)))) (t (void))) msg) nil nil nil))))))(filter t ("NTVXKykVg" (lambda (li pred) ((lambda (filter-aux) (setq filter-aux (lambda (li acc) (cond ((not li) (nreverse acc)) ((pred (car li)) (filter-aux (cdr li) (cons (car li) acc))) (t (filter-aux (cdr li) acc))))) (filter-aux li nil)) nil))))(sys-key? t ("NTVXKykVg" (lambda (k) ((lambda (s) (cond ((equal? (sys k s) s) nil) (t t))) (gensym)))))(setcdr t ("NTVXKykVg" (intrinsic 'rplacd)))(*custom-hooks* t ("NTVXKykVg" (dict 'nil)))(permission? t ("NTVXKykVg" (intrinsic 'permission?)))(cddar t ("NTVXKykVg" (lambda (x) (cdr (cdr (car x))))))(mutex-rlock t ("NTVXKykVg" (intrinsic 'mutex-rlock)))(blob->hex t ("NTVXKykVg" (intrinsic 'blob->hex)))(push! t ("NTVXKykVg" (macro (sym elem) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'array-set sym 2 (list 'cons elem (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1))))))(sleep-ns t ("NTVXKykVg" (intrinsic 'sleep-ns)))(*max-float32* t 3.4028234663852886e+38)(wait-for* t ("NTVXKykVg" (lambda (dict key timeout) (_wait-for* dict key timeout (now-ns)))))(seekable? t ("NTVXKykVg" (intrinsic 'seekable?)))(fl.j1 t ("NTVXKykVg" (intrinsic 'fl.j1)))(closure? t ("NTVXKykVg" (intrinsic 'closure?)))(list->str t ("NTVXKykVg" (lambda (li) (array->str (list->array li)))))(valid? t ("NTVXKykVg" (intrinsic 'valid?)))(eof? t ("NTVXKykVg" (intrinsic 'eof?)))(intrinsic t ("NTVXKykVg" (intrinsic 'intrinsic)))(ling.damerau-levenshtein t ("NTVXKykVg" (intrinsic 'ling.damerau-levenshtein)))(while t ("NTVXKykVg" (macro (test &rest body) ((lambda (loop) (list 'letrec (list (list loop (list 'lambda nil (list 'cond (_append (cons test body) (list (list loop))) (list t (list 'void)))))) (list loop))) (gensym)))))(fl.ilogb t ("NTVXKykVg" (intrinsic 'fl.ilogb)))(setcar t ("NTVXKykVg" (intrinsic 'rplaca)))(dec.from-text t ("NTVXKykVg" (intrinsic 'dec.from-text)))(dec.is-zero? t ("NTVXKykVg" (intrinsic 'dec.is-zero?)))(the-color-names t ("NTVXKykVg" (lambda nil (dict->keys *colors*))))(day-of-week t ("NTVXKykVg" (intrinsic 'day-of-week)))(dec.is-negative? t ("NTVXKykVg" (intrinsic 'dec.is-negative?)))(set-help-topic-info t ("NTVXKykVg" (lambda (topic header info) (set *help-topics* topic (list header info)))))(semver.major t ("NTVXKykVg" (intrinsic 'semver.major)))(map t ("NTVXKykVg" (lambda (seq proc) (cond ((list? seq) (mapcar seq proc)) ((array? seq) ((lambda (c) ((lambda (i G50) ((lambda (G51) (setq G51 (lambda nil (cond ((< i G50) (array-set c i (proc (array-ref seq i))) (setq i (+ i 1)) (G51)) (t (void))))) (G51)) nil)) 0 (array-len seq)) c) (array-copy seq))) ((str? seq) (strmap seq proc)) (t (error "map - not a sequence: %v" seq))))))(task-schedule t ("NTVXKykVg" (lambda (id) (cond ((not (task? id)) (error "task-schedule: not a valid task %v" id)) (t (void))) (cond ((>= *running-tasks* (cpunum)) (progn (mutex-lock (array-ref *scheduled-tasks* 1)) (array-set *scheduled-tasks* 2 (_append (array-ref *scheduled-tasks* 2) (list id))) (mutex-unlock (array-ref *scheduled-tasks* 1)))) (t (task-run id))))))(_nreverse t ("NTVXKykVg" (lambda (x prev) ((lambda (next) (setcdr x prev) (cond ((null? next) x) (t (_nreverse next x)))) (cdr x)))))(dec.int-part t ("NTVXKykVg" (intrinsic 'dec.int-part)))(*_current-lib* nil nil)(dec.neg t ("NTVXKykVg" (intrinsic 'dec.neg)))(minmax t ("NTVXKykVg" (lambda (pred li so-far) (cond ((null? li) so-far) ((pred (car li) so-far) (minmax pred (cdr li) (car li))) (t (minmax pred (cdr li) so-far))))))(dict-map t ("NTVXKykVg" (lambda (d proc) ((lambda (cp) (dict-map! cp proc) cp) (dict-copy d)))))(remove-duplicates t ("NTVXKykVg" (lambda (seq) (cond ((list? seq) (_remove-duplicates seq nil (dict))) ((array? seq) (list->array (_remove-duplicates (array->list seq) nil (dict)))) ((str? seq) (list->str (_remove-duplicates (str->list seq) nil (dict)))) (t (error "remove-duplicates: not a sequence: %v" seq))))))(_out-help1 t ("NTVXKykVg" (lambda (sym info) (outy (_append (cons (list 'fg 'z3s5-help-entry-text (list 'bg 'z3s5-help-entry-back (cond ((_help-is-functional (cadr (assoc 'type info))) (fmt "%v : %v/%v\n" (_help-use info) (_help-type-to-str (cadr (assoc 'type info))) (_help-arity-to-str (cadr (assoc 'arity info))))) (t (fmt "%v : %v\n" (_help-use info) (_help-type-to-str (cadr (assoc 'type info)))))))) (_out-help-fmt-info (cadr (assoc 'info info)))) (list (list 'fg 'z3s5-help-text (list 'bg 'z3s5-help-back (fmt " See also: %v." (_help-see-to-str (cadr (assoc 'see info)))))) (_out-help-warn-maybe (cadr (assoc 'warn info))) (list 'text "\n")))))))(fl.gamma t ("NTVXKykVg" (intrinsic 'fl.gamma)))(_protect t ("NTVXKykVg" (intrinsic '_protect)))(str->sym t ("NTVXKykVg" (intrinsic 'str->sym)))(blob->str t ("NTVXKykVg" (intrinsic 'blob->str)))(nth t ("NTVXKykVg" (lambda (seq n) (cond ((array? seq) (array-ref seq n)) ((list? seq) (list-ref seq n)) ((str? seq) (str-ref seq n)) (t (error "ref - not a sequence: %v" seq))))))(4th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 3)) (t (nthdef seq 3 (car default)))))))(sys t ("NTVXKykVg" (intrinsic 'sys)))(strmap t ("NTVXKykVg" (intrinsic 'strmap)))(*log2e* t 1.4426950408889634)(fl.pow10 t ("NTVXKykVg" (intrinsic 'fl.pow10)))(> t ("NTVXKykVg" (lambda (x y) (< y x))))(db.blob t ("NTVXKykVg" (intrinsic 'db.blob)))(fl.atan2 t ("NTVXKykVg" (intrinsic 'fl.atan2)))(remove-hook-internal t ("NTVXKykVg" (intrinsic 'remove-hook-internal)))(pop-error-handler t ("NTVXKykVg" (lambda nil (popstacked *error-handler* (sys 'taskid) nil))))(run-zimage t ("NTVXKykVg" (lambda (&rest fi) (cond ((apply zimage-runable? fi) (_run-zimage fi)) (t (error "zimage not runable, no entry point: %v" fi))))))(feature? t ("NTVXKykVg" (lambda (sym) (if (member sym *reflect*) t nil))))(str-exists? t ("NTVXKykVg" (lambda (seq pred) (_seq-exists? seq pred 0 (strlen seq)))))(build-list t ("NTVXKykVg" (lambda (n proc) (_build-list n proc nil))))(dec.truncate t ("NTVXKykVg" (intrinsic 'dec.truncate)))(unprotect t ("NTVXKykVg" (lambda (&rest symbols) (cond ((permission? 'allow-unprotect) (list-foreach symbols (lambda (x) (_unprotect x)))) (t (error "unprotect: security violation - no permission to unprotect symbols!"))))))(functional-has-rest? t ("NTVXKykVg" (intrinsic 'functional-has-rest?)))(expect-ok t ("NTVXKykVg" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-eror-handler) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed)))) (list (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'pop-error-handler))) '*tests*)))))(write t ("NTVXKykVg" (intrinsic 'write)))(int t ("NTVXKykVg" (intrinsic 'int)))(unbind t ("NTVXKykVg" (intrinsic 'unbind)))(run-at t ("NTVXKykVg" (lambda (date repeater proc) ((lambda (nextns tid) (setq nextns (_run-at-date->ns date repeater)) (setq tid (task 'auto (lambda (id) ((lambda (loop) (setq loop (lambda (next) ((lambda (msg) (cond ((cond ((equal? msg 'end)) ((equal? msg 'cancel))) (void)) (t (cond ((<= next (now-ns)) (proc) (sleep (rand 0 890 1020)) (cond (repeater (loop (repeater id next))) (t (void)))) (t (sleep (rand 0 890 1020)) (loop next)))))) (task-recv id)))) (loop nextns)) nil)))) (task-run tid) tid) nil nil))))(internalize t ("NTVXKykVg" (lambda (arg nonce) (cond ((list? arg) (cond ((equal? (1st arg nil) nonce) (eval (internalize (2nd arg nil) nonce))) (t (mapcar arg (lambda (x) (internalize x nonce)))))) ((str? arg) arg) ((array? arg) (map arg (lambda (x) (internalize x nonce)))) ((dict? arg) (dict-map arg (lambda (k v) (internalize v nonce)))) (t arg)))))(help-topic-info t ("NTVXKykVg" (lambda (topic) (get *help-topics* topic))))(set t ("NTVXKykVg" (intrinsic 'set)))(make-set t ("NTVXKykVg" (lambda (&rest opt) (list->set opt))))(_testidx t ("NTVXKykVg" (lambda nil (get *testinfo* 'count 0))))(load-zimage t ("NTVXKykVg" (lambda (fi) ((lambda (in) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (close in) (cond (err (*error-printer* err)) (t (void)))))) (read-zimage in fi) (pop-error-handler) (close in))) (open fi)))))(task-state t ("NTVXKykVg" (lambda (id) (cond ((task? id) (get *tasks-state* id 'undefined)) (t (error "task-state: invalid task %v" id))))))(*day-ns* t 86400000000000)(exists? t ("NTVXKykVg" (lambda (seq pred) (cond ((list? seq) (list-exists? seq pred)) ((array? seq) (array-exists? seq pred)) ((str? seq) (str-exists? seq pred)) (t (error "exists? - not a sequence: %v" seq))))))(semver.max t ("NTVXKykVg" (intrinsic 'semver.max)))(db.str t ("NTVXKykVg" (intrinsic 'db.str)))(*pi* t 3.141592653589793)(strlimit t ("NTVXKykVg" (lambda (s n) (cond ((> (len s) n) (slice s 0 n)) (t s)))))(stack-empty? t ("NTVXKykVg" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (null? (array-ref q 2))))))(len t ("NTVXKykVg" (intrinsic 'len)))(error t ("NTVXKykVg" (intrinsic 'error)))(dict-map! t ("NTVXKykVg" (intrinsic 'dict-map!)))(<= t ("NTVXKykVg" (lambda (x y) (not (< y x)))))(ling.hamming t ("NTVXKykVg" (intrinsic 'ling.hamming)))(semver.is-valid? t ("NTVXKykVg" (intrinsic 'semver.is-valid?)))(dec.quorem t ("NTVXKykVg" (intrinsic 'dec.quorem)))(fl.nan t ("NTVXKykVg" (intrinsic 'fl.nan)))(dec.from-json t ("NTVXKykVg" (intrinsic 'dec.from-json)))(_help-use t ("NTVXKykVg" (lambda (info) (cadr (assoc 'use info)))))(_seq-exists? t ("NTVXKykVg" (lambda (seq pred n m) (cond ((< n m) (cond ((pred (nth seq n)) t) (t (_seq-exists? seq pred (add1 n) m)))) (t nil)))))(with-mutex-rlock t ("NTVXKykVg" (macro (mu &rest body) (list 'progn (list 'mutex-rlock mu) (cons 'with-final (cons (list 'lambda (list 'err 'result) (list 'mutex-runlock mu) (list 'if 'err (list '*error-handler* 'err) 'result)) body))))))(assoc t ("NTVXKykVg" (lambda (key alist) (cond (alist ((lambda (e) (cond ((cond ((cons? e) (equal? key (car e)))) e) (t (assoc key (cdr alist))))) (car alist)))))))(bitxor t ("NTVXKykVg" (intrinsic 'bitxor)))(append t ("NTVXKykVg" (macro (x &rest y) (cond ((null? y) x) (t (list '_append x (cons 'append y)))))))(read t ("NTVXKykVg" (intrinsic 'read)))(num? t ("NTVXKykVg" (intrinsic 'num?)))(get-partitions t ("NTVXKykVg" (lambda (x n) (lambda (&rest idx) (cond ((null? idx) (count-partitions x n)) (t (cond ((cond ((< (1st idx -1) 0)) ((>= (1st idx -1) (count-partitions x n)))) nil) (t (nth-partition x n (1st idx 0))))))))))(*reflect* t (tasks help beep db fileio decimal ling float console base))(set->list t ("NTVXKykVg" (lambda (s) (map (dict->alist s) (lambda (x) (car x))))))(str-foreach t ("NTVXKykVg" (lambda (s proc) ((lambda (i G79) ((lambda (G80) (setq G80 (lambda nil (cond ((< i G79) (proc (str-ref s i)) (setq i (+ i 1)) (G80)) (t (void))))) (G80)) nil)) 0 (len s)) (void))))(*ln2* t 0.6931471805599453)(_pop-current-lib t ("NTVXKykVg" (lambda nil (void (setq *_current-lib* (cdr *_current-lib*))))))(externalize* t ("NTVXKykVg" (lambda (arg nonce) (cond ((sym? arg) arg) ((list? arg) (mapcar arg (lambda (x) (externalize* x nonce)))) ((array? arg) (map arg (lambda (x) (externalize* x nonce)))) ((dict? arg) (list nonce (list 'dict (list 'quote (dict->list (dict-map arg (lambda (k v) (externalize* v nonce)))))))) ((blob? arg) (list nonce (list 'ascii85->blob (list 'quote (blob->ascii85 arg))))) ((num? arg) arg) ((str? arg) arg) ((eof? arg) (list nonce '(end-of-file))) (t (_externalize-nonce arg nonce))))))(dec.str-fixed t ("NTVXKykVg" (intrinsic 'dec.str-fixed)))(outy t ("NTVXKykVg" (lambda (li) ((lambda (styled G87) ((lambda (G88) (setq G88 (lambda nil (cond (G87 (setq styled (car G87)) (outy1 styled) (setq G87 (cdr G87)) (G88)) (t (void))))) (G88)) nil) (setq styled nil) (void)) nil li))))(fl.erfinv t ("NTVXKykVg" (intrinsic 'fl.erfinv)))(*finalizers* t ("NTVXKykVg" (dict 'nil)))(and t ("NTVXKykVg" (macro (x &rest y) (cond ((null? y) x) (t (list 'cond (list x (cons 'and y))))))))(build-array t ("NTVXKykVg" (intrinsic 'build-array)))(enq t ("NTVXKykVg" (intrinsic 'enq)))(darken t ("NTVXKykVg" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_darken-delta c (cond (amount (car amount)) (t 30)))) (list (max (- (1st c) delta) 0) (max (- (2nd c) delta) 0) (max (- (3rd c) delta) 0) (4th c))) nil nil))))(set-permissions t ("NTVXKykVg" (intrinsic 'set-permissions)))(include t ("NTVXKykVg" (lambda (&rest fi) ((lambda (io) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (cond (io (close io)) (t (void))) (cond (err (*error-printer* err)) (t (void)))))) (setq io (apply open fi)) (_include io (void)) (pop-error-handler) (cond (io (close io)) (t (void))))) nil))))(task-remove t ("NTVXKykVg" (lambda (id) (delete *tasks-to-msg* id) (delete *tasks* id) (delete *tasks-state* id))))(dec.mod t ("NTVXKykVg" (intrinsic 'dec.mod)))(db.float t ("NTVXKykVg" (intrinsic 'db.float)))(ling.match-rating-compare t ("NTVXKykVg" (intrinsic 'ling.match-rating-compare)))(db.result-columns t ("NTVXKykVg" (intrinsic 'db.result-columns)))(str-segment t ("NTVXKykVg" (lambda (s start end) (filter (_str-segment s (chars start) (chars end) nil) (lambda (x) (not (equal? (2nd x) "")))))))(readable? t ("NTVXKykVg" (intrinsic 'readable?)))(memq t ("NTVXKykVg" (lambda (key x) (cond ((null? x) nil) ((eq? key (car x)) x) (t (memq key (cdr x)))))))(task? t ("NTVXKykVg" (lambda (id) (cond (*tasks* (cond ((get *tasks* id nil) t) (t nil)))))))(popstacked t ("NTVXKykVg" (lambda (dic key default) ((lambda (li) (cond ((equal? li default) default) ((null? li) (delete dic key) default) (t (cond ((null? (cdr li)) (delete dic key)) (t (set dic key (cdr li)))) (car li)))) (get dic key default)))))(blob->base64 t ("NTVXKykVg" (intrinsic 'blob->base64)))(set* t ("NTVXKykVg" (intrinsic 'set*)))(array->list t ("NTVXKykVg" (intrinsic 'array->list)))(fl.y1 t ("NTVXKykVg" (intrinsic 'fl.y1)))(fl.acos t ("NTVXKykVg" (intrinsic 'fl.acos)))(set-subset? t ("NTVXKykVg" (lambda (a b) (dict-key-subset? a b))))(_read-zimage t ("NTVXKykVg" (lambda (in header file c nonce) ((lambda (li) (cond ((eof? li) (zimage-header-info header file c)) ((not (list? li)) (error "zimage corrupted: %v" li)) (t (cond ((get *volatile-toplevel-symbols* (car li) nil) (warn "read-zimage: cannot set volatile toplevel symbol '%v" (car li))) (t (_read-zimage-bind li nonce))) (_read-zimage in header file (add1 c) nonce)))) (read in)))))(_out-help-segment t ("NTVXKykVg" (lambda (s start end) (_out-help-fix-end (mapcar (str-segment s start end) (lambda (x) (cond ((1st x nil) (list t (slice (2nd x) 1 (len (2nd x))))) (t x))))))))(fdelete t ("NTVXKykVg" (intrinsic 'fdelete)))(_readall t ("NTVXKykVg" (lambda (n acc) ((lambda (datum) (cond ((eof? datum) acc) (t (_readall n (cons datum acc))))) (read n)))))(*sync-wait-upper-bound* t 2000)(current-zimage t ("NTVXKykVg" (lambda (&rest r) ((lambda (d nonce) (foreach (dump-bindings) (lambda (sym) (cond ((not (get *volatile-toplevel-symbols* sym nil)) (cond ((can-externalize? sym) (set d sym (externalize (eval sym) nonce))) (t (set d sym nil) (warn "cannot externalize '%v, set to nil" sym)))) (t (void))))) d) (dict 'nil) (1st r nil)))))(*colors* t ("NTVXKykVg" (dict '(powder-blue (176 224 230) z3s5-sysmsg-text (255 255 255 180) dark-salmon (233 150 122) z3-link-fg (0 0 120 255) antique-white (250 235 215) dark-orange (255 140 0) navajo-white (255 222 173) black (0 0 0) z3-title-fg-5 (0 0 0 255) violet (238 130 238) tan (210 180 140) white (255 255 255) ghost-white (248 248 255) z3-title-fg-3 (0 0 0 255) dark-slate-blue (72 61 139) z3-title-bg-3 back moccasin (255 228 181) teal (0 128 128) dodger-blue (30 144 255) thistle (216 191 216) salmon (250 128 114) gray (128 128 128) aqua (0 255 255) tomato (255 99 71) z3s5-error-back back indigo (75 0 130) snow (255 250 250) z3s5-log-error-back back royal-blue (65 105 225) wheat (245 222 179) z3-title-bg-4 back z3s5-error-text (120 0 0 255) spring-green (0 255 127) z3-title-fg-2 (0 0 0 255) forrest-green (34 139 34) z3s5-help-warn-back back azure (240 255 255) z3-title-bg-2 back lemon-chiffon (255 250 205) yellow (255 255 0) medium-spring-green (0 250 154) z3-text-bg back burlywood (222 184 135) deep-sky-blue (0 191 255) saddle-brown (139 69 19) red (255 0 0) medium-orchid (186 85 211) dark-goldenrod (184 134 11) cornsilk (255 248 220) cadet-blue (95 158 160) navy (0 0 128) white-smoke (245 245 245) midnight-blue (25 25 112) pale-goldenrod (238 232 170) light-cyan (224 255 255) lime-green (50 205 50) dark-gray (169 169 169) light-coral (240 128 128) light-salmon (255 160 122) sky-blue (135 206 235) medium-slate-blue (123 104 238) z3-text-fg (220 220 220 255) aquamarine (127 255 212) fuchsia (255 0 255) z3-title-bg-0 (0 0 0 255) brown (165 42 42) firebrick (178 34 34) maroon (128 0 0) yellow-green (154 205 50) crimson (220 20 60) z3-title-fg-4 (0 0 0 255) hot-pink (255 105 180) z3s5-blue (0 0 60 255) light-goldenrod-yellow (250 250 210) light-green (144 238 144) dark-violet (148 0 211) light-pink (255 182 193) orange (255 165 0) light-sea-green (32 178 170) dim-gray (105 105 105) pale-turquoise (175 238 238) blanched-almond (255 235 205) light-blue (173 216 230) z3s5-help-back back blue-violet (138 43 226) z3s5-orange (200 100 0 180) sienna (160 82 45) chartreuse (127 255 0) khaki (240 230 140) z3-title-bg-5 back z3s5-warn-text (160 94 35 255) linen (250 240 230) dark-cyan (0 139 139) z3s5-help-warn-text (120 0 0 255) dark-orchid (153 50 204) light-gray (211 211 211) z3s5-help-entry-arg (0 0 120 255) z3s5-log-warn-text (160 94 35 255) medium-blue (0 0 205) z3s5-log-warn-back back sandy-brown (244 164 96) rosy-wood (188 143 143) dark-olive-green (85 107 47) mint-cream (245 255 250) dark-green (0 100 0) lavender-blush (255 240 245) orchid (218 112 214) medium-violet-red (199 21 133) pale-green (152 251 152) plum (221 160 221) dark-magenta (139 0 139) medium-aquamarine (102 205 170) ivory (255 255 240) dark-sea-green (143 188 143) z3-linknum-bg (0 0 120 255) z3s5-help-entry-text (255 255 255 255) magenta (255 0 255) z3s5-help-entry-back (0 80 0 255) blue (0 0 255) silver (192 192 192) old-lace (253 245 230) green (0 128 0) honeydew (240 255 240) lime (0 255 0) z3s5-help-text text dark-khaki (189 183 107) medium-turquoise (72 209 204) cornflower-blue (100 149 237) deep-pink (255 20 147) pink (255 192 203) floral-white (255 250 240) light-yellow (255 255 224) lavender (230 230 250) dark-slate-gray (47 79 79) medium-sea-green (60 179 113) cyan (0 255 255) pale-violet-red (219 112 147) peru (205 133 63) medium-purple (147 112 219) light-slate-gray (119 136 153) z3s5-log-error-text (120 0 0 255) lawn-green (124 252 0) papaya-whip (255 239 213) goldenrod (218 165 32) steel-blue (70 130 180) z3-title-bg-1 back chocolate (210 105 30) z3-title-fg-1 (0 0 0 255) gainsboro (220 220 220) turquoise (64 224 208) bisque (255 228 196) green-yellow (173 255 47) light-steel-blue (176 196 222) purple (128 0 128) z3-linknum-fg (100 100 250 255) orange-red (255 69 0) alice-blue (240 248 255) z3s5-sysmsg-back back z3-title-fg-6 (0 0 0 255) slate-gray (112 128 144) coral (255 127 80) z3-link-bg back dark-blue (0 0 139) sea-green (46 139 87) gold (255 215 0) beige (245 245 220) seashell (255 245 238) peach-puff (255 218 185) slate-blue (106 90 205) dark-turquoise (0 206 209) dark-red (139 0 0) indian-red (205 92 92) z3-title-bg-6 back olive-drab (107 142 35) light-sky-blue (135 206 250) olive (128 128 0) misty-rose (255 228 225) z3s5-warn-back back z3-title-fg-0 (255 255 255 255)))))(poke t ("NTVXKykVg" (intrinsic 'poke)))(can-externalize? t ("NTVXKykVg" (lambda (datum) (cond ((seq? datum) (forall? datum can-externalize?)) ((dict? datum) (forall? (dict->alist datum) (lambda (x) (cond ((can-externalize? (car x)) (can-externalize? (cdr x))))))) ((blob? datum) t) ((cond ((num? datum)) ((cond ((eof? datum)) ((functional? datum))))) t) (t (_external? datum))))))(memstats t ("NTVXKykVg" (intrinsic 'memstats)))(_lighten-delta t ("NTVXKykVg" (lambda (c proposed) ((lambda (li m) (setq li (reverse (cdr (reverse c)))) (setq m (apply max li)) (min proposed (- 255 m))) nil nil))))(eq? t ("NTVXKykVg" (intrinsic 'eq?)))(read-binary t ("NTVXKykVg" (intrinsic 'read-binary)))(last t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq (sub1 (len seq)))) (t (nthdef seq (sub1 (len seq)) (car default)))))))(stropen t ("NTVXKykVg" (intrinsic 'stropen)))(strcnt t ("NTVXKykVg" (intrinsic 'strcnt)))(dec.from-num t ("NTVXKykVg" (intrinsic 'dec.from-num)))(_include t ("NTVXKykVg" (lambda (in last) ((lambda (datum) (cond ((eof? datum) last) (t (eval datum) (_include in datum)))) (read in)))))(_str-segment t ("NTVXKykVg" (lambda (s sc ec acc) ((lambda (start) (cond ((not start) (_append acc (list (list nil s)))) (t ((lambda (end) (cond ((cond ((not end)) ((<= end start))) (_append acc (list (list nil (slice s 0 start)) (list t (slice s start (len s)))))) (t (_str-segment (slice s (add1 end) (len s)) sc ec (_append acc (list (list nil (slice s 0 start)) (list t (slice s start (add1 end))))))))) (str-index s ec (add1 start)))))) (str-index s sc)))))(*testinfo* t ("NTVXKykVg" (dict 'nil)))(find-unneeded-help-entries t ("NTVXKykVg" (lambda nil ((lambda (d r) (dict-foreach *help* (lambda (k v) (cond ((not (memq k d)) (setq r (cons k r))) (t (void))))) r) (dump) nil))))(_help-type-to-str t ("NTVXKykVg" (lambda (sym) ((lambda (G7) (cond ((member G7 '(proc func function)) "procedure") ((member G7 '(special)) "special form") ((member G7 '(macro)) "macro") ((member G7 '(dict)) "dict") ((member G7 '(string str)) "string") ((member G7 '(array arr)) "array") ((member G7 '(list)) "list") ((member G7 '(a-list)) "association list") ((member G7 '(color)) "color list (r g b a)") ((member G7 '(color-spec)) "color name or color list (r g b) or (r g b a)") (t (fmt "%v" sym)))) sym))))(externalize0 t ("NTVXKykVg" (lambda (arg) (cond ((sym? arg) arg) ((list? arg) (mapcar arg (lambda (x) (externalize0 x)))) ((array? arg) (map arg (lambda (x) (externalize0 x)))) ((dict? arg) (list 'dict (list 'quote (externalize0 (dict->list arg))))) ((num? arg) arg) ((str? arg) arg) ((port? arg) arg) (t (_external-str arg))))))(mutex-lock t ("NTVXKykVg" (intrinsic 'mutex-lock)))(dir t ("NTVXKykVg" (intrinsic 'dir)))(init-tasking t ("NTVXKykVg" (lambda nil (start-task-scheduler))))(strbuild t ("NTVXKykVg" (intrinsic 'strbuild)))(dec.sign t ("NTVXKykVg" (intrinsic 'dec.sign)))(dec.new t ("NTVXKykVg" (intrinsic 'dec.new)))(mod t ("NTVXKykVg" (intrinsic 'mod)))(*z3s5-version* t "2.3.3+36c0f36")(3rd t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 2)) (t (nthdef seq 2 (car default)))))))(*sqrt2* t 1.4142135623730951)(delete t ("NTVXKykVg" (intrinsic 'delete)))(dec.equal t ("NTVXKykVg" (intrinsic 'dec.equal)))(help-entry t ("NTVXKykVg" (lambda (sym) (get *help* sym nil))))(list-exists? t ("NTVXKykVg" (lambda (li pred) (cond ((null? li) nil) ((pred (car li)) t) (t (list-exists? (cdr li) pred))))))(eval t ("NTVXKykVg" (intrinsic 'eval)))(*halfhour-ns* t 1800000000000)(set-equal? t ("NTVXKykVg" (lambda (a b) (dict-key-equal? a b))))(dec.pow t ("NTVXKykVg" (intrinsic 'dec.pow)))(outy1 t ("NTVXKykVg" (lambda (te) (cond ((list? te) (_outy1 te)) (t (out te))))))(fl.log1p t ("NTVXKykVg" (intrinsic 'fl.log1p)))(defhelp t ("NTVXKykVg" (macro (sym &rest entries) (list '_set-help-entries (list 'quote sym) (list 'quote entries)))))(alist->dict t ("NTVXKykVg" (lambda (li) ((lambda (d) (foreach li (lambda (p) (set d (car p) (cdr p)))) d) (dict)))))(_unprotect t ("NTVXKykVg" (intrinsic '_unprotect)))(rnd t ("NTVXKykVg" (intrinsic 'rnd)))(port? t ("NTVXKykVg" (intrinsic 'port?)))(wait-for t ("NTVXKykVg" (lambda (dict key) (wait-for* dict key -1))))(inchars t ("NTVXKykVg" (lambda (c chs) (set-element? chs c))))(_schedule-task-future t ("NTVXKykVg" (lambda nil (task 'auto (lambda (id) ((lambda (G81) (setq G81 (lambda nil (cond ((not (eq? (task-recv id) 'end)) (cond ((queue-empty? *scheduled-tasks*) (sleep *scheduler-sleep-interval*)) (t (cond ((< *running-tasks* (cpunum)) (task-run (progn (mutex-lock (array-ref *scheduled-tasks* 1)) (cond ((null? (array-ref *scheduled-tasks* 2)) (mutex-unlock (array-ref *scheduled-tasks* 1)) (cond ('nil (car 'nil)) (t nil))) (t ((lambda (result) (array-set *scheduled-tasks* 2 (cdr (array-ref *scheduled-tasks* 2))) (mutex-unlock (array-ref *scheduled-tasks* 1)) result) (car (array-ref *scheduled-tasks* 2)))))) t)) (t (void))))) (G81)) (t (void))))) (G81)) nil))))))(epoch-ns->datelist t ("NTVXKykVg" (intrinsic 'epoch-ns->datelist)))(str-port? t ("NTVXKykVg" (intrinsic 'str-port?)))(array-len t ("NTVXKykVg" (intrinsic 'array-len)))(datestr* t ("NTVXKykVg" (lambda (d) (cond ((null? (cdr d)) (fmt "%v-%v-%v" (caar d) (cadar d) (caddr (car d)))) (t (fmt "%v-%v-%v %v:%02v:%02v.%v" (caar d) (cadar d) (caddr (car d)) (1st (2nd d) 0) (2nd (2nd d) 0) (3rd (2nd d) 0) (4th (2nd d) 0)))))))(dir? t ("NTVXKykVg" (intrinsic 'dir?)))(def-custom-hook t ("NTVXKykVg" (lambda (h) (cinc! '*custom-hook-counter*) (set *custom-hooks* h (+ 65635 *custom-hook-counter*)))))(bitor t ("NTVXKykVg" (intrinsic 'bitor)))(set-intersection t ("NTVXKykVg" (lambda (a b) ((lambda (c) (dict-foreach a (lambda (k v) (cond ((has-key? b k) (set c k t)) (t (void))))) c) (dict)))))(set-complement t ("NTVXKykVg" (lambda (a b) ((lambda (c) (dict-foreach b (lambda (k v) (cond ((not (has-key? a k)) (set c k t)) (t (void))))) c) (dict)))))(fl.log2 t ("NTVXKykVg" (intrinsic 'fl.log2)))(fl.inf t ("NTVXKykVg" (intrinsic 'fl.inf)))(dec.str t ("NTVXKykVg" (intrinsic 'dec.str)))(sort-symbols t ("NTVXKykVg" (lambda (li) (sort li (lambda (x y) (strless (sym->str x) (sym->str y)))))))(db.close-result t ("NTVXKykVg" (intrinsic 'db.close-result)))(cd t ("NTVXKykVg" (intrinsic 'cd)))(fl.remainder t ("NTVXKykVg" (intrinsic 'fl.remainder)))(dec.num? t ("NTVXKykVg" (intrinsic 'dec.num?)))(str-replace t ("NTVXKykVg" (intrinsic 'str-replace)))(assq t ("NTVXKykVg" (lambda (key alist) (cond (alist ((lambda (e) (cond ((cond ((cons? e) (eq? key (car e)))) e) (t (assq key (cdr alist))))) (car alist)))))))(db.exec t ("NTVXKykVg" (intrinsic 'db.exec)))(_externalize-nonce t ("NTVXKykVg" (lambda (arg nonce) ((lambda (s) ((lambda (G89) (push-finalizer (lambda (err x) (cond (err (*error-handler* err)) (t (void))) ((lambda (result) (close s) (cond (nonce (list nonce result)) (t result))) (car (readall s))))) (push-error-handler (lambda (err) (void (pop-error-handler)) ((pop-finalizer) err G89) ((lambda (handler) (cond (handler (handler err)) (t (void)))) (pop-error-handler)))) (setq G89 (progn)) (pop-error-handler) ((pop-finalizer) nil G89)) nil)) (stropen (_external arg))))))(nonce t ("NTVXKykVg" (intrinsic 'nonce)))(car t ("NTVXKykVg" (intrinsic 'car)))(8th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 7)) (t (nthdef seq 7 (car default)))))))(fl.sinh t ("NTVXKykVg" (intrinsic 'fl.sinh)))(write-string t ("NTVXKykVg" (intrinsic 'write-string)))(write-binary-at t ("NTVXKykVg" (intrinsic 'write-binary-at)))(fl.next-after t ("NTVXKykVg" (intrinsic 'fl.next-after)))(float t ("NTVXKykVg" (intrinsic 'float)))(dec.str-fixed-cash t ("NTVXKykVg" (intrinsic 'dec.str-fixed-cash)))(dec.max t ("NTVXKykVg" (intrinsic 'dec.max)))(*smallest-nonzero-float32* t 1.401298464324817e-45)(dec.to-blob t ("NTVXKykVg" (intrinsic 'dec.to-blob)))(add-hook t ("NTVXKykVg" (lambda (h proc) ((lambda (id) (cond ((num? id) (add-hook-internal id proc)) (t nil))) (hook h)))))(true t ("NTVXKykVg" t))(_get t ("NTVXKykVg" (intrinsic '_get)))(apropos t ("NTVXKykVg" (lambda (arg) ((lambda (info) (cond (info (cadr (assoc 'see info))) (t nil))) (get *help* arg nil)))))(dump-bindings t ("NTVXKykVg" (intrinsic 'dump-bindings)))(sysmsg t ("NTVXKykVg" (lambda (msg) (cond ((member (sys 'editmode) '(page console)) (enq (lambda nil (synouty (list (list 'fg (the-color 'z3s5-sysmsg-text) (list 'bg (the-color 'z3s5-sysmsg-back) (fmt "%v\n" msg)))))))) (t (log msg))))))(dict-empty? t ("NTVXKykVg" (intrinsic 'dict-empty?)))(file-port? t ("NTVXKykVg" (intrinsic 'file-port?)))(make-mutex t ("NTVXKykVg" (intrinsic 'make-mutex)))(unprotect-toplevel-symbols t ("NTVXKykVg" (lambda nil (apply unprotect (dump-bindings)))))(*tests* nil (("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G76) (cond ((equal? G76 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G76) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (str-forall? "abcdefg" num?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G75) (cond ((equal? G75 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G75) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (array-forall? #(0.2 1.2 3.3 -3.0 1.0) (lambda (x) (>= x 0)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G74) (cond ((equal? G74 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G74) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (array-forall? #(1.2 3.3 4.4 5.3 1.0) (lambda (x) (>= x 1)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G73) (cond ((equal? G73 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G73) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (list-forall? '(1 2 3 4 hello 5 6 7 8) num?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G72) (cond ((equal? G72 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G72) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (list-forall? '(1 2 3 4 5 6 7 8) num?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G71) (cond ((equal? G71 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G71) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? #(0.2 1.2 3.3 -3.0 1.0) (lambda (x) (>= x 0)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G70) (cond ((equal? G70 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G70) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? #(1.2 3.3 4.4 5.3 1.0) (lambda (x) (>= x 1)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G69) (cond ((equal? G69 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G69) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? "abcdefg" num?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G68) (cond ((equal? G68 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G68) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? '(1 2 3 4 hello 5 6 7 8) num?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G67) (cond ((equal? G67 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G67) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? '(1 2 3 4 5 6 7 8) num?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G66) (cond ((equal? G66 700) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 700 G66) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach "abcdefg" (lambda (x) (setq s (+ s x)))) s) 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G65) (cond ((equal? G65 0) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 0 G65) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach nil (lambda (x) (setq s (+ s x)))) s) 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G64) (cond ((equal? G64 21) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 21 G64) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach #(1 2 3 4 5 6) (lambda (x) (setq s (+ s x)))) s) 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G63) (cond ((equal? G63 21) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 21 G63) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach '(1 2 3 4 5 6) (lambda (x) (setq s (+ s x)))) s) 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G62) (cond ((equal? G62 "abcdefgh") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "abcdefgh" G62) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise "abcdefgh" (lambda (x y) (list x y)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G61) (cond ((equal? G61 #(1 2 3 4 5 6 7 8)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(1 2 3 4 5 6 7 8) G61) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise #(1 2 3 4 5 6 7 8) (lambda (x y) (list x y)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G60) (cond ((equal? G60 '(1 2 3 4 5 6 7 8)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6 7 8) G60) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise '(1 2 3 4 5 6 7 8) (lambda (x y) (list x y)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G59) (cond ((equal? G59 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G59) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise 'nil (lambda (x y) (list x y)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (map-pairwise '(1 2 3) (lambda (x y) (list y x))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G58) (cond ((equal? G58 #(john smith peter wilkes maria calvesh)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(john smith peter wilkes maria calvesh) G58) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise #(smith john wilkes peter calvesh maria) (lambda (x y) (list y x)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G57) (cond ((equal? G57 "abcdefgh") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "abcdefgh" G57) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise "badcfehg" (lambda (x y) (list y x)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G56) (cond ((equal? G56 '(-1 3 -1 7 -1 11 -1 15)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(-1 3 -1 7 -1 11 -1 15) G56) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise '(1 2 3 4 5 6 7 8) (lambda (x y) (list (- x y) (+ x y))))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G55) (cond ((equal? G55 '(1 2 3 4 5 6 7 8)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6 7 8) G55) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise '(2 1 4 3 6 5 8 7) (lambda (x y) (list y x)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (map (dict) add1) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G54) (cond ((equal? G54 #(2 3 4 5 6 7)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(2 3 4 5 6 7) G54) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map #(1 2 3 4 5 6) add1)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G53) (cond ((equal? G53 "bcdefg") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "bcdefg" G53) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map "abcdef" (lambda (x) (+ x 1)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G52) (cond ((equal? G52 '(2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(2 3 4 5 6) G52) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map '(1 2 3 4 5) add1)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G49) (cond ((equal? G49 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G49) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (take '(1 2 3 4 5 6) 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G48) (cond ((equal? G48 '(1 2 3)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3) G48) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (take '(1 2 3 4 5 6) 3)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (slice nil 0 1) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (slice '(1 2 3) 4 5) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G47) (cond ((equal? G47 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G47) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice '(1 2 3 4 5 6) 2 2)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G46) (cond ((equal? G46 "bcd") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "bcd" G46) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice "abcdefgbcd" 1 4)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G45) (cond ((equal? G45 '(1 2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6) G45) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice '(1 2 3 4 5 6) 0 (len '(1 2 3 4 5 6)))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G44) (cond ((equal? G44 '(2 3 4)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(2 3 4) G44) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice '(1 2 3 4 5 6) 1 4)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G43) (cond ((equal? G43 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G43) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? 'atom)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G42) (cond ((equal? G42 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G42) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? (dict))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G41) (cond ((equal? G41 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G41) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? 1)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G40) (cond ((equal? G40 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G40) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? "abc")))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G39) (cond ((equal? G39 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G39) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? #(a b c))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G38) (cond ((equal? G38 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G38) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? '(a b c))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G37) (cond ((equal? G37 4) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 4 G37) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (index '(a b c d e f g h i j k) 'e equal?)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G36) (cond ((equal? G36 3) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 3 G36) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (index '(2 3 4 1 9 9 7 8) 1)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G35) (cond ((equal? G35 4) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 4 G35) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef (dict) 3 4)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G34) (cond ((equal? G34 9) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 9 G34) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef nil 3 9)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G33) (cond ((equal? G33 9) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 9 G33) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef '(1 2 3 4 5) 6 9)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G32) (cond ((equal? G32 1) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 1 G32) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef '(9 8 7 6 1 5 4 3 2) 4 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (reverse (dict '(1 a 2 b 3 c 4 d 5 e 6 f))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G31) (cond ((equal? G31 "123456") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "123456" G31) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (reverse "654321")))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G30) (cond ((equal? G30 #(1 2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(1 2 3 4 5 6) G30) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (reverse #(6 5 4 3 2 1))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G29) (cond ((equal? G29 '(1 2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6) G29) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (reverse '(6 5 4 3 2 1))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (nth "abc" 4) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G28) (cond ((equal? G28 4) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 4 G28) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nth '(9 1 2 3 4) 4)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G27) (cond ((equal? G27 9) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 9 G27) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nth '(9 1 2 3 4) 0)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G26) (cond ((equal? G26 1) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 1 G26) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nth #(2 1 3 0) 1)))) ("NTVXKykVg" (lambda nil (_testout "sequences") (_testout " ") (set *testinfo* 'test "sequences"))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G25) (cond (G25 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G25) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (functional? car))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G24) (cond (G24 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G24) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (functional? expect))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G23) (cond (G23 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G23) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (functional? (lambda (x) (out x))))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G22) (cond (G22 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G22) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? void))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G21) (cond ((not G21) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G21) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? (future (void))))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G20) (cond ((not G20) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G20) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? 1))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G19) (cond ((not G19) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G19) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? expect))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G18) (cond (G18 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G18) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? (lambda (x) (out x))))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G17) (cond ((not G17) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G17) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn nil)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G16) (cond (G16 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G16) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn t)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G14) (cond ((not G14) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G14) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn ((lambda (G15) (cond ((member G15 '(foo bar)) t) (t nil))) 'test))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G12) (cond (G12 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G12) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn ((lambda (G13) (cond ((member G13 '(test)) t))) 'test))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G10) (cond (G10 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G10) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn ((lambda (G11) (cond ((member G11 '(foo test)) t) ((member G11 '(bar testing)) nil))) 'test))))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-eror-handler) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (list? (list-foreach (dump) (lambda (x) (apropos x)))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) (_testout (fmt "%v " (_testidx))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (_testout "help") (_testout " ") (set *testinfo* 'test "help"))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (error "intentional error for testing") (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-eror-handler) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (void) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) (_testout (fmt "%v " (_testidx))) (pop-error-handler))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G6) (cond ((not G6) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G6) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn nil)))) ("NTVXKykVg" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G5) (cond (G5 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G5) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn t)))) ("NTVXKykVg" (lambda nil (_testout "testing") (_testout " ") (set *testinfo* 'test "testing")))))(ling.jaro t ("NTVXKykVg" (intrinsic 'ling.jaro)))(semver.compare t ("NTVXKykVg" (intrinsic 'semver.compare)))(_outy1 t ("NTVXKykVg" (lambda (te) (cond ((car te) ((lambda (G84) (cond ((member G84 '(fg)) ((lambda (fg) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (set-color 'text fg) (cond (err (*error-printer* err)) (t (void)))))) (set-color 'text (the-color (cadr te))) (outy1 (caddr te)) (pop-error-handler) (set-color 'text fg))) (color 'text))) ((member G84 '(bg)) ((lambda (bg) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (set-color 'back bg) (cond (err (*error-printer* err)) (t (void)))))) (set-color 'back (the-color (cadr te))) (outy1 (caddr te)) (pop-error-handler) (set-color 'back bg))) (color 'back))) ((member G84 '(text)) ((lambda (unstyled G85) ((lambda (G86) (setq G86 (lambda nil (cond (G85 (setq unstyled (car G85)) (out unstyled) (setq G85 (cdr G85)) (G86)) (t (void))))) (G86)) nil) (setq unstyled nil) (void)) nil (cdr te))) (t (error "unknown styled text tag: %v" (car te))))) (car te)) (void)) (t (void))))))(*hooks-added-once* t ("NTVXKykVg" (dict 'nil)))(array-append t ("NTVXKykVg" (intrinsic 'array-append)))(force t ("NTVXKykVg" (intrinsic 'force)))(_transform-help-entries t ("NTVXKykVg" (lambda (strnew strold entries) (mapcar entries (lambda (entry) (cons (car entry) (mapcar (cdr entry) (lambda (x) (_maybe-translate-help x strnew strold)))))))))(dequeue! t ("NTVXKykVg" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result)))))))(make-stack t ("NTVXKykVg" (lambda nil (array 'stack (make-mutex) nil))))(list->array t ("NTVXKykVg" (lambda (li) (apply array li))))(reverse t ("NTVXKykVg" (lambda (seq) (cond ((array? seq) (array-reverse seq)) ((list? seq) (list-reverse seq)) ((str? seq) (str-reverse seq)) (t (error "reverse - not a sequence: %v" seq))))))(or t ("NTVXKykVg" (macro (x &rest y) (cond ((null? y) x) (t (list 'cond (list x) (list (cons 'or y))))))))(minute+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *minute-ns* delta))))))(queue? t ("NTVXKykVg" (lambda (sym) (cond ((not (array? sym)) nil) ((< (len sym) 2) nil) ((not (mutex? (array-ref sym 1))) nil) (t (equal? (array-ref sym 0) 'queue))))))(fl.min t ("NTVXKykVg" (intrinsic 'fl.min)))(dec.floor t ("NTVXKykVg" (intrinsic 'dec.floor)))(princ t ("NTVXKykVg" (intrinsic 'princ)))(fl.sin t ("NTVXKykVg" (intrinsic 'fl.sin)))(list-foreach t ("NTVXKykVg" (lambda (li proc) (cond (li (proc (car li)) (list-foreach (cdr li) proc)) (t (void))))))(wait-until* t ("NTVXKykVg" (lambda (dict key pred timeout) (_wait-until* dict key pred timeout (now-ns)))))(_push-current-lib t ("NTVXKykVg" (lambda (lib) (setq *_current-lib* (cons lib *_current-lib*)))))(fl.erfcinv t ("NTVXKykVg" (intrinsic 'fl.erfcinv)))(make-queue t ("NTVXKykVg" (lambda nil (array 'queue (make-mutex) nil))))(dec.mul t ("NTVXKykVg" (intrinsic 'dec.mul)))(*max-float64* t 1.7976931348623157e+308)(semver.canonical t ("NTVXKykVg" (intrinsic 'semver.canonical)))(sec+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *second-ns* delta))))))(ascii85->blob t ("NTVXKykVg" (intrinsic 'ascii85->blob)))(_run-zimage t ("NTVXKykVg" (lambda (fi) ((eval (2nd (assoc 'entry (apply load-zimage fi)) (lambda nil (void))))))))(log t ("NTVXKykVg" (intrinsic 'log)))(wait-until t ("NTVXKykVg" (lambda (dict key pred) (wait-until* dict key pred -1))))(out t ("NTVXKykVg" (lambda (s) (void (princ s)))))(on-feature t ("NTVXKykVg" (macro (test &rest body) (cons 'when (cons (list 'feature? test) body)))))(fl.round-to-even t ("NTVXKykVg" (intrinsic 'fl.round-to-even)))(9th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 8)) (t (nthdef seq 8 (car default)))))))(_out-help-fmt-info t ("NTVXKykVg" (lambda (s) (mapcar (_out-help-segment s "#" " .,:()[]{}") (lambda (x) (cond ((1st x nil) (list 'fg 'z3s5-help-entry-arg (list 'bg 'z3s5-help-back (2nd x)))) (t (list 'fg 'z3s5-help-text (list 'bg 'z3s5-help-back (2nd x))))))))))(*minute-ns* t 60000000000)(cons? t ("NTVXKykVg" (lambda (x) (not (atom? x)))))(glance t ("NTVXKykVg" (lambda (q &rest default) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (1st (array-ref q 2) (cond (default (car default)) (t nil)))))))(spaces t ("NTVXKykVg" (lambda (n) (strbuild " " n))))(find-missing-help-entries t ("NTVXKykVg" (lambda nil (filter (dump) (lambda (sym) (get *help* sym nil))))))(take t ("NTVXKykVg" (lambda (seq n) (slice seq 0 n))))(fl.mod t ("NTVXKykVg" (intrinsic 'fl.mod)))(dict-copy t ("NTVXKykVg" (intrinsic 'dict-copy)))(datestr t ("NTVXKykVg" (lambda (d) (cond ((null? (cdr d)) (fmt "%v-%v-%v" (caar d) (cadar d) (caddr (car d)))) (t (fmt "%v-%v-%v %v:%02v" (caar d) (cadar d) (caddr (car d)) (caadr d) (cadr (cadr d))))))))(run-hook t ("NTVXKykVg" (lambda (h &rest args) ((lambda (id) (cond ((num? id) (apply run-hook-internal (cons id args))) (t nil))) (hook h)))))(time t ("NTVXKykVg" (intrinsic 'time)))(sysmsg* t ("NTVXKykVg" (lambda (msg) (cond ((member (sys 'editmode) '(page console)) (synouty (list (list 'fg (the-color 'z3s5-sysmsg-text) (list 'bg (the-color 'z3s5-sysmsg-back) (fmt "%v\n" msg)))))) (t (log msg))))))(sym? t ("NTVXKykVg" (intrinsic 'sym?)))(month+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns (list (list (1st (1st ti)) (+ (2nd (1st ti) 1) delta) (3rd (1st ti) 1)) (list (1st (2nd ti nil) 12) (2nd (2nd ti nil) 0) (3rd (2nd ti nil) 0) (4th (2nd ti nil) 0)))))))))(bitshl t ("NTVXKykVg" (intrinsic 'bitshl)))(list t ("NTVXKykVg" (intrinsic 'list)))(fl.modf t ("NTVXKykVg" (intrinsic 'fl.modf)))(nth-partition t ("NTVXKykVg" (lambda (m k idx) (cond ((= idx (div m k)) (list (* idx k) (sub1 m) (% m k))) (t (list (* k idx) (+ (* k idx) (sub1 k)) k))))))(array-map! t ("NTVXKykVg" (intrinsic 'array-map!)))(dec.round-bank t ("NTVXKykVg" (intrinsic 'dec.round-bank)))(replace-hook t ("NTVXKykVg" (lambda (h proc) (remove-hooks h) (add-hook h proc))))(dec.float t ("NTVXKykVg" (intrinsic 'dec.float)))(fl.logb t ("NTVXKykVg" (intrinsic 'fl.logb)))(fl.signbit t ("NTVXKykVg" (intrinsic 'fl.signbit)))(cdec! t ("NTVXKykVg" (intrinsic 'cdec!)))(fl.abs t ("NTVXKykVg" (intrinsic 'fl.abs)))(dec.cos t ("NTVXKykVg" (intrinsic 'dec.cos)))(caddr t ("NTVXKykVg" (lambda (x) (car (cdr (cdr x))))))(when-permission t ("NTVXKykVg" (macro (perm &rest body) (list 'cond (cons (list 'permission? perm) body)))))(= t ("NTVXKykVg" (intrinsic 'eql?)))(*sqrtpi* t 1.772453850905516)(dec.ceil t ("NTVXKykVg" (intrinsic 'dec.ceil)))(end-of-file t ("NTVXKykVg" (intrinsic 'end-of-file)))(color t ("NTVXKykVg" (intrinsic 'color)))(db-result? t ("NTVXKykVg" (intrinsic 'db-result?)))(dec.min t ("NTVXKykVg" (intrinsic 'dec.min)))(write-binary t ("NTVXKykVg" (intrinsic 'write-binary)))(file-exists? t ("NTVXKykVg" (intrinsic 'file-exists?)))(fl.cbrt t ("NTVXKykVg" (intrinsic 'fl.cbrt)))(protected? t ("NTVXKykVg" (intrinsic 'protected?)))(fl.jn t ("NTVXKykVg" (intrinsic 'fl.jn)))(cddr t ("NTVXKykVg" (lambda (x) (cdr (cdr x)))))(iterate t ("NTVXKykVg" (lambda (it proc) ((lambda (i G82) ((lambda (G83) (setq G83 (lambda nil (cond ((< i G82) (proc (it i)) (setq i (+ i 1)) (G83)) (t (void))))) (G83)) nil)) 0 (it)))))(set-element? t ("NTVXKykVg" (lambda (s elem) (has-key? s elem))))(array-sort t ("NTVXKykVg" (intrinsic 'array-sort)))(proc? t ("NTVXKykVg" (lambda (sym) (cond ((intrinsic? sym)) ((closure? sym))))))(fl.tan t ("NTVXKykVg" (intrinsic 'fl.tan)))(str-empty? t ("NTVXKykVg" (intrinsic 'str-empty?)))(array-exists? t ("NTVXKykVg" (lambda (seq pred) (_seq-exists? seq pred 0 (array-len seq)))))(_external? t ("NTVXKykVg" (intrinsic '_external?)))(dfc! t ("NTVXKykVg" (lambda (sym) (progn (bind sym 0) sym))))(str-remove-suffix t ("NTVXKykVg" (lambda (s sfx) (cond ((cond ((str-empty? sfx)) ((str-empty? s))) s) ((equal? (str-slice s (- (len s) (min (len sfx) (len s))) (len s)) sfx) (str-slice s (- (len s) (min (len sfx) (len s))) (len s))) (t s)))))(_run-at-date->ns t ("NTVXKykVg" (lambda (date repeater) ((lambda (t0) (cond ((list? date) (last (2nd date))) ((equal? date 'now) t0) ((equal? date 'next-minute) (+ t0 *minute-ns*)) ((equal? date 'skip) (cond (repeater (repeater -1 t0)) (t t0))) ((equal? date 'next-quarter) (+ t0 *quarter-ns*)) ((equal? date 'next-halfhour) (+ t0 *halfhour-ns*)) ((equal? date 'next-hour) (+ t0 *hour-ns*)) ((equal? date 'in-2-hours) (+ t0 (* 2 *hours-ns*))) ((equal? date 'in-3-hours) (+ t0 (* 3 *hours-ns*))) ((equal? date 'tomorrow) (+ t0 *day-ns*)) ((equal? date 'next-week) (+ t0 (* *day-ns* 7))) ((equal? date 'next-month) ((lambda (d Y M D h m s) (setq d (now)) (setq Y (1st (1st d))) (setq M (2nd (1st d))) (setq D (3rd (1st d))) (setq h (1st (2nd d))) (setq m (2nd (2nd d))) (setq s (3rd (2nd d))) (date->epoch-ns Y (add1 M) D h m s 0)) nil nil nil nil nil nil nil)) ((equal? date 'next-year) ((lambda (d Y M D h m s) (setq d (now)) (setq Y (1st (1st d))) (setq M (2nd (1st d))) (setq D (3rd (1st d))) (setq h (1st (2nd d))) (setq m (2nd (2nd d))) (setq s (3rd (2nd d))) (date->epoch-ns (add1 Y) M D h m s 0)) nil nil nil nil nil nil nil)))) (now-ns)))))(fl.yn t ("NTVXKykVg" (intrinsic 'fl.yn)))(rplacd t ("NTVXKykVg" (intrinsic 'rplacd)))(str-remove-prefix t ("NTVXKykVg" (lambda (s pfx) (cond ((cond ((str-empty? pfx)) ((str-empty? s))) s) ((equal? (str-slice s 0 (min (len pfx) (len s))) pfx) (str-slice s (min (len pfx) (len s)) (len s))) (t s)))))(init-testing t ("NTVXKykVg" (lambda nil (setq *tests* nil) (declare-unprotected '*tests*) (setq *testinfo* (dict)))))(has-key? t ("NTVXKykVg" (intrinsic 'has-key?)))(declare-volatile t ("NTVXKykVg" (lambda (sym) (set *volatile-toplevel-symbols* sym t))))(str-remove-number t ("NTVXKykVg" (lambda (s &rest opt) ((lambda (fields) (cond ((num? (str->expr (last fields))) (str-join (reverse (cdr (reverse fields))) (cond (opt (1st opt)) (t " ")))) (t s))) (array->list (strsplit s (cond (opt (1st opt)) (t " "))))))))(fl.log10 t ("NTVXKykVg" (intrinsic 'fl.log10)))(- t ("NTVXKykVg" (intrinsic '-)))(dec.div-round t ("NTVXKykVg" (intrinsic 'dec.div-round)))(fl.exp2 t ("NTVXKykVg" (intrinsic 'fl.exp2)))(dec.round-cash t ("NTVXKykVg" (intrinsic 'dec.round-cash)))(fl.ceil t ("NTVXKykVg" (intrinsic 'fl.ceil)))(_new-task-id t ("NTVXKykVg" (lambda nil (cinc! '*task-counter*))))(array t ("NTVXKykVg" (intrinsic 'array)))(defun t ("NTVXKykVg" (macro (name args &rest body) (list 'progn (list 'setq name (cons 'lambda (cons args body))) (list 'quote name)))))(get t ("NTVXKykVg" (lambda (d k &rest rargs) (_get d k (1st rargs nil)))))(chars t ("NTVXKykVg" (lambda (s) (list->set (str->chars s)))))(set? t ("NTVXKykVg" (lambda (x) (dict? x))))(ling.jaro-winkler t ("NTVXKykVg" (intrinsic 'ling.jaro-winkler)))(instr t ("NTVXKykVg" (intrinsic 'instr)))(str->blob t ("NTVXKykVg" (intrinsic 'str->blob)))(enqueue! t ("NTVXKykVg" (macro (sym elem) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'array-set sym 2 (list 'append (list 'array-ref sym 2) (list 'list elem))) (list 'mutex-unlock (list 'array-ref sym 1))))))(chars->str t ("NTVXKykVg" (intrinsic 'chars->str)))(prin1 t ("NTVXKykVg" (intrinsic 'prin1)))(cst! t ("NTVXKykVg" (intrinsic 'cst!)))(2nd t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 1)) (t (nthdef seq 1 (car default)))))))(if t ("NTVXKykVg" (macro (test then &rest else) (cons 'cond (cons (list test then) (cond (else (list (cons t else)))))))))(fl.cosh t ("NTVXKykVg" (intrinsic 'fl.cosh)))(dec.greater-than-or-equal? t ("NTVXKykVg" (intrinsic 'dec.greater-than-or-equal?)))(cadr t ("NTVXKykVg" (lambda (x) (car (cdr x)))))(null? t ("NTVXKykVg" (lambda (x) (eq? x nil))))(lighten t ("NTVXKykVg" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_lighten-delta c (cond (amount (car amount)) (t 30)))) (list (min (+ (1st c 180) delta) 255) (min (+ (2nd c 180) delta) 255) (min (+ (3rd c 180) delta) 255) (4th c))) nil nil))))(error? t ("NTVXKykVg" (intrinsic 'error?)))(_help-see-to-str t ("NTVXKykVg" (lambda (li) (cond (li (apply str+ (cons (fmt "%v" (car li)) (mapcar (cdr li) (lambda (x) (fmt ", %v" x)))))) (t "n/a")))))(dec.cmp t ("NTVXKykVg" (intrinsic 'dec.cmp)))(dict->array t ("NTVXKykVg" (intrinsic 'dict->array)))(bitand t ("NTVXKykVg" (intrinsic 'bitand)))(dec.shift t ("NTVXKykVg" (intrinsic 'dec.shift)))(odd? t ("NTVXKykVg" (lambda (x) (not (even? x)))))(db.close t ("NTVXKykVg" (intrinsic 'db.close)))(synouty t ("NTVXKykVg" (lambda (li) (enq (lambda nil (outy li) (cond ((permission? 'interactive) (read-eval-reply)) (t (void))))))))(fl.frexp t ("NTVXKykVg" (intrinsic 'fl.frexp)))(equal? t ("NTVXKykVg" (lambda (x y) (cond ((atom? x) (eql? x y)) ((atom? y) nil) ((equal? (car x) (car y)) (equal? (cdr x) (cdr y)))))))(dict-key-equal? t ("NTVXKykVg" (intrinsic 'dict-key-equal?)))(_external-str t ("NTVXKykVg" (lambda (arg) (cond ((can-externalize? arg) ((lambda (s e) (setq s (stropen (_external arg))) (setq e (car (readall s))) (close s) e) nil nil)) (t arg)))))(protect-toplevel-symbols t ("NTVXKykVg" (lambda nil (apply protect (filter (dump-bindings) (lambda (sym) (cond ((not (protected? sym)) (not (has-key? *mutable-toplevel-symbols* sym))))))))))(make-symbol t ("NTVXKykVg" (intrinsic 'make-symbol)))(identity t ("NTVXKykVg" (lambda (x) x)))(str->list t ("NTVXKykVg" (lambda (s) (array->list (str->array s)))))(set-volume t ("NTVXKykVg" (intrinsic 'set-volume)))(remove-hook t ("NTVXKykVg" (lambda (h id2) ((lambda (id1) (cond ((num? id1) (progn (remove-hook-internal id1 id2) t)) (t nil))) (hook h)))))(now-ms t ("NTVXKykVg" (lambda nil (div (now-ns) 1000000))))(default-error-handler t ("NTVXKykVg" (lambda nil (lambda (err) (beep 'error) (*error-printer* err)))))(mapcar t ("NTVXKykVg" (lambda (x f) (cond (x (cons (f (car x)) (mapcar (cdr x) f)))))))(_bound? t ("NTVXKykVg" (intrinsic '_bound?)))(dec.div t ("NTVXKykVg" (intrinsic 'dec.div)))(strright t ("NTVXKykVg" (lambda (s n) (str+ (strbuild " " (- n (len s))) s))))(cdadr t ("NTVXKykVg" (lambda (x) (cdr (car (cdr x))))))(dec.atan t ("NTVXKykVg" (intrinsic 'dec.atan)))(help-about t ("NTVXKykVg" (lambda (topic &rest opt) ((lambda (topics) (cond ((not (member topic topics)) (warn (fmt "topic '%v is unknown" topic))) (t (void))) (cond ((cond ((not (null? opt)) (not (cond ((equal? 'any (car opt))) ((equal? 'first (car opt))))))) (error (fmt "help-about: the optional argument must be one of '(any first), given '%v" (car opt)))) (t (void))) ((lambda (d) (dict-foreach *help* (lambda (k v) ((lambda (li) (cond ((not (null? li)) (cond ((cond ((cond ((null? opt)) ((equal? 'any (car opt)))) (member topic (car li))) (t (equal? topic (caar li)))) (set d k t)) (t (void)))) (t (void)))) (cdr (assoc 'topic v))))) (sort-symbols (dict->keys d))) (dict))) (help-topics)))))(dec.abs t ("NTVXKykVg" (intrinsic 'dec.abs)))(list-slice t ("NTVXKykVg" (intrinsic 'list-slice)))(_remove-duplicates t ("NTVXKykVg" (lambda (li acc d) (cond ((null? li) (reverse acc)) ((has-key? d (1st li nil)) (_remove-duplicates (cdr li) acc d)) (t (set d (1st li nil) t) (_remove-duplicates (cdr li) (cons (car li) acc) d))))))(strcenter t ("NTVXKykVg" (lambda (s n) ((lambda (x) (str+ (strbuild " " x) s (strbuild " " x))) (truncate (/ (- n (len s)) 2))))))(current-error-handler t ("NTVXKykVg" (lambda nil ((lambda (handler) (cond (handler handler) (t (getstacked *error-handler* 0 (default-error-handler))))) (getstacked *error-handler* (sys 'taskid) nil)))))(_darken-delta t ("NTVXKykVg" (lambda (c proposed) ((lambda (li m) (setq li (reverse (cdr (reverse c)))) (setq m (apply min li)) (cond ((< m proposed) m) (t proposed))) nil nil))))(*custom-hook-counter* t 0)(str-index t ("NTVXKykVg" (lambda (s chars &rest pos) (_str-index s chars (cond ((null? pos) 0) (t (car pos))) (strlen s)))))(remove-hooks t ("NTVXKykVg" (lambda (h) ((lambda (id) (cond ((num? id) (progn (remove-hooks-internal id) t)) (t nil))) (hook h)))))(_out-help-fix-end t ("NTVXKykVg" (lambda (li) ((lambda (arr m) (setq arr (list->array li)) (setq m (sub1 (len arr))) ((lambda (n G8) ((lambda (G9) (setq G9 (lambda nil (cond ((< n G8) (cond ((1st (array-ref arr n)) ((lambda (a b) (array-set arr (add1 n) (list (1st b) (str+ (slice (2nd a) (sub1 (len (2nd a))) (len (2nd a))) (2nd b)))) (array-set arr n (list (1st a) (slice (2nd a) 0 (sub1 (len (2nd a))))))) (array-ref arr n) (array-ref arr (add1 n)))) (t (void))) (setq n (+ n 1)) (G9)) (t (void))))) (G9)) nil) (array->list arr)) 0 m)) nil nil))))(cdddr t ("NTVXKykVg" (lambda (x) (cdr (cdr (cdr x))))))(*quarter-ns* t 900000000000)(db.row t ("NTVXKykVg" (intrinsic 'db.row)))(when t ("NTVXKykVg" (macro (test &rest then) (cons 'cond (cons (cons test then) (cond (t (list (list t (list 'void))))))))))(10th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 9)) (t (nthdef seq 9 (car default)))))))(assoc1 t ("NTVXKykVg" (lambda (sym li) (cadr (assoc sym li)))))(set-difference t ("NTVXKykVg" (lambda (a b) ((lambda (c) (dict-foreach a (lambda (k v) (cond ((not (has-key? b k)) (set c k t)) (t (void))))) c) (dict)))))(add-hook-once t ("NTVXKykVg" (lambda (h proc) (cond ((get *hooks-added-once* h) (set *hooks-added-once* h true) (add-hook h proc)) (t nil)))))(prune-unneeded-help-entries t ("NTVXKykVg" (lambda nil (foreach (find-unneeded-help-entries) (lambda (sym) (delete *help* sym))))))(blob->ascii85 t ("NTVXKykVg" (intrinsic 'blob->ascii85)))(dict-key-subset? t ("NTVXKykVg" (intrinsic 'dict-key-subset?)))(print t ("NTVXKykVg" (lambda (x) (prin1 x) (terpri) x)))(queue-empty? t ("NTVXKykVg" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (null? (array-ref q 2))))))(fl.atan t ("NTVXKykVg" (intrinsic 'fl.atan)))(min t ("NTVXKykVg" (lambda (&rest args) (minmax < (cdr args) (car args)))))(fl.fma t ("NTVXKykVg" (intrinsic 'fl.fma)))(functional-arity t ("NTVXKykVg" (intrinsic 'functional-arity)))(bind t ("NTVXKykVg" (intrinsic 'bind)))(* t ("NTVXKykVg" (intrinsic '*)))(has t ("NTVXKykVg" (lambda (d k) ((lambda (s) (cond ((equal? (get d k s) s) nil) (t t))) (gensym)))))(_set-help-entries t ("NTVXKykVg" (lambda (sym ent) (cond (*_current-lib* ((lambda (newstr) (set *help* (str->sym newstr) (_transform-help-entries newstr (sym->str sym) ent))) (_prefix-lib-sym *_current-lib* sym))) (t (set *help* sym ent))))))(task-send t ("NTVXKykVg" (lambda (id msg) (cond ((not (task? id)) (error "task-send: invalid task %v" id)) (t (void))) (set *tasks-to-msg* id (array-append (get *tasks-to-msg* id (array)) msg)))))(str-forall? t ("NTVXKykVg" (lambda (s pred) ((lambda (c) (_seq-forall? c pred 0 (array-len c))) (str->chars s)))))(sub1 t ("NTVXKykVg" (lambda (n) (- n 1))))(close t ("NTVXKykVg" (intrinsic 'close)))(zimage-runable? t ("NTVXKykVg" (lambda (&rest fi) ((lambda (in header) (setq in (apply open fi)) (setq header (read in)) (close in) (cond ((equal? (1st header nil) 'z3s5-image) (cond ((>= (semver.compare (1st (sys 'version "v0.0")) (2nd (assoc 'min-version header) "v0.1")) 0) (2nd (assoc 'entry header) nil)))))) nil nil))))(expect t ("NTVXKykVg" (macro (value computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym computed)) (list 'cond (list (list 'equal? sym value) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect %v given %v\n" (list '_testidx) value sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil))))(_append t ("NTVXKykVg" (lambda (x y) (cond ((null? x) y) (t (cons (car x) (_append (cdr x) y)))))))(_help-is-functional t ("NTVXKykVg" (lambda (sym) (member sym '(proc func function macro)))))(with-final t ("NTVXKykVg" (macro (finalizer &rest body) ((lambda (result) (list 'let (list (list result nil)) (list 'push-finalizer finalizer) (list 'push-error-handler (list 'lambda (list 'err) (list 'void (list 'pop-error-handler)) (list (list 'pop-finalizer) 'err result) (list 'let (list (list 'handler (list 'pop-error-handler))) (list 'when 'handler (list 'handler 'err))))) (list 'setq result (cons 'progn body)) (list 'pop-error-handler) (list (list 'pop-finalizer) nil result))) (gensym)))))(a nil hello)(dec.less-than-or-equal? t ("NTVXKykVg" (intrinsic 'dec.less-than-or-equal?)))(queue-len t ("NTVXKykVg" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (len (array-ref q 2))))))(dec.sub t ("NTVXKykVg" (intrinsic 'dec.sub)))(print-start-banner t ("NTVXKykVg" (lambda nil ((lambda (tc bc) (set-color 'text (the-color 'z3s5-sysmsg-text)) (out "Welcome to ") (set-color 'back (the-color 'z3s5-orange)) (set-color 'text (the-color 'z3s5-blue)) (out "Z3S5 Lisp") (set-color 'back bc) (set-color 'text (the-color 'z3s5-sysmsg-text)) (out " on ") (out (caddr (sys 'version nil))) (out " with ") (out (cadr (sys 'version nil))) (out " cores!\n") (out "The session started on ") (out (datestr (now))) (out " UTC.\n") (out "Enter (exit) to close the session. Happy hacking!\n")) (color 'text) (color 'back)))))(write-zimage t ("NTVXKykVg" (lambda (out min-version info entry-point) (cond ((not (str? min-version)) (error "write-zimage: min-version must be a version string, given %v" min-version)) (t (void))) (cond ((not (list? info)) (error "write-zimage: info must be a list, given %v" info)) (t (void))) ((lambda (n) (write out (list 'z3s5-image (list 'version (sys 'version)) (list 'info info) (list 'nonce n) (list 'min-version min-version) (list 'time (now)) (list 'entry (externalize entry-point)))) (foreach (dump-bindings) (lambda (sym) (cond ((not (get *volatile-toplevel-symbols* sym nil)) (cond ((can-externalize? sym) (write out (list sym (protected? sym) (externalize (eval sym) n)))) (t (write out (list sym (protected? sym) nil)) (warn "cannot externalize '%v, set to nil" sym)))) (t (void)))))) (nonce)))))(zimage-loadable? t ("NTVXKykVg" (lambda (&rest fi) ((lambda (in header) (setq in (apply open fi)) (setq header (read in)) (close in) (cond ((equal? (1st header nil) 'z3s5-image) (>= (semver.compare (1st (sys 'version "v0.0")) (2nd (assoc 'min-version header) "v0.1")) 0)))) nil nil))))(intern t ("NTVXKykVg" (intrinsic 'intern)))(*current-error-continuation* t ("NTVXKykVg" (dict 'nil)))(_prefix-lib-sym t ("NTVXKykVg" (lambda (prefixli oldsym) (str+ (str-join (mapcar (reverse prefixli) sym->str) ".") "." (sym->str oldsym)))))(expect-err t ("NTVXKykVg" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list '_testout (list 'fmt "%v " (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-error-handler) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed))))) (list (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'fmt "\n%v FAIL, expect error but none occurred\n" (list '_testidx))))))) (list 'pop-error-handler))) '*tests*)))))(stack? t ("NTVXKykVg" (lambda (sym) (cond ((not (array? sym)) nil) ((< (len sym) 2) nil) ((not (mutex? (array-ref sym 1))) nil) (t (equal? (array-ref sym 0) 'stack))))))(strless t ("NTVXKykVg" (intrinsic 'strless)))(rndseed t ("NTVXKykVg" (intrinsic 'rndseed)))(str->expr* t ("NTVXKykVg" (intrinsic 'str->expr*)))(remove-hooks-internal t ("NTVXKykVg" (intrinsic 'remove-hooks-internal)))(set-union t ("NTVXKykVg" (lambda (a b) (dict-merge a b))))(% t ("NTVXKykVg" (intrinsic '%)))(1st t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 0)) (t (nthdef seq 0 (car default)))))))(*week-ns* t 604800000000000)(_out-help t ("NTVXKykVg" (lambda (sym info) (cond (info (_out-help1 sym info)) (t (outy (list (list 'fg 'z3s5-help-text (list 'bg 'z3s5-help-back (fmt "No help available for '%v.\n" sym))))))))))(list-reverse t ("NTVXKykVg" (intrinsic 'list-reverse)))(ling.porter t ("NTVXKykVg" (intrinsic 'ling.porter)))(task-run t ("NTVXKykVg" (lambda (id &rest args) ((lambda (silent?) (cond ((task? id) (cond ((eq? (get *tasks-state* id nil) 'running) (cond ((not silent?) (error "task-run: task %v is already running" id)) (t (void)))) (t (systask ((get *tasks* id) id))))) (t (cond ((not silent?) (error "task-run: invalid task %v" id)) (t (void)))))) (cond (args (1st args nil)))))))(db.fuzzify t ("NTVXKykVg" (intrinsic 'db.fuzzify)))(dec.from-blob t ("NTVXKykVg" (intrinsic 'dec.from-blob)))(dec.exponent t ("NTVXKykVg" (intrinsic 'dec.exponent)))(fl.y0 t ("NTVXKykVg" (intrinsic 'fl.y0)))(_build-list t ("NTVXKykVg" (lambda (n proc acc) (cond ((= n 0) acc) (t (_build-list (sub1 n) proc (cons (proc n) acc)))))))(dec.sin t ("NTVXKykVg" (intrinsic 'dec.sin)))(hour+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *hour-ns* delta))))))(dict->values t ("NTVXKykVg" (lambda (d) ((lambda (li) (dict-foreach d (lambda (k v) (setq li (cons v li)))) li) nil))))(map-pairwise t ("NTVXKykVg" (lambda (seq proc) (cond ((not (even? (len seq))) (error "map-pairwise: expected sequence of even length, but the given sequence has length %v" (len seq))) (t (void))) ((lambda (k traverse li) (setq k (len seq)) (setq traverse (lambda (i s acc) (cond ((= i k) acc) ((odd? i) (traverse (add1 i) s (_append acc (proc (nth s (sub1 i)) (nth s i))))) (t (traverse (add1 i) s acc))))) (setq li (traverse 0 seq nil)) (cond ((list? seq) li) ((array? seq) (list->array li)) ((str? seq) (list->str li)) (t (error "map-pairwise - not a sequence: %v" seq)))) nil nil nil))))(the-color t ("NTVXKykVg" (lambda (spec) (cond ((sym? spec) ((lambda (c) (cond (c (cond ((sym? c) (color c)) ((> (len c) 3) c) (t (nreverse (cons 255 (nreverse c)))))) (t (error "color not in *colors*: %v" spec)))) (get *colors* spec nil))) ((list? spec) (cond ((< (len spec) 3) (error "expected a list of r g b values, given %v" spec)) ((= (len spec) 3) (nreverse (cons 255 (nreverse spec)))) ((> (len spec) 3) spec) (t (error "malformed color list: %v" spec)))) (t (error "malformed color specification: %v" spec))))))(run-hook-internal t ("NTVXKykVg" (intrinsic 'run-hook-internal)))(str-join t ("NTVXKykVg" (lambda (fields sep) (_str-join fields sep ""))))(array-walk t ("NTVXKykVg" (intrinsic 'array-walk)))(defmacro t ("NTVXKykVg" (macro (name args &rest body) (list 'progn (list 'setq name (cons 'macro (cons args body))) (list 'quote name)))))(dec.is-positive? t ("NTVXKykVg" (intrinsic 'dec.is-positive?)))(5th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 4)) (t (nthdef seq 4 (car default)))))))(array-pmap! t ("NTVXKykVg" (intrinsic 'array-pmap!)))(fl.asinh t ("NTVXKykVg" (intrinsic 'fl.asinh)))(foreach t ("NTVXKykVg" (lambda (seq proc) (cond ((list? seq) (list-foreach seq proc)) ((array? seq) (array-foreach seq proc)) ((str? seq) (str-foreach seq proc)) (t (error "foreach - not a sequence: %v" seq))))))(getstacked t ("NTVXKykVg" (lambda (dic key default) ((lambda (li) (cond ((null? li) default) (t (car li)))) (get dic key nil)))))(str->chars t ("NTVXKykVg" (intrinsic 'str->chars)))(_maybe-translate-help t ("NTVXKykVg" (lambda (datum strnew strold) (cond ((sym? datum) ((lambda (dstr) (cond ((equal? dstr strold) (str->sym strnew)) ((equal? (1st dstr 0) 46) ((lambda (without-dot) (cond (*_current-lib* (str->sym (_prefix-lib-sym *_current-lib* without-dot))) (t without-dot))) (str->sym (slice dstr 1 (len dstr))))) (t datum))) (sym->str datum))) ((str? datum) (str-replace datum strold strnew -1)) ((cond ((list? datum) (not (null? datum)))) (cons (_maybe-translate-help (car datum) strnew strold) (_maybe-translate-help (cdr datum) strnew strold))) (t datum)))))(mutex-runlock t ("NTVXKykVg" (intrinsic 'mutex-runlock)))(str+ t ("NTVXKykVg" (intrinsic 'str+)))(count-partitions t ("NTVXKykVg" (lambda (x n) ((lambda (m) (cond ((> (% x n) 0) (add1 m)) (t m))) (div x n)))))(fl.max t ("NTVXKykVg" (intrinsic 'fl.max)))(array->str t ("NTVXKykVg" (intrinsic 'array->str)))(writable? t ("NTVXKykVg" (intrinsic 'writable?)))(day+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *day-ns* delta))))))(alist? t ("NTVXKykVg" (lambda (li) (cond ((null? li) t) (t (cond ((list? li) (cond ((list? (car li)) (alist? (cdr li)))))))))))(array-foreach t ("NTVXKykVg" (lambda (arr proc) ((lambda (i G77) ((lambda (G78) (setq G78 (lambda nil (cond ((< i G77) (proc (array-ref arr i)) (setq i (+ i 1)) (G78)) (t (void))))) (G78)) nil)) 0 (array-len arr)) (void))))(datestr->datelist t ("NTVXKykVg" (lambda (s) ((lambda (parts dstr tmstr dd tt nn year month day hour minute sec ns) (setq parts (strsplit s " ")) (setq dstr (array-ref parts 0)) (setq tmstr (cond ((> (len parts) 1) (array-ref parts 1)) (t "12:00:00.000000"))) (setq dd (strsplit dstr "-")) (setq tt (strsplit tmstr ":")) (setq nn (strsplit (cond ((> (len tt) 2) (array-ref tt 2)) (t "0.0")) ".")) (setq year (str->expr (array-ref dd 0))) (setq month (str->expr (array-ref dd 1))) (setq day (str->expr (array-ref dd 2))) (setq hour (str->expr (array-ref tt 0))) (setq minute (str->expr (array-ref tt 1))) (setq sec (str->expr (array-ref nn 0))) (setq ns (str->expr (cond ((> (len nn) 1) (array-ref nn 1)) (t "0")))) (list (list year month day (day-of-week year month day) (week-of-date year month day)) (list hour minute sec ns (date->epoch-ns year month day hour minute sec ns)))) nil nil nil nil nil nil nil nil nil nil nil nil nil))))(semver.build t ("NTVXKykVg" (intrinsic 'semver.build)))(base64->blob t ("NTVXKykVg" (intrinsic 'base64->blob)))(mutex? t ("NTVXKykVg" (intrinsic 'mutex?)))(caadr t ("NTVXKykVg" (lambda (x) (car (car (cdr x))))))(protect t ("NTVXKykVg" (lambda (&rest symbols) (cond ((permission? 'allow-protect) (list-foreach symbols (lambda (x) (_protect x)))) (t (error "protect: security violation - no permission to protect symbols!"))))))(flatten t ("NTVXKykVg" (lambda (lst) ((lambda (loop) (setq loop (lambda (lst acc) (cond ((null? lst) acc) ((cond ((list? lst) (not (null? lst)))) (loop (car lst) (loop (cdr lst) acc))) (t (cons lst acc))))) (loop lst nil)) nil))))(*scheduler-sleep-interval* nil 800)(slice t ("NTVXKykVg" (lambda (seq low high) (cond ((array? seq) (array-slice seq low high)) ((list? seq) (list-slice seq low high)) ((str? seq) (str-slice seq low high)) (t (error "ref - not a sequence: %v" seq))))))(semver.major-minor t ("NTVXKykVg" (intrinsic 'semver.major-minor)))(cdaar t ("NTVXKykVg" (lambda (x) (cdr (car (car x))))))(*smallest-nonzero-float64* t 5e-324)(peek t ("NTVXKykVg" (intrinsic 'peek)))(sleep t ("NTVXKykVg" (intrinsic 'sleep)))(readall-str t ("NTVXKykVg" (lambda (p &rest opt) ((lambda (m buff reader) (setq m (1st opt 2048)) (setq buff (make-blob m)) (setq reader (lambda (s) ((lambda (n) (cond ((> n 0) (reader (str+ s (blob->str buff 0 n)))) (t (blob-free buff) s))) (read-binary p buff m)))) (reader "")) nil nil nil))))(str->char t ("NTVXKykVg" (intrinsic 'str->char)))(fl.sqrt t ("NTVXKykVg" (intrinsic 'fl.sqrt)))(try t ("NTVXKykVg" (macro (final-stms &rest body) (_append (cons 'progn (cons (list 'push-error-handler (list 'lambda (list 'err) (_append (cons 'progn (cons (list 'when 'err (list 'pop-error-handler)) final-stms)) (list (list 'when 'err (list '*error-printer* 'err)))))) body)) (cons (list 'pop-error-handler) final-stms)))))(wait-for-empty* t ("NTVXKykVg" (lambda (dict key timeout) (_wait-for-empty* dict key timeout (now-ns)))))(expect-false t ("NTVXKykVg" (macro (&rest computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym (cons 'progn computed))) (list 'cond (list (list 'not sym) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect true, result is %v\n" (list '_testidx) sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil))))(year+ t ("NTVXKykVg" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns (list (list (+ (1st (1st ti)) delta) (2nd (1st ti) 1) (3rd (1st ti) 1)) (list (1st (2nd ti nil) 12) (2nd (2nd ti nil) 0) (3rd (2nd ti nil) 0) (4th (2nd ti nil) 0)))))))))(not t ("NTVXKykVg" (lambda (x) (eq? x nil))))(str->expr t ("NTVXKykVg" (intrinsic 'str->expr)))(fl.erf t ("NTVXKykVg" (intrinsic 'fl.erf)))(even? t ("NTVXKykVg" (lambda (x) (= (mod (abs x) 2) 0))))(sort t ("NTVXKykVg" (intrinsic 'sort)))(nthdef t ("NTVXKykVg" (lambda (seq n default) (cond ((seq? seq) (cond ((cond ((< n 0)) ((>= n (len seq)))) default) (t (nth seq n)))) (t default)))))(seq? t ("NTVXKykVg" (lambda (seq) (cond ((array? seq)) ((cond ((list? seq)) ((str? seq))))))))(fl.trunc t ("NTVXKykVg" (intrinsic 'fl.trunc)))(sets nil ("NTVXKykVg" (letrec nil (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x)))))))))(fl.floor t ("NTVXKykVg" (intrinsic 'fl.floor)))(eql? t ("NTVXKykVg" (intrinsic 'eql?)))(*e* t 2.718281828459045)(*hooks* t ("NTVXKykVg" (dict 'nil)))(dec.round t ("NTVXKykVg" (intrinsic 'dec.round)))(week-of-date t ("NTVXKykVg" (intrinsic 'week-of-date)))(_read-zimage-bind t ("NTVXKykVg" (lambda (li nonce) (cond ((protected? (1st li)) (unprotect (1st li))) (t (void))) (bind (1st li) (cond ((3rd li) (internalize (3rd li) nonce)) (t nil))) (cond ((2nd li) (protect (1st li))) (t (void))))))(now-ns t ("NTVXKykVg" (intrinsic 'now-ns)))(dict-protect t ("NTVXKykVg" (intrinsic 'dict-protect)))(EOF t ("NTVXKykVg" (end-of-file)))(fmt t ("NTVXKykVg" (intrinsic 'fmt)))(/= t ("NTVXKykVg" (lambda (x y) (not (= x y)))))(*sqrte* t 1.6487212707001282)(_wait-for-empty* t ("NTVXKykVg" (lambda (dict key timeout first-time) (cond ((cond ((has-key? dict key) (cond ((>= timeout 0) (< (- (now-ns) first-time) timeout)) (t t)))) (sleep-ns (rand 0 *sync-wait-lower-bound* *sync-wait-upper-bound*)) (_wait-for-empty* dict key timeout first-time)) (t (void))))))(_str-index t ("NTVXKykVg" (lambda (s chars pos end) (cond ((>= pos end) nil) ((inchars (str->char (slice s pos (add1 pos))) chars) pos) (t (_str-index s chars (add1 pos) end))))))(dict->list t ("NTVXKykVg" (intrinsic 'dict->list)))(warn t ("NTVXKykVg" (lambda (msg &rest args) (with-colors (the-color 'z3s5-warn-text) (the-color 'z3s5-warn-back) (lambda nil ((lambda (m) (print (fmt "*** warning ***%v" m)) (out "*** warning *** ") (out m) (nl)) (cond (args (apply fmt (cons msg args))) (t msg))))))))(strleft t ("NTVXKykVg" (lambda (s n) (str+ s (strbuild " " (- n (len s)))))))(setsys t ("NTVXKykVg" (intrinsic 'setsys)))(_out-help-warn-maybe t ("NTVXKykVg" (lambda (msg) (cond ((str? msg) (list 'fg (the-color 'z3s5-error-text) (list 'bg (the-color 'z3s5-error-back) (str+ " WARNING: " (strcase msg 'upper))))) (t nil)))))(set-empty? t ("NTVXKykVg" (lambda (s) (dict-empty? s))))(hook t ("NTVXKykVg" (lambda (h) ((lambda (id) (cond (id id) (t (get *custom-hooks* h nil)))) (get *hooks* h nil)))))(permissions t ("NTVXKykVg" (intrinsic 'permissions)))(mutex-unlock t ("NTVXKykVg" (intrinsic 'mutex-unlock)))(make-blob t ("NTVXKykVg" (intrinsic 'make-blob)))(task t ("NTVXKykVg" (lambda (sel proc) ((lambda (i tproc) (set *tasks-state* i 'new) (set *tasks* i tproc) i) (_new-task-id) (lambda (id) (with-final (lambda (err result) (cond ((eq? sel 'remove) (task-remove id)) (t (cond (err (task-broadcast 'error id err) (set *tasks-state* id 'error) (*error-printer* err)) (t (cond ((eq? sel 'auto) (task-remove id)) (t (task-broadcast 'finished id result) (set *tasks-state* id 'finished))))))) (cdec! '*running-tasks*) result) (set *tasks-state* id 'running) (cinc! '*running-tasks*) (proc id)))))))(collect-garbage t ("NTVXKykVg" (intrinsic 'collect-garbage)))(exit t ("NTVXKykVg" (intrinsic 'exit)))(str-ref t ("NTVXKykVg" (intrinsic 'str-ref)))(list? t ("NTVXKykVg" (lambda (x) (cond ((null? x)) ((cons? x))))))(*ln10* t 2.302585092994046)(pushstacked t ("NTVXKykVg" (lambda (dic key datum) (set dic key (cons datum (get dic key nil))))))(*log10e* t 0.43429448190325176)(save-zimage t ("NTVXKykVg" (lambda (min-version info entry-point &rest fi) ((lambda (out) (write-zimage out min-version info entry-point) (close out)) (apply open fi)))))(_external t ("NTVXKykVg" (intrinsic '_external)))(strsplit t ("NTVXKykVg" (intrinsic 'strsplit)))(false t nil)(help t ("NTVXKykVg" (macro (sym) (list 'cond (list (list 'has-key? '*help* (list 'quote sym)) (list '_out-help (list 'quote sym) (list 'get '*help* (list 'quote sym) nil))) (list t (list 'outy (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-help-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-help-back) (list 'fmt "Sorry, no help is available for '%v.\n" (list 'quote sym)))))))))))(fl.dim t ("NTVXKykVg" (intrinsic 'fl.dim)))(_testouty t ("NTVXKykVg" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (outy arg)) (t (void))))))(fl.cos t ("NTVXKykVg" (intrinsic 'fl.cos)))(dict t ("NTVXKykVg" (intrinsic 'dict)))(zimage-header-info t ("NTVXKykVg" (lambda (header file c) (cons file (cons c header)))))(letrec t ("NTVXKykVg" (macro (args &rest body) ((lambda (vars setqs) (progn (setq vars (lambda (x) (cond (x (cons (caar x) (vars (cdr x))))))) 'vars) (progn (setq sets (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x))))))) 'sets) (append (cons 'let (cons (vars args) (sets args))) body)) nil nil))))(ccmp t ("NTVXKykVg" (intrinsic 'ccmp)))(caar t ("NTVXKykVg" (lambda (x) (car (car x)))))(lcons t ("NTVXKykVg" (lambda (datum li) (nreverse (cons datum (nreverse li))))))(void t ("NTVXKykVg" (intrinsic 'void)))(ling.levenshtein t ("NTVXKykVg" (intrinsic 'ling.levenshtein)))(random-color t ("NTVXKykVg" (lambda (&rest alpha) (list (rand 0 0 255) (rand 0 0 255) (rand 0 0 255) (1st alpha 255)))))(array-ref t ("NTVXKykVg" (intrinsic 'array-ref)))(read-string t ("NTVXKykVg" (intrinsic 'read-string)))(bitshr t ("NTVXKykVg" (intrinsic 'bitshr)))(seek t ("NTVXKykVg" (intrinsic 'seek)))(rand t ("NTVXKykVg" (intrinsic 'rand)))(fl.j0 t ("NTVXKykVg" (intrinsic 'fl.j0)))(fl.hypot t ("NTVXKykVg" (intrinsic 'fl.hypot)))(dec.less-than? t ("NTVXKykVg" (intrinsic 'dec.less-than?)))(array-set t ("NTVXKykVg" (intrinsic 'array-set)))(ling.soundex t ("NTVXKykVg" (intrinsic 'ling.soundex)))(bitclear t ("NTVXKykVg" (intrinsic 'bitclear)))(rplaca t ("NTVXKykVg" (intrinsic 'rplaca)))(error->str t ("NTVXKykVg" (intrinsic 'error->str)))(db.open t ("NTVXKykVg" (intrinsic 'db.open)))(add1 t ("NTVXKykVg" (lambda (n) (+ n 1))))(>= t ("NTVXKykVg" (lambda (x y) (not (< x y)))))(str? t ("NTVXKykVg" (intrinsic 'str?)))(set-color t ("NTVXKykVg" (intrinsic 'set-color)))(now t ("NTVXKykVg" (intrinsic 'now)))(blob-chksum t ("NTVXKykVg" (intrinsic 'blob-chksum)))(index t ("NTVXKykVg" (lambda (seq elem &rest pred) (_index seq elem 0 (len seq) (cond (pred (car pred)) (t eq?))))))(cinc! t ("NTVXKykVg" (intrinsic 'cinc!)))(blob-equal? t ("NTVXKykVg" (intrinsic 'blob-equal?)))(*second-ns* t 1000000000)(semver.prerelease t ("NTVXKykVg" (intrinsic 'semver.prerelease)))(run-selftest t ("NTVXKykVg" (lambda (&rest opt) (set *testinfo* 'silent? (1st opt nil)) (_testouty (list (list 'fg 'z3s5-blue (list 'bg 'z3s5-orange (list 'text "<<< RUNNING Z3S5 LISP SELFTEST >>>\n"))))) (cond ((not (get *testinfo* 'silent? nil)) (beep 'info)) (t (void))) (set *testinfo* 'count 0) (set *testinfo* 'failure 0) (set *testinfo* 'success 0) (set *testinfo* 'error 0) ((lambda (tests traverse continue) (setq tests (reverse *tests*)) (setq traverse (lambda nil (cond ((null? tests) (void)) (t ((lambda (test) (setq tests (cdr tests)) (test) (traverse)) (car tests)))))) (setq continue (lambda nil (pop-error-handler) (set *testinfo* 'continuation nil) ((lambda (perfect?) (cond ((not (get *testinfo* 'silent? nil)) (cond (perfect? (void (future ((lambda (n G1) ((lambda (G3) (setq G3 (lambda nil (cond ((< n G1) (beep 'okay) (sleep 500) (setq n (+ n 1)) (G3)) (t (void))))) (G3)) nil)) 0 3)))) (t (void (future ((lambda (n G2) ((lambda (G4) (setq G4 (lambda nil (cond ((< n G2) (beep 'error) (sleep 400) (setq n (+ n 1)) (G4)) (t (void))))) (G4)) nil)) 0 3)))))) (t (void))) ((lambda (msg) (cond (perfect? (_testout msg)) (t (_testouty (list (list 'bg 'z3s5-error-back (list 'fg 'z3s5-error-text (list 'text msg)))))))) (fmt "\n==> Passed %v of %v tests, %v errors, %v failures.\n" (get *testinfo* 'success) (get *testinfo* 'count) (get *testinfo* 'error) (get *testinfo* 'failure)))) (cond ((= (get *testinfo* 'failure 0) 0) (= (get *testinfo* 'error 0) 0)))))) (set *testinfo* 'continuation (lambda nil (traverse) (continue))) (push-error-handler (lambda (err) (set *testinfo* 'error (add1 (get *testinfo* 'error 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (str+ (shorten (fmt "\n%v ERR %v" (get *testinfo* 'count 0) err) (* 3 (sys 'cols 80))) "\n")))))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (traverse) (continue)) nil nil nil))))(functional? t ("NTVXKykVg" (lambda (sym) (cond ((proc? sym)) ((macro? sym))))))(declare-unprotected t ("NTVXKykVg" (lambda (sym) (set *mutable-toplevel-symbols* sym t))))(_help-arity-to-str t ("NTVXKykVg" (lambda (n) (cond ((< n 0) (fmt "%v or more" (abs (+ n 1)))) (t (fmt "%v" n))))))(str->array t ("NTVXKykVg" (intrinsic 'str->array)))(terpri t ("NTVXKykVg" (intrinsic 'terpri)))(7th t ("NTVXKykVg" (lambda (seq &rest default) (cond ((null? default) (nth seq 6)) (t (nthdef seq 6 (car default)))))))(pop-finalizer t ("NTVXKykVg" (lambda nil (popstacked *finalizers* (sys 'taskid) (lambda (err result) (cond (err (*error-handler* err)) (t (void))) result)))))(array-copy t ("NTVXKykVg" (intrinsic 'array-copy)))(intrinsic? t ("NTVXKykVg" (intrinsic 'intrinsic?)))(< t ("NTVXKykVg" (intrinsic '<)))(help-topics t ("NTVXKykVg" (lambda nil ((lambda (d) (dict-foreach *help* (lambda (k v) ((lambda (li) (cond ((not (null? li)) (foreach (car li) (lambda (topic) (set d topic t)))) (t (void)))) (cdr (assoc 'topic v))))) (sort-symbols (dict->keys d))) (dict)))))(stop-task-scheduler t ("NTVXKykVg" (lambda nil (cond ((task? *scheduler*) (task-send *scheduler* 'end)) (t (void))))))(strlen t ("NTVXKykVg" (intrinsic 'strlen)))(*hour-ns* t 3600000000000)(atom? t ("NTVXKykVg" (intrinsic 'atom?)))(str-reverse t ("NTVXKykVg" (intrinsic 'str-reverse)))(strcase t ("NTVXKykVg" (intrinsic 'strcase)))(_wait-for* t ("NTVXKykVg" (lambda (dict key timeout first-time) (cond ((cond ((get dict key nil)) ((cond ((>= timeout 0) (>= (- (now-ns) first-time) timeout)) (t nil)))) (get dict key nil)) (t (sleep-ns (rand 0 *sync-wait-lower-bound* *sync-wait-upper-bound*)) (_wait-for* dict key timeout first-time))))))(str-replace* t ("NTVXKykVg" (intrinsic 'str-replace*)))(apply t ("NTVXKykVg" (intrinsic 'apply)))(pop! t ("NTVXKykVg" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result)))))))(dict-foreach t ("NTVXKykVg" (intrinsic 'dict-foreach)))(hex->blob t ("NTVXKykVg" (intrinsic 'hex->blob)))(add-hook-internal t ("NTVXKykVg" (intrinsic 'add-hook-internal)))(dict-unprotect t ("NTVXKykVg" (intrinsic 'dict-unprotect)))(*error-printer* t ("NTVXKykVg" (lambda (err) (with-colors (the-color 'z3s5-error-text) (the-color 'z3s5-error-back) (lambda nil (beep 'error) (out (cond (nil (shorten err *error-printer-size-limit*)) (t err))) (out "\n"))))))(date->epoch-ns t ("NTVXKykVg" (intrinsic 'date->epoch-ns)))(dec.greater-than? t ("NTVXKykVg" (intrinsic 'dec.greater-than?)))(break t ("NTVXKykVg" (intrinsic 'break)))(read-zimage t ("NTVXKykVg" (lambda (in fi) ((lambda (header nonce) (setq header (read in)) (setq nonce (2nd (assoc 'nonce header) nil)) (cond ((not nonce) (error "read-zimage: zimage corrupted, empty nonce")) (t (void))) (cond ((>= (semver.compare (1st (sys 'version)) (2nd (assoc 'min-version header) "v0.0")) 0) (_read-zimage in header fi 1 nonce)) (t (error "read-zimage: zimage requires Lisp version %v, but this is only version %v" (semver.canonical (2nd (assoc 'min-version header) "v0.0")) (semver.canonical (1st (sys 'version))))))) nil nil))))(_seq-forall? t ("NTVXKykVg" (lambda (seq pred n m) (cond ((< n m) (cond ((pred (nth seq n)) (_seq-forall? seq pred (add1 n) m)) (t nil))) (t t)))))(dolist t ("NTVXKykVg" (macro (spec &rest body) ((lambda (name list) (cons 'let (cons (list name (list list (cadr spec))) (cons (_append (cons 'while (cons list (cons (list 'setq name (list 'car list)) body))) (list (list 'setq list (list 'cdr list)))) (cond ((cddr spec) (list (list 'setq name nil) (caddr spec)))))))) (car spec) (gensym)))))(readall t ("NTVXKykVg" (lambda (n) (nreverse (_readall n nil)))))(dict->alist t ("NTVXKykVg" (lambda (d) ((lambda (arr c) (dict-foreach d (lambda (k v) (array-set arr c (cons k v)) (setq c (add1 c)))) (array->list arr)) (build-array (len d) nil) 0))))(*sqrtphi* t 1.272019649514069)(/ t ("NTVXKykVg" (intrinsic '/)))(list->set t ("NTVXKykVg" (lambda (li) (alist->dict (map li (lambda (x) (list x t)))))))(sym->str t ("NTVXKykVg" (intrinsic 'sym->str)))(prune-task-table t ("NTVXKykVg" (lambda nil (dict-foreach *tasks-state* (lambda (k v) (cond ((cond ((eq? v 'finished)) ((cond ((eq? v 'canceled)) ((eq? v 'error))))) (task-remove k)) (t (void))))))))(start-task-scheduler t ("NTVXKykVg" (lambda nil (cond ((not (task? *scheduler*)) (setq *scheduler* (_schedule-task-future))) (t (void))) (task-run *scheduler*))))(db.int t ("NTVXKykVg" (intrinsic 'db.int)))(str-count-substr t ("NTVXKykVg" (intrinsic 'str-count-substr)))(with-colors t ("NTVXKykVg" (lambda (f b proc) ((lambda (fg bg) (try ((set-color 'text fg) (set-color 'back bg)) (set-color 'text (the-color f)) (set-color 'back (the-color b)) (proc))) (color 'text) (color 'back)))))(member t ("NTVXKykVg" (lambda (key x) (cond ((null? x) nil) ((equal? key (car x)) x) (t (member key (cdr x)))))))(expr->str t ("NTVXKykVg" (intrinsic 'expr->str)))(max t ("NTVXKykVg" (lambda (&rest args) (minmax > (cdr args) (car args)))))(*error-handler* t ("NTVXKykVg" (dict '(0 (lambda (err) (setq *last-error* err) (*error-printer* err))))))(dec.to-text t ("NTVXKykVg" (intrinsic 'dec.to-text)))(ling.metaphone t ("NTVXKykVg" (intrinsic 'ling.metaphone)))(nreverse t ("NTVXKykVg" (lambda (list) (cond (list (_nreverse list nil))))))(fl.expm1 t ("NTVXKykVg" (intrinsic 'fl.expm1)))(blob-free t ("NTVXKykVg" (intrinsic 'blob-free)))(dec.tan t ("NTVXKykVg" (intrinsic 'dec.tan)))(push-error-handler t ("NTVXKykVg" (lambda (proc) (pushstacked *error-handler* (sys 'taskid) proc))))(cdr t ("NTVXKykVg" (intrinsic 'cdr)))(*interactive-session* t ("NTVXKykVg" t))(cons t ("NTVXKykVg" (intrinsic 'cons)))