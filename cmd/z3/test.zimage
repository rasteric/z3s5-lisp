(z3s5-image (version ("2.3.8+076af0c" 16 "linux/amd64" Z3S5-Lisp "linuxmonster")) (info ("test")) (nonce "I2RGpHZ4R") (min-version "0.0.0") (time ((2022 8 23 2 34) (15 24 14 151451944 1661268254151451944))) (entry nil))(make* t ("I2RGpHZ4R" (macro (name &rest props) (list 'struct-instantiate name (list 'quote props)))))(prop t ("I2RGpHZ4R" (lambda (obj slot) ((lambda (n datum) (setq n (array-ref obj 3)) (setq datum (get (array-ref obj 2) slot n)) (cond ((not (equal? datum n)) datum) (t (error "prop: class %v does not have a property %v" (array-ref obj 1) slot)))) nil nil))))(*reflect* t (oop lib kvdb zimage tasks help beep db fileio decimal ling float console base))(*colors* t ("I2RGpHZ4R" (dict '(white (255 255 255) turquoise (64 224 208) silver (192 192 192) z3-title-fg-2 (0 0 0 255) medium-orchid (186 85 211) light-pink (255 182 193) z3s5-help-back back z3-link-bg back deep-sky-blue (0 191 255) gainsboro (220 220 220) blue (0 0 255) dark-red (139 0 0) red (255 0 0) dark-turquoise (0 206 209) navy (0 0 128) z3s5-warn-text (160 94 35 255) thistle (216 191 216) z3-title-fg-0 (255 255 255 255) gold (255 215 0) z3s5-log-warn-back back violet (238 130 238) orange-red (255 69 0) light-yellow (255 255 224) coral (255 127 80) z3s5-warn-back back royal-blue (65 105 225) peach-puff (255 218 185) misty-rose (255 228 225) z3s5-help-entry-text (255 255 255 255) z3s5-error-text (120 0 0 255) lavender-blush (255 240 245) dodger-blue (30 144 255) z3s5-log-warn-text (160 94 35 255) pale-green (152 251 152) light-sky-blue (135 206 250) chocolate (210 105 30) firebrick (178 34 34) z3s5-help-warn-text (120 0 0 255) green-yellow (173 255 47) dark-salmon (233 150 122) light-gray (211 211 211) plum (221 160 221) cyan (0 255 255) blanched-almond (255 235 205) medium-turquoise (72 209 204) indian-red (205 92 92) z3s5-blue (0 0 60 255) z3-title-fg-6 (0 0 0 255) z3-title-bg-4 back z3-title-fg-5 (0 0 0 255) tomato (255 99 71) medium-sea-green (60 179 113) indigo (75 0 130) z3-title-bg-1 back alice-blue (240 248 255) seashell (255 245 238) white-smoke (245 245 245) medium-slate-blue (123 104 238) z3s5-sysmsg-text (255 255 255 180) sienna (160 82 45) dark-gray (169 169 169) dark-khaki (189 183 107) lemon-chiffon (255 250 205) teal (0 128 128) slate-gray (112 128 144) lawn-green (124 252 0) z3-linknum-bg (0 0 120 255) linen (250 240 230) aqua (0 255 255) sea-green (46 139 87) tan (210 180 140) z3s5-log-error-text (120 0 0 255) pale-turquoise (175 238 238) z3-title-fg-1 (0 0 0 255) aquamarine (127 255 212) z3-title-fg-4 (0 0 0 255) old-lace (253 245 230) yellow-green (154 205 50) dark-goldenrod (184 134 11) medium-aquamarine (102 205 170) antique-white (250 235 215) magenta (255 0 255) gray (128 128 128) moccasin (255 228 181) honeydew (240 255 240) peru (205 133 63) dark-magenta (139 0 139) light-coral (240 128 128) light-blue (173 216 230) brown (165 42 42) z3s5-orange (200 100 0 180) z3-title-fg-3 (0 0 0 255) lavender (230 230 250) goldenrod (218 165 32) dark-blue (0 0 139) cadet-blue (95 158 160) steel-blue (70 130 180) navajo-white (255 222 173) z3s5-error-back back maroon (128 0 0) hot-pink (255 105 180) azure (240 255 255) bisque (255 228 196) dim-gray (105 105 105) blue-violet (138 43 226) z3s5-help-entry-arg (0 0 120 255) yellow (255 255 0) papaya-whip (255 239 213) orchid (218 112 214) wheat (245 222 179) fuchsia (255 0 255) dark-sea-green (143 188 143) dark-slate-gray (47 79 79) ivory (255 255 240) sky-blue (135 206 235) z3s5-sysmsg-back back light-cyan (224 255 255) dark-green (0 100 0) ghost-white (248 248 255) lime-green (50 205 50) z3-linknum-fg (100 100 250 255) chartreuse (127 255 0) green (0 128 0) powder-blue (176 224 230) pale-violet-red (219 112 147) spring-green (0 255 127) z3-text-bg back beige (245 245 220) orange (255 165 0) dark-orange (255 140 0) pink (255 192 203) z3-title-bg-3 back cornflower-blue (100 149 237) burlywood (222 184 135) z3s5-help-text text sandy-brown (244 164 96) khaki (240 230 140) medium-purple (147 112 219) salmon (250 128 114) z3s5-help-warn-back back z3-title-bg-2 back floral-white (255 250 240) light-slate-gray (119 136 153) dark-cyan (0 139 139) light-sea-green (32 178 170) midnight-blue (25 25 112) crimson (220 20 60) dark-olive-green (85 107 47) z3-title-bg-5 back slate-blue (106 90 205) z3s5-log-error-back back forrest-green (34 139 34) z3-title-bg-0 (0 0 0 255) z3-title-bg-6 back light-green (144 238 144) black (0 0 0) z3s5-help-entry-back (0 80 0 255) deep-pink (255 20 147) dark-orchid (153 50 204) light-salmon (255 160 122) olive-drab (107 142 35) z3-link-fg (0 0 120 255) snow (255 250 250) rosy-wood (188 143 143) light-steel-blue (176 196 222) medium-blue (0 0 205) z3-text-fg (220 220 220 255) medium-violet-red (199 21 133) olive (128 128 0) pale-goldenrod (238 232 170) saddle-brown (139 69 19) dark-slate-blue (72 61 139) dark-violet (148 0 211) cornsilk (255 248 220) light-goldenrod-yellow (250 250 210) medium-spring-green (0 250 154) purple (128 0 128) lime (0 255 0) mint-cream (245 255 250)))))(sysmsg* t ("I2RGpHZ4R" (lambda (msg) (cond ((member (sys 'editmode) '(page console)) (synouty (list (list 'fg (the-color 'z3s5-sysmsg-text) (list 'bg (the-color 'z3s5-sysmsg-back) (fmt "%v\n" msg)))))) (t (log msg))))))(task-state t ("I2RGpHZ4R" (lambda (id) (cond ((task? id) (get *tasks-state* id 'undefined)) (t (error "task-state: invalid task %v" id))))))(last t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq (sub1 (len seq)))) (t (nthdef seq (sub1 (len seq)) (car default)))))))(5th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 4)) (t (nthdef seq 4 (car default)))))))(fl.atan2 t ("I2RGpHZ4R" (intrinsic 'fl.atan2)))(color t ("I2RGpHZ4R" (intrinsic 'color)))(build-list t ("I2RGpHZ4R" (lambda (n proc) (_build-list n proc nil))))(eval t ("I2RGpHZ4R" (intrinsic 'eval)))(_get t ("I2RGpHZ4R" (intrinsic '_get)))(*hooks* t ("I2RGpHZ4R" (dict '(print 3 scroll-down-pre 13 set-cursor 1 slow-irq 8 save-text 7 scroll-up-post 12 startup 15 load 4 scroll-down-post 14 draw-text 2 scroll-up-pre 11 save 6 load-text 5 shutdown 9 superslow-irq 10))))(task-run t ("I2RGpHZ4R" (lambda (id &rest args) ((lambda (silent?) (cond ((task? id) (cond ((eq? (get *tasks-state* id nil) 'running) (cond ((not silent?) (error "task-run: task %v is already running" id)) (t (void)))) (t (systask ((get *tasks* id) id))))) (t (cond ((not silent?) (error "task-run: invalid task %v" id)) (t (void)))))) (cond (args (1st args nil)))))))(new t ("I2RGpHZ4R" (macro (class &rest args) (list '_instantiate class (list 'quote args)))))(db.float t ("I2RGpHZ4R" (intrinsic 'db.float)))(sub1 t ("I2RGpHZ4R" (lambda (n) (- n 1))))(_out-help-fmt-info t ("I2RGpHZ4R" (lambda (s) (mapcar (_out-help-segment s "#" " .,:()[]{}") (lambda (x) (cond ((1st x nil) (list 'fg 'z3s5-help-entry-arg (list 'bg 'z3s5-help-back (2nd x)))) (t (list 'fg 'z3s5-help-text (list 'bg 'z3s5-help-back (2nd x))))))))))(poke t ("I2RGpHZ4R" (intrinsic 'poke)))(dict->alist t ("I2RGpHZ4R" (lambda (d) ((lambda (arr c) (dict-foreach d (lambda (k v) (array-set arr c (cons k v)) (setq c (add1 c)))) (array->list arr)) (build-array (len d) nil) 0))))(remove-hooks t ("I2RGpHZ4R" (lambda (h) ((lambda (id) (cond ((num? id) (progn (remove-hooks-internal id) t)) (t nil))) (hook h)))))(*current-error-continuation* t ("I2RGpHZ4R" (dict 'nil)))(_register-class t ("I2RGpHZ4R" (lambda (class) (set *classes* (class-name class) class))))(assoc t ("I2RGpHZ4R" (lambda (key alist) (cond (alist ((lambda (e) (cond ((cond ((cons? e) (equal? key (car e)))) e) (t (assoc key (cdr alist))))) (car alist)))))))(fl.atanh t ("I2RGpHZ4R" (intrinsic 'fl.atanh)))(add-hook-once t ("I2RGpHZ4R" (lambda (h proc) (cond ((get *hooks-added-once* h) (set *hooks-added-once* h true) (add-hook h proc)) (t nil)))))(fl.modf t ("I2RGpHZ4R" (intrinsic 'fl.modf)))(bound? t ("I2RGpHZ4R" (macro (sym) (_bound? sym))))(get-or-set t ("I2RGpHZ4R" (intrinsic 'get-or-set)))(task-send t ("I2RGpHZ4R" (lambda (id msg) (cond ((not (task? id)) (error "task-send: invalid task %v" id)) (t (void))) (set *tasks-to-msg* id (array-append (get *tasks-to-msg* id (array)) msg)))))(_isa? t ("I2RGpHZ4R" (lambda (cname li) (cond ((null? li) nil) ((eq? cname (class-name (car li))) t) (t (_isa? cname (cdr li)))))))(unprotect t ("I2RGpHZ4R" (lambda (&rest symbols) (cond ((permission? 'allow-unprotect) (list-foreach symbols _unprotect)) (t (error "unprotect: security violation - no permission to unprotect symbols!"))))))(add-hook-internal t ("I2RGpHZ4R" (intrinsic 'add-hook-internal)))(caddr t ("I2RGpHZ4R" (lambda (x) (car (cdr (cdr x))))))(assoc1 t ("I2RGpHZ4R" (lambda (sym li) (cadr (assoc sym li)))))(3rd t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 2)) (t (nthdef seq 2 (car default)))))))(bitshl t ("I2RGpHZ4R" (intrinsic 'bitshl)))(write t ("I2RGpHZ4R" (intrinsic 'write)))(blob->str t ("I2RGpHZ4R" (intrinsic 'blob->str)))(blob? t ("I2RGpHZ4R" (intrinsic 'blob?)))(fl.j1 t ("I2RGpHZ4R" (intrinsic 'fl.j1)))(push-finalizer t ("I2RGpHZ4R" (lambda (proc) (pushstacked *finalizers* (sys 'taskid) proc))))(dec.atan t ("I2RGpHZ4R" (intrinsic 'dec.atan)))(push! t ("I2RGpHZ4R" (macro (sym elem) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'array-set sym 2 (list 'cons elem (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1))))))(list->set t ("I2RGpHZ4R" (lambda (li) (alist->dict (map li (lambda (x) (list x t)))))))(_outy1 t ("I2RGpHZ4R" (lambda (te) (cond ((car te) ((lambda (G84) (cond ((member G84 '(fg)) ((lambda (fg) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (set-color 'text fg) (cond (err (*error-printer* err)) (t (void)))))) (set-color 'text (the-color (cadr te))) (outy1 (caddr te)) (pop-error-handler) (set-color 'text fg))) (color 'text))) ((member G84 '(bg)) ((lambda (bg) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (set-color 'back bg) (cond (err (*error-printer* err)) (t (void)))))) (set-color 'back (the-color (cadr te))) (outy1 (caddr te)) (pop-error-handler) (set-color 'back bg))) (color 'back))) ((member G84 '(text)) ((lambda (unstyled G85) ((lambda (G86) (setq G86 (lambda nil (cond (G85 (setq unstyled (car G85)) (out unstyled) (setq G85 (cdr G85)) (G86)) (t (void))))) (G86)) nil) (setq unstyled nil) (void)) nil (cdr te))) (t (error "unknown styled text tag: %v" (car te))))) (car te)) (void)) (t (void))))))(dec.greater-than-or-equal? t ("I2RGpHZ4R" (intrinsic 'dec.greater-than-or-equal?)))(_struct-lookup t ("I2RGpHZ4R" (lambda (k values defaults) ((lambda (v) (cond (v (cadr v)) (t (get defaults k nil)))) (assoc k values)))))(*week-ns* t 604800000000000)(array-foreach t ("I2RGpHZ4R" (lambda (arr proc) ((lambda (i G77) ((lambda (G78) (setq G78 (lambda nil (cond ((< i G77) (proc (array-ref arr i)) (setq i (+ i 1)) (G78)) (t (void))))) (G78)) nil)) 0 (array-len arr)) (void))))(the-color-names t ("I2RGpHZ4R" (lambda nil (dict->keys *colors*))))(_seq-forall? t ("I2RGpHZ4R" (lambda (seq pred n m) (cond ((< n m) (cond ((pred (nth seq n)) (_seq-forall? seq pred (add1 n) m)) (t nil))) (t t)))))(ling.jaro-winkler t ("I2RGpHZ4R" (intrinsic 'ling.jaro-winkler)))(dec.greater-than? t ("I2RGpHZ4R" (intrinsic 'dec.greater-than?)))(_setmethod t ("I2RGpHZ4R" (lambda (class mname proc) (cond ((= (functional-arity proc) 0) (error "defmethod: a method procedure must take the object as first argument, but the given procedure takes no arguments")) (t (void))) (cond ((not (class? class)) (error "defmethod: the method name class part must be a valid class name, given %v" class)) (t (void))) (set (array-ref class 4) mname proc))))(set-intersection t ("I2RGpHZ4R" (lambda (a b) ((lambda (c) (dict-foreach a (lambda (k v) (cond ((has-key? b k) (set c k t)) (t (void))))) c) (dict)))))(fl.y0 t ("I2RGpHZ4R" (intrinsic 'fl.y0)))(fl.is-nan? t ("I2RGpHZ4R" (intrinsic 'fl.is-nan?)))(kvdb._get-value t ("I2RGpHZ4R" (lambda (result no other) ((lambda (datum) (db.close-result result) datum) (cond ((db.step result) (internalize (str->expr (db.str result 0)) no)) (t other))))))(*error-printer* t ("I2RGpHZ4R" (lambda (err) (with-colors (the-color 'z3s5-error-text) (the-color 'z3s5-error-back) (lambda nil (beep 'error) (out (cond (nil (shorten err *error-printer-size-limit*)) (t err))) (out "\n"))))))(dec.from-text t ("I2RGpHZ4R" (intrinsic 'dec.from-text)))(dec.abs t ("I2RGpHZ4R" (intrinsic 'dec.abs)))(fl.j0 t ("I2RGpHZ4R" (intrinsic 'fl.j0)))(caadr t ("I2RGpHZ4R" (lambda (x) (car (car (cdr x))))))(write-binary-at t ("I2RGpHZ4R" (intrinsic 'write-binary-at)))(cdar t ("I2RGpHZ4R" (lambda (x) (cdr (car x)))))(help t ("I2RGpHZ4R" (macro (sym) (list 'cond (list (list 'has-key? '*help* (list 'quote sym)) (list '_out-help (list 'quote sym) (list 'get '*help* (list 'quote sym) nil))) (list t (list 'outy (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-help-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-help-back) (list 'fmt "Sorry, no help is available for '%v.\n" (list 'quote sym)))))))))))(stack-len t ("I2RGpHZ4R" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (len (array-ref q 2))))))(_external-str t ("I2RGpHZ4R" (lambda (arg) (cond ((can-externalize? arg) ((lambda (s e) (setq s (stropen (_external arg))) (setq e (car (readall s))) (close s) e) nil nil)) (t arg)))))(sysdir t ("I2RGpHZ4R" (intrinsic 'sysdir)))(defclass t ("I2RGpHZ4R" (macro (name supers &rest slots) ((lambda (c) (list 'let (list (list c (list '_make-class (list 'quote name) (list 'if (list 'list? (list 'quote supers)) (list 'quote supers) (list 'list (list 'quote supers))) (list 'quote slots)))) (list 'setq name c) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "?")) (list 'lambda (list 'obj) (list 'and (list 'object? 'obj) (list 'let (list (list 'c (list 'class-of 'obj))) (list 'if 'c (list 'eq? (list 'class-name 'c) (list 'quote name)) nil))))) (list '_register-class name) (list 'dict-foreach (list 'array-ref c 4) (list 'lambda (list 'k 'v) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "-" (list 'sym->str 'k))) 'v))))) (gensym)))))(set-equal? t ("I2RGpHZ4R" (lambda (a b) (dict-key-equal? a b))))(recollect t ("I2RGpHZ4R" (lambda (term &rest opt) (kvdb.search *remember-db* term (1st opt 'all) (2nd opt kvdb.*default-search-limit*) (3rd opt nil)))))(fl.cosh t ("I2RGpHZ4R" (intrinsic 'fl.cosh)))(semver.compare t ("I2RGpHZ4R" (intrinsic 'semver.compare)))(open t ("I2RGpHZ4R" (intrinsic 'open)))(ling.levenshtein t ("I2RGpHZ4R" (intrinsic 'ling.levenshtein)))(set-complement t ("I2RGpHZ4R" (lambda (a b) ((lambda (c) (dict-foreach b (lambda (k v) (cond ((not (has-key? a k)) (set c k t)) (t (void))))) c) (dict)))))(dec.new t ("I2RGpHZ4R" (intrinsic 'dec.new)))(macro? t ("I2RGpHZ4R" (intrinsic 'macro?)))(dec.round-bank t ("I2RGpHZ4R" (intrinsic 'dec.round-bank)))(expr->str t ("I2RGpHZ4R" (intrinsic 'expr->str)))(fl.sinh t ("I2RGpHZ4R" (intrinsic 'fl.sinh)))(setcdr t ("I2RGpHZ4R" (intrinsic 'rplacd)))(_run-zimage t ("I2RGpHZ4R" (lambda (fi) ((lambda (header) (load-zimage fi) ((eval (2nd (assoc 'entry header) (lambda nil (void)))))) (zimage-header fi)))))(seq? t ("I2RGpHZ4R" (lambda (seq) (cond ((array? seq)) ((cond ((list? seq)) ((str? seq))))))))(dump-bindings t ("I2RGpHZ4R" (intrinsic 'dump-bindings)))(>= t ("I2RGpHZ4R" (lambda (x y) (not (< x y)))))(_str-join t ("I2RGpHZ4R" (lambda (fields sep acc) (cond ((null? fields) (cond ((str-empty? acc) "") (t (str-slice acc 0 (- (strlen acc) (strlen sep)))))) (t (_str-join (cdr fields) sep (str+ acc (car fields) sep)))))))(dec.sub t ("I2RGpHZ4R" (intrinsic 'dec.sub)))(str-reverse t ("I2RGpHZ4R" (intrinsic 'str-reverse)))(day+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *day-ns* delta))))))(index t ("I2RGpHZ4R" (lambda (seq elem &rest pred) (_index seq elem 0 (len seq) (cond (pred (car pred)) (t eq?))))))(*minute-ns* t 60000000000)(prin1 t ("I2RGpHZ4R" (intrinsic 'prin1)))(num? t ("I2RGpHZ4R" (intrinsic 'num?)))(member t ("I2RGpHZ4R" (lambda (key x) (cond ((null? x) nil) ((equal? key (car x)) x) (t (member key (cdr x)))))))(load t ("I2RGpHZ4R" (lambda (prefix &rest fi) (cond ((null? fi) (_load prefix (str+ (sysdir 'z3s5-data) "/prg/" (sym->str prefix) "/" (sym->str prefix) ".lisp"))) (t (apply _load (cons prefix fi)))))))(_external? t ("I2RGpHZ4R" (intrinsic '_external?)))(minute+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *minute-ns* delta))))))(rndseed t ("I2RGpHZ4R" (intrinsic 'rndseed)))(externalize t ("I2RGpHZ4R" (lambda (arg &rest rest) ((lambda (nonce) (externalize* arg nonce)) (1st rest nil)))))(_protect t ("I2RGpHZ4R" (intrinsic '_protect)))(kvdb._query t ("I2RGpHZ4R" (lambda (db s table column limit fuzzer converter getter all?) ((lambda (fuzzy? fuzz) (setq fuzzy? (cond ((functional? fuzzer) (= (functional-arity fuzzer) 1)))) (setq fuzz (cond (fuzzy? fuzzer) (t (lambda (s) s)))) (kvdb._get-all (cond (all? (db.query (2nd db) (fmt "select %v from %v limit ?;" table column) limit)) (t (db.query (2nd db) (fmt "select %v from %v where %v match ? limit ?;" table column column) (fuzz s) limit))) converter getter nil)) nil nil))))(str-remove-number t ("I2RGpHZ4R" (lambda (s &rest opt) ((lambda (fields) (cond ((num? (str->expr (last fields))) (str-join (reverse (cdr (reverse fields))) (cond (opt (1st opt)) (t " ")))) (t s))) (array->list (strsplit s (cond (opt (1st opt)) (t " "))))))))(run-hook-internal t ("I2RGpHZ4R" (intrinsic 'run-hook-internal)))(kvdb.open t ("I2RGpHZ4R" (lambda (&rest fi) ((lambda (db) (kvdb._init db) ((lambda (n c) (db.exec db "begin;") (kvdb._set-nonce db n) (kvdb._set-counter db (add1 c)) (db.exec db "commit;") (array 'kvdb db n)) (kvdb._get-nonce db) (kvdb._get-counter db))) (apply db.open fi)))))(strless t ("I2RGpHZ4R" (intrinsic 'strless)))(*sync-wait-upper-bound* t 2000)(defmacro t ("I2RGpHZ4R" (macro (name args &rest body) (list 'progn (list 'setq name (cons 'macro (cons args body))) (list 'quote name)))))(task-recv t ("I2RGpHZ4R" (lambda (id) (cond ((not (task? id)) (error "task-recv: invalid task %v" id)) (t ((lambda (arr msg? msg) (setq arr (get *tasks-to-msg* id nil)) (setq msg? (cond (arr (cond ((array? arr) (>= (len arr) 1)))))) (setq msg (cond (msg? (array-ref arr 0)) (t nil))) (cond (msg? (set *tasks-to-msg* id (array-slice arr 1 (len arr)))) (t (void))) msg) nil nil nil))))))(set* t ("I2RGpHZ4R" (intrinsic 'set*)))(ling.jaro t ("I2RGpHZ4R" (intrinsic 'ling.jaro)))(dict-unprotect t ("I2RGpHZ4R" (intrinsic 'dict-unprotect)))(datestr t ("I2RGpHZ4R" (lambda (d) (cond ((null? (cdr d)) (fmt "%v-%v-%v" (caar d) (cadar d) (caddr (car d)))) (t (fmt "%v-%v-%v %v:%02v" (caar d) (cadar d) (caddr (car d)) (caadr d) (cadr (cadr d))))))))(str-ref t ("I2RGpHZ4R" (intrinsic 'str-ref)))(mutex-rlock t ("I2RGpHZ4R" (intrinsic 'mutex-rlock)))(odd? t ("I2RGpHZ4R" (lambda (x) (not (even? x)))))(dec.sum t ("I2RGpHZ4R" (intrinsic 'dec.sum)))(db.close t ("I2RGpHZ4R" (intrinsic 'db.close)))(with-colors t ("I2RGpHZ4R" (lambda (f b proc) ((lambda (fg bg) (try ((set-color 'text fg) (set-color 'back bg)) (set-color 'text (the-color f)) (set-color 'back (the-color b)) (proc))) (color 'text) (color 'back)))))(hour+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *hour-ns* delta))))))(semver.max t ("I2RGpHZ4R" (intrinsic 'semver.max)))(pop! t ("I2RGpHZ4R" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result)))))))(lighten t ("I2RGpHZ4R" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_lighten-delta c (cond (amount (car amount)) (t 30)))) (list (min (+ (1st c 180) delta) 255) (min (+ (2nd c 180) delta) 255) (min (+ (3rd c 180) delta) 255) (4th c))) nil nil))))(error? t ("I2RGpHZ4R" (intrinsic 'error?)))(dec.str-fixed-bank t ("I2RGpHZ4R" (intrinsic 'dec.str-fixed-bank)))(*sqrte* t 1.6487212707001282)(seek t ("I2RGpHZ4R" (intrinsic 'seek)))(kvdb.*vacuum-modulo* nil 997)(fl.jn t ("I2RGpHZ4R" (intrinsic 'fl.jn)))(bitor t ("I2RGpHZ4R" (intrinsic 'bitor)))(gensym t ("I2RGpHZ4R" (intrinsic 'gensym)))(dec.str t ("I2RGpHZ4R" (intrinsic 'dec.str)))(task-schedule t ("I2RGpHZ4R" (lambda (id) (cond ((not (task? id)) (error "task-schedule: not a valid task %v" id)) (t (void))) (cond ((>= *running-tasks* (cpunum)) (progn (mutex-lock (array-ref *scheduled-tasks* 1)) (array-set *scheduled-tasks* 2 (_append (array-ref *scheduled-tasks* 2) (list id))) (mutex-unlock (array-ref *scheduled-tasks* 1)))) (t (task-run id))))))(*custom-hooks* t ("I2RGpHZ4R" (dict 'nil)))(true t ("I2RGpHZ4R" t))(remove-hook t ("I2RGpHZ4R" (lambda (h id2) ((lambda (id1) (cond ((num? id1) (progn (remove-hook-internal id1 id2) t)) (t nil))) (hook h)))))(fl.gamma t ("I2RGpHZ4R" (intrinsic 'fl.gamma)))(fl.erf t ("I2RGpHZ4R" (intrinsic 'fl.erf)))(kvdb._set t ("I2RGpHZ4R" (lambda (db key value info fuzzer) (cond ((num? key) (cond ((< key 1) (error "kvdb.set: key must be a positive integer, given %v" key)) (t (db.exec (2nd db) "insert or replace into IntData(Id,Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" (truncate key) (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now)))) (db.exec (2nd db) "insert or replace into IntFts(Id,Value,Info,Fuzzy,Modified) Values(?,?,?,?,?);" (truncate key) (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now))))))) ((sym? key) (db.exec (2nd db) "insert or replace into SymData(Slot, Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" (sym->str key) (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now)))) (db.exec (2nd db) "insert or replace into SymFts(Slot, Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" (sym->str key) (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now))))) ((str? key) (db.exec (2nd db) "insert or replace into StrData(Slot, Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" key (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now)))) (db.exec (2nd db) "insert or replace into StrFts(Slot, Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" key (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now))))) (t (db.exec (2nd db) "insert or replace into ExprData(Slot, Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" (expr->str (externalize key (3rd db))) (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now)))) (db.exec (2nd db) "insert or replace into ExprFts(Slot, Value, Info, Fuzzy, Modified) Values(?,?,?,?,?);" (expr->str (externalize key (3rd db))) (expr->str (externalize value (3rd db))) info (fuzzer info) (expr->str (datestr* (now)))))))))(nconc t ("I2RGpHZ4R" (lambda (&rest lists) (cond ((null? (cdr lists)) (car lists)) (t (cond ((null? (car lists)) (apply nconc (cdr lists))) (t (setcdr (list-last (car lists)) (apply nconc (cdr lists))) (car lists))))))))(array t ("I2RGpHZ4R" (intrinsic 'array)))(kvdb.forget-everything t ("I2RGpHZ4R" (lambda (db) (db.exec (2nd db) "delete from IntData;") (db.exec (2nd db) "delete from IntFts;") (db.exec (2nd db) "delete from StrData;") (db.exec (2nd db) "delete from StrFts;") (db.exec (2nd db) "delete from SymData;") (db.exec (2nd db) "delete from SymFts;") (db.exec (2nd db) "delete from ExprData;") (db.exec (2nd db) "delete from ExprFts;"))))(fl.exp t ("I2RGpHZ4R" (intrinsic 'fl.exp)))(fl.ilogb t ("I2RGpHZ4R" (intrinsic 'fl.ilogb)))(strbuild t ("I2RGpHZ4R" (intrinsic 'strbuild)))(sort-symbols t ("I2RGpHZ4R" (lambda (li) (sort li (lambda (x y) (strless (sym->str x) (sym->str y)))))))(_readall t ("I2RGpHZ4R" (lambda (n acc) ((lambda (datum) (cond ((eof? datum) acc) (t (_readall n (cons datum acc))))) (read n)))))(queue-len t ("I2RGpHZ4R" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (len (array-ref q 2))))))(nth t ("I2RGpHZ4R" (lambda (seq n) (cond ((array? seq) (array-ref seq n)) ((list? seq) (list-ref seq n)) ((str? seq) (str-ref seq n)) (t (error "ref - not a sequence: %v" seq))))))(task? t ("I2RGpHZ4R" (lambda (id) (cond (*tasks* (cond ((get *tasks* id nil) t) (t nil)))))))(week+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *week-ns* delta))))))(_index t ("I2RGpHZ4R" (lambda (seq elem idx n pred) (cond ((= idx n) -1) ((pred (nth seq idx) elem) idx) (t (_index seq elem (add1 idx) n pred))))))(sleep t ("I2RGpHZ4R" (intrinsic 'sleep)))(call-method t ("I2RGpHZ4R" (lambda (obj name args) (apply (get (array-ref (class-of obj) 4) name) (cons obj args)))))(mkdir t ("I2RGpHZ4R" (intrinsic 'mkdir)))(let t ("I2RGpHZ4R" (macro (args &rest body) ((lambda (vars vals) (progn (setq vars (lambda (x) (cond (x (cons (cond ((atom? (car x)) (car x)) (t (caar x))) (vars (cdr x))))))) 'vars) (progn (setq vals (lambda (x) (cond (x (cons (cond ((atom? (car x)) nil) (t (cadar x))) (vals (cdr x))))))) 'vals) (cons (cons 'lambda (cons (vars args) body)) (vals args))) nil nil))))(fl.yn t ("I2RGpHZ4R" (intrinsic 'fl.yn)))(queue-empty? t ("I2RGpHZ4R" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (null? (array-ref q 2))))))(fl.expm1 t ("I2RGpHZ4R" (intrinsic 'fl.expm1)))(_build-list t ("I2RGpHZ4R" (lambda (n proc acc) (cond ((= n 0) acc) (t (_build-list (sub1 n) proc (cons (proc n) acc)))))))(make-queue t ("I2RGpHZ4R" (lambda nil (array 'queue (make-mutex) nil))))(kvdb._when t ("I2RGpHZ4R" (lambda (db key other) (cond ((num? key) (kvdb._get-value (db.query (2nd db) "select distinct Modified from IntData where Id = ?;" key) (3rd db) other)) ((sym? key) (kvdb._get-value (db.query (2nd db) "select distinct Modified from SymData where Slot = ?;" (sym->str key)) (3rd db) other)) ((str? key) (kvdb._get-value (db.query (2nd db) "select distinct Modified from StrData where Slot = ?;" key) (3rd db) other)) (t (kvdb._get-value (db.query (2nd db) "select distinct Modified from ExprData where Slot = ?;" (expr->str (externalize key (3rd db)))) (3rd db) other))))))(truncate t ("I2RGpHZ4R" (intrinsic 'truncate)))(*pi* t 3.141592653589793)(enq t ("I2RGpHZ4R" (intrinsic 'enq)))(db.row t ("I2RGpHZ4R" (intrinsic 'db.row)))(cdaar t ("I2RGpHZ4R" (lambda (x) (cdr (car (car x))))))(cst! t ("I2RGpHZ4R" (intrinsic 'cst!)))(sys t ("I2RGpHZ4R" (intrinsic 'sys)))(warn t ("I2RGpHZ4R" (lambda (msg &rest args) (with-colors (the-color 'z3s5-warn-text) (the-color 'z3s5-warn-back) (lambda nil ((lambda (m) (print (fmt "*** warning ***%v" m)) (out "*** warning *** ") (out m) (nl)) (cond (args (apply fmt (cons msg args))) (t msg))))))))(kvdb.search t ("I2RGpHZ4R" (lambda (db s &rest opt) (kvdb._search db s (1st opt 'all) (2nd opt kvdb.*default-search-limit*) (3rd opt nil) (cond ((equal? s "")) ((cond ((equal? s "*")) ((equal? s "%")))))))))(set->list t ("I2RGpHZ4R" (lambda (s) (map (dict->alist s) (lambda (x) (car x))))))(iterate t ("I2RGpHZ4R" (lambda (it proc) ((lambda (i G82) ((lambda (G83) (setq G83 (lambda nil (cond ((< i G82) (proc (it i)) (setq i (+ i 1)) (G83)) (t (void))))) (G83)) nil)) 0 (it)))))(dec.from-json t ("I2RGpHZ4R" (intrinsic 'dec.from-json)))(random-color t ("I2RGpHZ4R" (lambda (&rest alpha) (list (rand 0 0 255) (rand 0 0 255) (rand 0 0 255) (1st alpha 255)))))(- t ("I2RGpHZ4R" (intrinsic '-)))(time t ("I2RGpHZ4R" (intrinsic 'time)))(fl.log1p t ("I2RGpHZ4R" (intrinsic 'fl.log1p)))(fl.erfcinv t ("I2RGpHZ4R" (intrinsic 'fl.erfcinv)))(closure? t ("I2RGpHZ4R" (intrinsic 'closure?)))(*custom-hook-counter* t 0)(dict t ("I2RGpHZ4R" (intrinsic 'dict)))(strleft t ("I2RGpHZ4R" (lambda (s n) (str+ s (strbuild " " (- n (len s)))))))(proc? t ("I2RGpHZ4R" (lambda (sym) (cond ((intrinsic? sym)) ((closure? sym))))))(dec.min t ("I2RGpHZ4R" (intrinsic 'dec.min)))(when t ("I2RGpHZ4R" (macro (test &rest then) (cons 'cond (cons (cons test then) (cond (t (list (list t (list 'void))))))))))(add-hook t ("I2RGpHZ4R" (lambda (h proc) ((lambda (id) (cond ((num? id) (add-hook-internal id proc)) (t nil))) (hook h)))))(_pop-current-lib t ("I2RGpHZ4R" (lambda nil (void (setq *_current-lib* (cdr *_current-lib*))))))(new-struct t ("I2RGpHZ4R" (lambda (name props) ((lambda (ali c) (array '%struct name (alist->dict ali) (alist->dict (map ali (lambda (x) (setq c (add1 c)) (cons (1st x) c)))) (len props))) (map props (lambda (x) (cond ((list? x) (cons (car x) (cadr x))) (t (cons x nil))))) 1))))(dec.str-fixed t ("I2RGpHZ4R" (intrinsic 'dec.str-fixed)))(array-exists? t ("I2RGpHZ4R" (lambda (seq pred) (_seq-exists? seq pred 0 (array-len seq)))))(wait-for* t ("I2RGpHZ4R" (lambda (dict key timeout) (_wait-for* dict key timeout (now-ns)))))(kvdb.db? t ("I2RGpHZ4R" (lambda (db) (cond ((array? db) (cond ((equal? (1st db nil) 'kvdb) (cond ((boxed? (2nd db nil)) (str? (3rd db nil)))))))))))(declare-volatile t ("I2RGpHZ4R" (lambda (sym) (set *volatile-toplevel-symbols* sym t))))(unless t ("I2RGpHZ4R" (macro (test &rest then) (cons 'cond (cons (cons (list 'not test) then) (cond (t (list (list t (list 'void))))))))))(_push-current-lib t ("I2RGpHZ4R" (lambda (lib) (setq *_current-lib* (cons lib *_current-lib*)))))(kvdb.forget t ("I2RGpHZ4R" (lambda (db key) (cond ((num? key) (db.exec (2nd db) "delete from IntData where Id = ?;" key)) ((sym? key) (db.exec (2nd db) "delete from SymData where Slot = ?;" (sym->str key))) ((str? key) (db.exec (2nd db) "delete from StrData where Slot = ?;" key)) (t (db.exec (2nd db) "delete from ExprData where Slot = ?;" (expr->str (externalize key (3rd db)))))))))(dec.mul t ("I2RGpHZ4R" (intrinsic 'dec.mul)))(cinc! t ("I2RGpHZ4R" (intrinsic 'cinc!)))(_load t ("I2RGpHZ4R" (lambda (prefix &rest fi) (cond ((not (sym? prefix)) (error "load - symbol required as prefix, given %v" prefix)) (t (void))) (_push-current-lib prefix) ((lambda (io table) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (cond (io (close io)) (t (void))) (cond (err (*error-printer* err)) (t (void)))))) (setq io (apply open fi)) (_include-library io (void) table) (pop-error-handler) (cond (io (close io)) (t (void))))) nil (dict)) (_pop-current-lib))))(*smallest-nonzero-float32* t 1.401298464324817e-45)(str-forall? t ("I2RGpHZ4R" (lambda (s pred) ((lambda (c) (_seq-forall? c pred 0 (array-len c))) (str->chars s)))))(strsplit t ("I2RGpHZ4R" (intrinsic 'strsplit)))(_instantiate t ("I2RGpHZ4R" (lambda (class slots) (array '%object (class-name class) ((lambda (d) (foreach slots (lambda (slot) (cond ((not (list? slot)) (error "new: class %v, slots argument must be an alist, given %v with incorrect slot %v")) (t (void))) (set d (car slot) (cadr slot)))) d) (_merge-class-dicts 3 (cons class (array-ref class 2)))) (gensym)))))(list-ref t ("I2RGpHZ4R" (intrinsic 'list-ref)))(forget t ("I2RGpHZ4R" (lambda (k) (kvdb.forget *remember-db* k))))(int t ("I2RGpHZ4R" (intrinsic 'int)))(fl.asin t ("I2RGpHZ4R" (intrinsic 'fl.asin)))(dec.round-cash t ("I2RGpHZ4R" (intrinsic 'dec.round-cash)))(*phi* t 1.618033988749895)(read-binary t ("I2RGpHZ4R" (intrinsic 'read-binary)))(dict-copy t ("I2RGpHZ4R" (intrinsic 'dict-copy)))(fl.lgamma t ("I2RGpHZ4R" (intrinsic 'fl.lgamma)))(and t ("I2RGpHZ4R" (macro (x &rest y) (cond ((null? y) x) (t (list 'cond (list x (cons 'and y))))))))(ccmp t ("I2RGpHZ4R" (intrinsic 'ccmp)))(lcons t ("I2RGpHZ4R" (lambda (datum li) (nreverse (cons datum (nreverse li))))))(dec.round t ("I2RGpHZ4R" (intrinsic 'dec.round)))(kvdb._get-counter t ("I2RGpHZ4R" (lambda (db) ((lambda (result) (cond ((db.step result) ((lambda (n) (db.close-result result) n) (db.int result 0))) (t (db.close-result result) 0))) (db.query db "SELECT (Value) FROM Internal WHERE id=2 LIMIT 1;")))))(has-key? t ("I2RGpHZ4R" (intrinsic 'has-key?)))(chars->str t ("I2RGpHZ4R" (intrinsic 'chars->str)))(print-start-banner t ("I2RGpHZ4R" (lambda nil ((lambda (tc bc) (set-color 'text (the-color 'z3s5-sysmsg-text)) (out "Welcome to ") (set-color 'back (the-color 'z3s5-orange)) (set-color 'text (the-color 'z3s5-blue)) (out "Z3S5 Lisp") (set-color 'back bc) (set-color 'text (the-color 'z3s5-sysmsg-text)) (out " on \"") (out (5th (sys 'version nil) "localhost")) (out "\" (") (out (caddr (sys 'version nil))) (out ")") (out " with ") (out (cadr (sys 'version nil))) (out " cores!\n") (out "The session started on ") (out (datestr (now))) (out " UTC.\n") (out "Enter (exit) to close the session. Happy hacking!\n")) (color 'text) (color 'back)))))(_seq-exists? t ("I2RGpHZ4R" (lambda (seq pred n m) (cond ((< n m) (cond ((pred (nth seq n)) t) (t (_seq-exists? seq pred (add1 n) m)))) (t nil)))))(fl.ldexp t ("I2RGpHZ4R" (intrinsic 'fl.ldexp)))(set-element? t ("I2RGpHZ4R" (lambda (s elem) (has-key? s elem))))(list->str t ("I2RGpHZ4R" (lambda (li) (array->str (list->array li)))))(dict-key-subset? t ("I2RGpHZ4R" (intrinsic 'dict-key-subset?)))(bitclear t ("I2RGpHZ4R" (intrinsic 'bitclear)))(*log10e* t 0.43429448190325176)(_bound? t ("I2RGpHZ4R" (intrinsic '_bound?)))(expand-macros t ("I2RGpHZ4R" (intrinsic 'expand-macros)))(file-port? t ("I2RGpHZ4R" (intrinsic 'file-port?)))(dict-map t ("I2RGpHZ4R" (lambda (d proc) ((lambda (cp) (dict-map! cp proc) cp) (dict-copy d)))))(dict->keys t ("I2RGpHZ4R" (lambda (d) ((lambda (li) (dict-foreach d (lambda (k v) (setq li (cons k li)))) li) nil))))(fl.inf t ("I2RGpHZ4R" (intrinsic 'fl.inf)))(fl.nan t ("I2RGpHZ4R" (intrinsic 'fl.nan)))(_wait-for-empty* t ("I2RGpHZ4R" (lambda (dict key timeout first-time) (cond ((cond ((has-key? dict key) (cond ((>= timeout 0) (< (- (now-ns) first-time) timeout)) (t t)))) (sleep-ns (rand 0 *sync-wait-lower-bound* *sync-wait-upper-bound*)) (_wait-for-empty* dict key timeout first-time)) (t (void))))))(protected? t ("I2RGpHZ4R" (intrinsic 'protected?)))(_out-help-warn-maybe t ("I2RGpHZ4R" (lambda (msg) (cond ((str? msg) (list 'fg (the-color 'z3s5-error-text) (list 'bg (the-color 'z3s5-error-back) (str+ " WARNING: " (strcase msg 'upper))))) (t nil)))))(functional? t ("I2RGpHZ4R" (lambda (sym) (cond ((proc? sym)) ((macro? sym))))))(str? t ("I2RGpHZ4R" (intrinsic 'str?)))(cd t ("I2RGpHZ4R" (intrinsic 'cd)))(write-string t ("I2RGpHZ4R" (intrinsic 'write-string)))(dict->array t ("I2RGpHZ4R" (intrinsic 'dict->array)))(fl.fma t ("I2RGpHZ4R" (intrinsic 'fl.fma)))(_run-at-date->ns t ("I2RGpHZ4R" (lambda (date repeater) ((lambda (t0) (cond ((list? date) (last (2nd date))) ((equal? date 'now) t0) ((equal? date 'next-minute) (+ t0 *minute-ns*)) ((equal? date 'skip) (cond (repeater (repeater -1 t0)) (t t0))) ((equal? date 'next-quarter) (+ t0 *quarter-ns*)) ((equal? date 'next-halfhour) (+ t0 *halfhour-ns*)) ((equal? date 'next-hour) (+ t0 *hour-ns*)) ((equal? date 'in-2-hours) (+ t0 (* 2 *hours-ns*))) ((equal? date 'in-3-hours) (+ t0 (* 3 *hours-ns*))) ((equal? date 'tomorrow) (+ t0 *day-ns*)) ((equal? date 'next-week) (+ t0 (* *day-ns* 7))) ((equal? date 'next-month) ((lambda (d Y M D h m s) (setq d (now)) (setq Y (1st (1st d))) (setq M (2nd (1st d))) (setq D (3rd (1st d))) (setq h (1st (2nd d))) (setq m (2nd (2nd d))) (setq s (3rd (2nd d))) (date->epoch-ns Y (add1 M) D h m s 0)) nil nil nil nil nil nil nil)) ((equal? date 'next-year) ((lambda (d Y M D h m s) (setq d (now)) (setq Y (1st (1st d))) (setq M (2nd (1st d))) (setq D (3rd (1st d))) (setq h (1st (2nd d))) (setq m (2nd (2nd d))) (setq s (3rd (2nd d))) (date->epoch-ns (add1 Y) M D h m s 0)) nil nil nil nil nil nil nil)))) (now-ns)))))(str->list t ("I2RGpHZ4R" (lambda (s) (array->list (str->array s)))))(memstats t ("I2RGpHZ4R" (intrinsic 'memstats)))(port? t ("I2RGpHZ4R" (intrinsic 'port?)))(10th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 9)) (t (nthdef seq 9 (car default)))))))(str-index t ("I2RGpHZ4R" (lambda (s chars &rest pos) (_str-index s chars (cond ((null? pos) 0) (t (car pos))) (strlen s)))))(*z3s5-version* t "2.3.8+076af0c")(_library-transform t ("I2RGpHZ4R" (lambda (table prefix datum) (cond ((sym? datum) (cond ((global-sym? datum) datum) (t (getstacked table datum datum)))) ((not (list? datum)) datum) ((null? datum) datum) ((equal? (car datum) 'progn) (cons 'progn (_library-transform table prefix (cdr datum)))) ((equal? (car datum) 'quote) datum) ((equal? (car datum) 'lambda) (foreach (2nd datum nil) (lambda (ident) (pushstacked table ident ident))) ((lambda (lambda-term) (foreach (2nd datum nil) (lambda (ident) (popstacked table ident ident))) lambda-term) (cons 'lambda (cons (cadr datum) (_library-transform table prefix (cddr datum)))))) (t (cons (_library-transform table prefix (car datum)) (_library-transform table prefix (cdr datum))))))))(str-replace* t ("I2RGpHZ4R" (intrinsic 'str-replace*)))(struct-props t ("I2RGpHZ4R" (lambda (s) (3rd s (dict)))))(filter t ("I2RGpHZ4R" (lambda (li pred) ((lambda (filter-aux) (setq filter-aux (lambda (li acc) (cond ((not li) (nreverse acc)) ((pred (car li)) (filter-aux (cdr li) (cons (car li) acc))) (t (filter-aux (cdr li) acc))))) (filter-aux li nil)) nil))))(memq t ("I2RGpHZ4R" (lambda (key x) (cond ((null? x) nil) ((eq? key (car x)) x) (t (memq key (cdr x)))))))(kvdb.close t ("I2RGpHZ4R" (lambda (db) (db.exec (2nd db) "pragma optimize;") (db.close (2nd db)))))(dec.max t ("I2RGpHZ4R" (intrinsic 'dec.max)))(cdr t ("I2RGpHZ4R" (intrinsic 'cdr)))(dec.pow t ("I2RGpHZ4R" (intrinsic 'dec.pow)))(char->str t ("I2RGpHZ4R" (intrinsic 'char->str)))(zimage-loadable? t ("I2RGpHZ4R" (lambda (fi) ((lambda (in header) (setq in (open fi)) (setq header (read in)) (close in) (cond ((equal? (1st header nil) 'z3s5-image) (>= (semver.compare (1st (sys 'version "v0.0")) (2nd (assoc 'min-version header) "v0.1")) 0)))) nil nil))))(supers t ("I2RGpHZ4R" (lambda (c) (cond ((not (class? c)) (error "supers: expected class, given %v" c)) (t (void))) (map (array-ref c 2) (lambda (x) (cond ((list? x) (car x)) (t x)))))))(defun t ("I2RGpHZ4R" (macro (name args &rest body) (list 'progn (list 'setq name (cons 'lambda (cons args body))) (list 'quote name)))))(setsys t ("I2RGpHZ4R" (intrinsic 'setsys)))(dec.neg t ("I2RGpHZ4R" (intrinsic 'dec.neg)))(sleep-ns t ("I2RGpHZ4R" (intrinsic 'sleep-ns)))(set-volume t ("I2RGpHZ4R" (intrinsic 'set-volume)))(str->char t ("I2RGpHZ4R" (intrinsic 'str->char)))(bitxor t ("I2RGpHZ4R" (intrinsic 'bitxor)))(epoch-ns->datelist t ("I2RGpHZ4R" (intrinsic 'epoch-ns->datelist)))(strlen t ("I2RGpHZ4R" (intrinsic 'strlen)))(% t ("I2RGpHZ4R" (intrinsic '%)))(rplaca t ("I2RGpHZ4R" (intrinsic 'rplaca)))(dec.avg t ("I2RGpHZ4R" (intrinsic 'dec.avg)))(darken t ("I2RGpHZ4R" (lambda (col &rest amount) ((lambda (c delta) (setq c (the-color col)) (setq delta (_darken-delta c (cond (amount (car amount)) (t 30)))) (list (max (- (1st c) delta) 0) (max (- (2nd c) delta) 0) (max (- (3rd c) delta) 0) (4th c))) nil nil))))(fl.log10 t ("I2RGpHZ4R" (intrinsic 'fl.log10)))(case t ("I2RGpHZ4R" (macro (test &rest cases) ((lambda (sym clauses) (setq sym (gensym)) (setq clauses (mapcar cases (lambda (x) (cond ((cond ((equal? (car x) 'true)) ((cond ((equal? (car x) 't)) ((equal? (car x) 'else))))) x) ((atom? (car x)) (cons (list 'equal? sym (list 'quote (car x))) (cdr x))) (t (cons (list 'member sym (list 'quote (car x))) (cdr x))))))) (list 'let (list (list sym test)) (cons 'cond clauses))) nil nil))))(while t ("I2RGpHZ4R" (macro (test &rest body) ((lambda (loop) (list 'letrec (list (list loop (list 'lambda nil (list 'cond (_append (cons test body) (list (list loop))) (list t (list 'void)))))) (list loop))) (gensym)))))(make-set t ("I2RGpHZ4R" (lambda (&rest opt) (list->set opt))))(array-set t ("I2RGpHZ4R" (intrinsic 'array-set)))(*smallest-nonzero-float64* t 5e-324)(blob->base64 t ("I2RGpHZ4R" (intrinsic 'blob->base64)))(dec.sin t ("I2RGpHZ4R" (intrinsic 'dec.sin)))(dict-protected? t ("I2RGpHZ4R" (intrinsic 'dict-protected?)))(stack? t ("I2RGpHZ4R" (lambda (sym) (cond ((not (array? sym)) nil) ((< (len sym) 2) nil) ((not (mutex? (array-ref sym 1))) nil) (t (equal? (array-ref sym 0) 'stack))))))(seekable? t ("I2RGpHZ4R" (intrinsic 'seekable?)))(*error-handler* t ("I2RGpHZ4R" (dict '(0 (lambda (err) (setq *last-error* err) (*error-printer* err))))))(str-port? t ("I2RGpHZ4R" (intrinsic 'str-port?)))(rand t ("I2RGpHZ4R" (intrinsic 'rand)))(_testidx t ("I2RGpHZ4R" (lambda nil (get *testinfo* 'count 0))))(_str-segment t ("I2RGpHZ4R" (lambda (s sc ec acc) ((lambda (start) (cond ((not start) (_append acc (list (list nil s)))) (t ((lambda (end) (cond ((cond ((not end)) ((<= end start))) (_append acc (list (list nil (slice s 0 start)) (list t (slice s start (len s)))))) (t (_str-segment (slice s (add1 end) (len s)) sc ec (_append acc (list (list nil (slice s 0 start)) (list t (slice s start (add1 end))))))))) (str-index s ec (add1 start)))))) (str-index s sc)))))(mod t ("I2RGpHZ4R" (intrinsic 'mod)))(array-append t ("I2RGpHZ4R" (intrinsic 'array-append)))(list-exists? t ("I2RGpHZ4R" (lambda (li pred) (cond ((null? li) nil) ((pred (car li)) t) (t (list-exists? (cdr li) pred))))))(mutex-runlock t ("I2RGpHZ4R" (intrinsic 'mutex-runlock)))(_out-help1 t ("I2RGpHZ4R" (lambda (sym info) (outy (_append (cons (list 'fg 'z3s5-help-entry-text (list 'bg 'z3s5-help-entry-back (cond ((_help-is-functional (cadr (assoc 'type info))) (fmt "%v : %v/%v\n" (_help-use info) (_help-type-to-str (cadr (assoc 'type info))) (_help-arity-to-str (cadr (assoc 'arity info))))) (t (fmt "%v : %v\n" (_help-use info) (_help-type-to-str (cadr (assoc 'type info)))))))) (_out-help-fmt-info (cadr (assoc 'info info)))) (list (list 'fg 'z3s5-help-text (list 'bg 'z3s5-help-back (fmt " See also: %v." (_help-see-to-str (cadr (assoc 'see info)))))) (_out-help-warn-maybe (cadr (assoc 'warn info))) (list 'text "\n")))))))(class-name t ("I2RGpHZ4R" (lambda (c) (cond ((not (class? c)) (error "class-name: expected class, given %v" c)) (t (void))) (array-ref c 1))))(remove-hooks-internal t ("I2RGpHZ4R" (intrinsic 'remove-hooks-internal)))(dec.float t ("I2RGpHZ4R" (intrinsic 'dec.float)))(nreverse t ("I2RGpHZ4R" (lambda (list) (cond (list (_nreverse list nil))))))(year+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns (list (list (+ (1st (1st ti)) delta) (2nd (1st ti) 1) (3rd (1st ti) 1)) (list (1st (2nd ti nil) 12) (2nd (2nd ti nil) 0) (3rd (2nd ti nil) 0) (4th (2nd ti nil) 0)))))))))(help-topics t ("I2RGpHZ4R" (lambda nil ((lambda (d) (dict-foreach *help* (lambda (k v) ((lambda (li) (cond ((not (null? li)) (foreach (car li) (lambda (topic) (set d topic t)))) (t (void)))) (cdr (assoc 'topic v))))) (sort-symbols (dict->keys d))) (dict)))))(set t ("I2RGpHZ4R" (intrinsic 'set)))(< t ("I2RGpHZ4R" (intrinsic '<)))(expect-true t ("I2RGpHZ4R" (macro (&rest computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym (cons 'progn computed))) (list 'cond (list sym (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect true, result is %v\n" (list '_testidx) sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil))))(_external t ("I2RGpHZ4R" (intrinsic '_external)))(dict->values t ("I2RGpHZ4R" (lambda (d) ((lambda (li) (dict-foreach d (lambda (k v) (setq li (cons v li)))) li) nil))))(feature? t ("I2RGpHZ4R" (lambda (sym) (if (member sym *reflect*) t nil))))(assq t ("I2RGpHZ4R" (lambda (key alist) (cond (alist ((lambda (e) (cond ((cond ((cons? e) (eq? key (car e)))) e) (t (assq key (cdr alist))))) (car alist)))))))(_methods t ("I2RGpHZ4R" (lambda (class) ((lambda (li) (dict-foreach (array-ref class 4) (lambda (k v) (setq li (cons k li)))) li) nil))))(sym? t ("I2RGpHZ4R" (intrinsic 'sym?)))(_call-super t ("I2RGpHZ4R" (lambda (obj sup name args) (cond ((null? supers) (error "call-super: no superclass of class %v has method '%v, superclasses are '%v" (class-of obj) name (supers obj))) ((has-key? (array-ref (car sup) 4) name) (apply (get (array-ref (car sup) 4) name) (cons obj args))) (t (_call-super obj (cdr sup) name args))))))(fl.erfc t ("I2RGpHZ4R" (intrinsic 'fl.erfc)))(str->blob t ("I2RGpHZ4R" (intrinsic 'str->blob)))(*day-ns* t 86400000000000)(_remove-duplicates t ("I2RGpHZ4R" (lambda (li acc d) (cond ((null? li) (reverse acc)) ((has-key? d (1st li nil)) (_remove-duplicates (cdr li) acc d)) (t (set d (1st li nil) t) (_remove-duplicates (cdr li) (cons (car li) acc) d))))))(dec.num? t ("I2RGpHZ4R" (intrinsic 'dec.num?)))(_forward-symbol-table t ("I2RGpHZ4R" (lambda (table prefix datum) (cond ((not (list? datum)) datum) ((null? datum) datum) ((equal? (car datum) 'quote) datum) ((equal? (car datum) 'setq) (cons 'setq (map-pairwise (cdr datum) (lambda (ident val) (cond ((has-key? table ident) (list (getstacked table ident ident) (_forward-symbol-table table prefix val))) ((global-sym? ident) (list ident (_forward-symbol-table table prefix val))) (t (pushstacked table ident (str->sym (str+ (_library-prefix-convert prefix) "." (sym->str ident)))) (list (getstacked table ident ident) (_forward-symbol-table table prefix val)))))))) (t (cons (_forward-symbol-table table prefix (car datum)) (_forward-symbol-table table prefix (cdr datum))))))))(synout t ("I2RGpHZ4R" (lambda (arg) (enq (lambda nil (out arg))))))(read-string t ("I2RGpHZ4R" (intrinsic 'read-string)))(file-exists? t ("I2RGpHZ4R" (intrinsic 'file-exists?)))(kvdb._set-nonce t ("I2RGpHZ4R" (lambda (db n) (db.exec db "insert or replace into Internal(Id,Value) Values(?,?);" 1 n))))(date->epoch-ns t ("I2RGpHZ4R" (intrinsic 'date->epoch-ns)))(error->str t ("I2RGpHZ4R" (intrinsic 'error->str)))(kvdb._set-counter t ("I2RGpHZ4R" (lambda (db c) (db.exec db "insert or replace into Internal(Id,Value) Values(?,?);" 2 c))))(stop-task-scheduler t ("I2RGpHZ4R" (lambda nil (cond ((task? *scheduler*) (task-send *scheduler* 'end)) (t (void))))))(testing t ("I2RGpHZ4R" (macro (name) (list 'setq '*tests* (list 'cons (list 'lambda nil (list '_testout name) (list '_testout " ") (list 'set '*testinfo* (list 'quote 'test) name)) '*tests*)))))(_class-from-name t ("I2RGpHZ4R" (lambda (name) ((lambda (s idx) (setq s (sym->str name)) (setq idx (instr s "-")) (cond ((< idx 2) (error "defmethod: a method name must start with the class name followed by \"-\", given \"%v\"" s)) (t (void))) ((lambda (result) (cond (result result) (t (error "defmethod: no class %v registered" (str-slice s 0 idx))))) (_class-by-name (str->sym (str-slice s 0 idx))))) nil nil))))(fl.sin t ("I2RGpHZ4R" (intrinsic 'fl.sin)))(run-at t ("I2RGpHZ4R" (lambda (date repeater proc) ((lambda (nextns tid) (setq nextns (_run-at-date->ns date repeater)) (setq tid (task 'auto (lambda (id) ((lambda (loop) (setq loop (lambda (next) ((lambda (msg) (cond ((cond ((equal? msg 'end)) ((equal? msg 'cancel))) (void)) (t (cond ((<= next (now-ns)) (proc) (sleep (rand 0 890 1020)) (cond (repeater (loop (repeater id next))) (t (void)))) (t (sleep (rand 0 890 1020)) (loop next)))))) (task-recv id)))) (loop nextns)) nil)))) (task-run tid) tid) nil nil))))(point t #(%class point nil ("I2RGpHZ4R" (dict '(x 0 y 0))) ("I2RGpHZ4R" (dict '(move ("I2RGpHZ4R" (lambda (this delta) (setprop this 'x (+ (prop this 'x) delta)) (setprop this 'y (+ (prop this 'y) delta)))))))))(fl.acos t ("I2RGpHZ4R" (intrinsic 'fl.acos)))(set-subset? t ("I2RGpHZ4R" (lambda (a b) (dict-key-subset? a b))))(dict-foreach t ("I2RGpHZ4R" (intrinsic 'dict-foreach)))(db.exec t ("I2RGpHZ4R" (intrinsic 'db.exec)))(kvdb._search t ("I2RGpHZ4R" (lambda (db s kind limit fuzzer all?) ((lambda (G90) (cond ((member G90 '(all)) (_append (kvdb._query db s "Slot" "SymFts" limit fuzzer str->sym db.str all?) (_append (kvdb._query db s "Slot" "StrFts" limit fuzzer (lambda (x) x) db.str all?) (_append (kvdb._query db s "Slot" "ExprFts" limit fuzzer (lambda (x) (internalize (str->expr x) (3rd db))) db.str all?) (kvdb._query db s "Id" "IntFts" limit fuzzer (lambda (x) x) db.int all?))))) ((member G90 '(str)) (kvdb._query db s "Slot" "StrFts" limit fuzzer (lambda (x) x) db.str all?)) ((member G90 '(sym)) (kvdb._query db s "Slot" "SymFts" limit fuzzer str->sym db.str all?)) ((member G90 '(int)) (kvdb._query db s "Id" "IntFts" limit fuzzer (lambda (x) x) db.int all?)) ((member G90 '(expr)) (kvdb._query db s "Slot" "ExprFts" limit fuzzer (lambda (x) (internalize (str->expr x) (3rd db))) db.str all?)) (t (error "kvdb.search: unknown kind of key: %v" kind)))) kind))))(fl.erfinv t ("I2RGpHZ4R" (intrinsic 'fl.erfinv)))(7th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 6)) (t (nthdef seq 6 (car default)))))))(str-segment t ("I2RGpHZ4R" (lambda (s start end) (filter (_str-segment s (chars start) (chars end) nil) (lambda (x) (not (equal? (2nd x) "")))))))(*quarter-ns* t 900000000000)(read t ("I2RGpHZ4R" (intrinsic 'read)))(minmax t ("I2RGpHZ4R" (lambda (pred li so-far) (cond ((null? li) so-far) ((pred (car li) so-far) (minmax pred (cdr li) (car li))) (t (minmax pred (cdr li) so-far))))))(print t ("I2RGpHZ4R" (lambda (x) (prin1 x) (terpri) x)))(array->str t ("I2RGpHZ4R" (intrinsic 'array->str)))(cpunum t ("I2RGpHZ4R" (lambda nil (2nd (sys 'version)))))(out t ("I2RGpHZ4R" (lambda (s) (void (princ s)))))(remember t ("I2RGpHZ4R" (lambda (k v &rest opt) (kvdb.set *remember-db* k v (cond ((1st opt nil) (1st opt)) (t "")) (cond ((2nd opt nil) (2nd opt)) (t kvdb.*default-fuzzer*))))))(fl.trunc t ("I2RGpHZ4R" (intrinsic 'fl.trunc)))(replace-hook t ("I2RGpHZ4R" (lambda (h proc) (remove-hooks h) (add-hook h proc))))(fl.atan t ("I2RGpHZ4R" (intrinsic 'fl.atan)))(_append t ("I2RGpHZ4R" (lambda (x y) (cond ((null? x) y) (t (cons (car x) (_append (cdr x) y)))))))(functional-arity t ("I2RGpHZ4R" (intrinsic 'functional-arity)))(fl.asinh t ("I2RGpHZ4R" (intrinsic 'fl.asinh)))(_mname-from-name t ("I2RGpHZ4R" (lambda (name) ((lambda (s idx) (setq s (sym->str name)) (setq idx (instr s "-")) (cond ((< idx 2) (error "defmethod: a method name must start with the class name followed by \"-\", given \"%v\"" s)) (t (void))) (cond ((< (- (strlen s) (add1 idx)) 1) (error "defmethod: the method name does have a class name but does not have a slot name part, given \"%v\"" s)) (t (void))) (str->sym (str-slice s (add1 idx) (strlen s)))) nil nil))))(EOF t ("I2RGpHZ4R" (end-of-file)))(str-remove-prefix t ("I2RGpHZ4R" (lambda (s pfx) (cond ((cond ((str-empty? pfx)) ((str-empty? s))) s) ((equal? (str-slice s 0 (min (len pfx) (len s))) pfx) (str-slice s (min (len pfx) (len s)) (len s))) (t s)))))(declare-unprotected t ("I2RGpHZ4R" (lambda (sym) (set *mutable-toplevel-symbols* sym t))))(strright t ("I2RGpHZ4R" (lambda (s n) (str+ (strbuild " " (- n (len s))) s))))(_testout t ("I2RGpHZ4R" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (out arg)) (t (void))))))(cdddr t ("I2RGpHZ4R" (lambda (x) (cdr (cdr (cdr x))))))(set-union t ("I2RGpHZ4R" (lambda (a b) (dict-merge a b))))(dec.less-than? t ("I2RGpHZ4R" (intrinsic 'dec.less-than?)))(caaar t ("I2RGpHZ4R" (lambda (x) (car (car (car x))))))(* t ("I2RGpHZ4R" (intrinsic '*)))(str-empty? t ("I2RGpHZ4R" (intrinsic 'str-empty?)))(abs t ("I2RGpHZ4R" (lambda (x) (cond ((< x 0) (* x -1)) (t x)))))(array-reverse t ("I2RGpHZ4R" (intrinsic 'array-reverse)))(str-foreach t ("I2RGpHZ4R" (lambda (s proc) ((lambda (i G79) ((lambda (G80) (setq G80 (lambda nil (cond ((< i G79) (proc (str-ref s i)) (setq i (+ i 1)) (G80)) (t (void))))) (G80)) nil)) 0 (len s)) (void))))(setcar t ("I2RGpHZ4R" (intrinsic 'rplaca)))(outy1 t ("I2RGpHZ4R" (lambda (te) (cond ((list? te) (_outy1 te)) (t (out te))))))(_lighten-delta t ("I2RGpHZ4R" (lambda (c proposed) ((lambda (li m) (setq li (reverse (cdr (reverse c)))) (setq m (apply max li)) (min proposed (- 255 m))) nil nil))))(db-result? t ("I2RGpHZ4R" (intrinsic 'db-result?)))(list? t ("I2RGpHZ4R" (lambda (x) (cond ((null? x)) ((cons? x))))))(6th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 5)) (t (nthdef seq 5 (car default)))))))(permission? t ("I2RGpHZ4R" (intrinsic 'permission?)))(datestr* t ("I2RGpHZ4R" (lambda (d) (cond ((null? (cdr d)) (fmt "%v-%v-%v" (caar d) (cadar d) (caddr (car d)))) (t (fmt "%v-%v-%v %v:%02v:%02v.%v" (caar d) (cadar d) (caddr (car d)) (1st (2nd d) 0) (2nd (2nd d) 0) (3rd (2nd d) 0) (4th (2nd d) 0)))))))(mutex-unlock t ("I2RGpHZ4R" (intrinsic 'mutex-unlock)))(map-pairwise t ("I2RGpHZ4R" (lambda (seq proc) (cond ((not (even? (len seq))) (error "map-pairwise: expected sequence of even length, but the given sequence has length %v" (len seq))) (t (void))) ((lambda (k traverse li) (setq k (len seq)) (setq traverse (lambda (i s acc) (cond ((= i k) acc) ((odd? i) (traverse (add1 i) s (_append acc (proc (nth s (sub1 i)) (nth s i))))) (t (traverse (add1 i) s acc))))) (setq li (traverse 0 seq nil)) (cond ((list? seq) li) ((array? seq) (list->array li)) ((str? seq) (list->str li)) (t (error "map-pairwise - not a sequence: %v" seq)))) nil nil nil))))(list-foreach t ("I2RGpHZ4R" (lambda (li proc) (cond (li (proc (car li)) (list-foreach (cdr li) proc)) (t (void))))))(*max-float64* t 1.7976931348623157e+308)(*interactive-session* t ("I2RGpHZ4R" t))(wait-for t ("I2RGpHZ4R" (lambda (dict key) (wait-for* dict key -1))))(append t ("I2RGpHZ4R" (macro (x &rest y) (cond ((null? y) x) (t (list '_append x (cons 'append y)))))))(array-copy t ("I2RGpHZ4R" (intrinsic 'array-copy)))(alist->dict t ("I2RGpHZ4R" (lambda (li) ((lambda (d) (foreach li (lambda (p) (set d (car p) (cdr p)))) d) (dict)))))(sys-key? t ("I2RGpHZ4R" (lambda (k) ((lambda (s) (cond ((equal? (sys k s) s) nil) (t t))) (gensym)))))(build-array t ("I2RGpHZ4R" (intrinsic 'build-array)))(kvdb.rollback t ("I2RGpHZ4R" (lambda (db) (db.exec (2nd db) "rollback;"))))(*sync-wait-lower-bound* t 1)(blob->ascii85 t ("I2RGpHZ4R" (intrinsic 'blob->ascii85)))(zimage-header-info t ("I2RGpHZ4R" (lambda (header file c) (cons file (cons c header)))))(dec.truncate t ("I2RGpHZ4R" (intrinsic 'dec.truncate)))(run-zimage t ("I2RGpHZ4R" (lambda (fi) (cond ((zimage-runable? fi) (_run-zimage fi)) (t (error "zimage not runable, no entry point: %v" fi))))))(dec.floor t ("I2RGpHZ4R" (intrinsic 'dec.floor)))(kvdb._info t ("I2RGpHZ4R" (lambda (db key other) ((lambda (_get-strs) (cond ((num? key) (_get-strs (db.query (2nd db) "select distinct Info, Fuzzy from IntData where Id = ?;" key) other)) ((sym? key) (_get-strs (db.query (2nd db) "select distinct Info, Fuzzy from SymData where Slot = ?;" (sym->str key)) other)) ((str? key) (_get-strs (db.query (2nd db) "select distinct Info, Fuzzy from StrData where Slot = ?;" key) other)) (t (_get-strs (db.query (2nd db) "select distinct Info, Fuzzy from ExprData where Slot = ?;" (expr->str (externalize key (3rd db)))) other)))) (lambda (result other) ((lambda (datum) (db.close-result result) datum) (cond ((db.step result) (list (db.str result 0) (db.str result 1))) (t other))))))))(_library-prefix-convert t ("I2RGpHZ4R" (lambda (prefixes) (str-join (map prefixes sym->str) "."))))(set-empty? t ("I2RGpHZ4R" (lambda (s) (dict-empty? s))))(list t ("I2RGpHZ4R" (intrinsic 'list)))(cons? t ("I2RGpHZ4R" (lambda (x) (not (atom? x)))))(blob->hex t ("I2RGpHZ4R" (intrinsic 'blob->hex)))(collect-garbage t ("I2RGpHZ4R" (intrinsic 'collect-garbage)))(run-hook t ("I2RGpHZ4R" (lambda (h &rest args) ((lambda (id) (cond ((num? id) (apply run-hook-internal (cons id args))) (t nil))) (hook h)))))(*tests* nil (("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G76) (cond ((equal? G76 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G76) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (str-forall? "abcdefg" num?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G75) (cond ((equal? G75 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G75) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (array-forall? #(0.2 1.2 3.3 -3.0 1.0) (lambda (x) (>= x 0)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G74) (cond ((equal? G74 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G74) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (array-forall? #(1.2 3.3 4.4 5.3 1.0) (lambda (x) (>= x 1)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G73) (cond ((equal? G73 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G73) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (list-forall? '(1 2 3 4 hello 5 6 7 8) num?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G72) (cond ((equal? G72 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G72) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (list-forall? '(1 2 3 4 5 6 7 8) num?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G71) (cond ((equal? G71 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G71) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? #(0.2 1.2 3.3 -3.0 1.0) (lambda (x) (>= x 0)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G70) (cond ((equal? G70 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G70) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? #(1.2 3.3 4.4 5.3 1.0) (lambda (x) (>= x 1)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G69) (cond ((equal? G69 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G69) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? "abcdefg" num?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G68) (cond ((equal? G68 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G68) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? '(1 2 3 4 hello 5 6 7 8) num?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G67) (cond ((equal? G67 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G67) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (forall? '(1 2 3 4 5 6 7 8) num?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G66) (cond ((equal? G66 700) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 700 G66) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach "abcdefg" (lambda (x) (setq s (+ s x)))) s) 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G65) (cond ((equal? G65 0) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 0 G65) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach nil (lambda (x) (setq s (+ s x)))) s) 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G64) (cond ((equal? G64 21) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 21 G64) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach #(1 2 3 4 5 6) (lambda (x) (setq s (+ s x)))) s) 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G63) (cond ((equal? G63 21) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 21 G63) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) ((lambda (s) (foreach '(1 2 3 4 5 6) (lambda (x) (setq s (+ s x)))) s) 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G62) (cond ((equal? G62 "abcdefgh") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "abcdefgh" G62) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise "abcdefgh" (lambda (x y) (list x y)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G61) (cond ((equal? G61 #(1 2 3 4 5 6 7 8)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(1 2 3 4 5 6 7 8) G61) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise #(1 2 3 4 5 6 7 8) (lambda (x y) (list x y)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G60) (cond ((equal? G60 '(1 2 3 4 5 6 7 8)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6 7 8) G60) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise '(1 2 3 4 5 6 7 8) (lambda (x y) (list x y)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G59) (cond ((equal? G59 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G59) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise 'nil (lambda (x y) (list x y)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (map-pairwise '(1 2 3) (lambda (x y) (list y x))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G58) (cond ((equal? G58 #(john smith peter wilkes maria calvesh)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(john smith peter wilkes maria calvesh) G58) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise #(smith john wilkes peter calvesh maria) (lambda (x y) (list y x)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G57) (cond ((equal? G57 "abcdefgh") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "abcdefgh" G57) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise "badcfehg" (lambda (x y) (list y x)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G56) (cond ((equal? G56 '(-1 3 -1 7 -1 11 -1 15)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(-1 3 -1 7 -1 11 -1 15) G56) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise '(1 2 3 4 5 6 7 8) (lambda (x y) (list (- x y) (+ x y))))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G55) (cond ((equal? G55 '(1 2 3 4 5 6 7 8)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6 7 8) G55) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map-pairwise '(2 1 4 3 6 5 8 7) (lambda (x y) (list y x)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (map (dict) add1) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G54) (cond ((equal? G54 #(2 3 4 5 6 7)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(2 3 4 5 6 7) G54) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map #(1 2 3 4 5 6) add1)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G53) (cond ((equal? G53 "bcdefg") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "bcdefg" G53) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map "abcdef" (lambda (x) (+ x 1)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G52) (cond ((equal? G52 '(2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(2 3 4 5 6) G52) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (map '(1 2 3 4 5) add1)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G49) (cond ((equal? G49 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G49) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (take '(1 2 3 4 5 6) 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G48) (cond ((equal? G48 '(1 2 3)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3) G48) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (take '(1 2 3 4 5 6) 3)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (slice nil 0 1) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (slice '(1 2 3) 4 5) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G47) (cond ((equal? G47 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G47) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice '(1 2 3 4 5 6) 2 2)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G46) (cond ((equal? G46 "bcd") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "bcd" G46) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice "abcdefgbcd" 1 4)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G45) (cond ((equal? G45 '(1 2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6) G45) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice '(1 2 3 4 5 6) 0 (len '(1 2 3 4 5 6)))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G44) (cond ((equal? G44 '(2 3 4)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(2 3 4) G44) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (slice '(1 2 3 4 5 6) 1 4)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G43) (cond ((equal? G43 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G43) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? 'atom)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G42) (cond ((equal? G42 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G42) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? (dict))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G41) (cond ((equal? G41 nil) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) nil G41) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? 1)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G40) (cond ((equal? G40 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G40) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? "abc")))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G39) (cond ((equal? G39 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G39) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? #(a b c))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G38) (cond ((equal? G38 t) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) t G38) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (seq? '(a b c))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G37) (cond ((equal? G37 4) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 4 G37) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (index '(a b c d e f g h i j k) 'e equal?)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G36) (cond ((equal? G36 3) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 3 G36) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (index '(2 3 4 1 9 9 7 8) 1)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G35) (cond ((equal? G35 4) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 4 G35) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef (dict) 3 4)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G34) (cond ((equal? G34 9) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 9 G34) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef nil 3 9)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G33) (cond ((equal? G33 9) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 9 G33) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef '(1 2 3 4 5) 6 9)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G32) (cond ((equal? G32 1) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 1 G32) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nthdef '(9 8 7 6 1 5 4 3 2) 4 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (reverse (dict '(1 a 2 b 3 c 4 d 5 e 6 f))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G31) (cond ((equal? G31 "123456") (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) "123456" G31) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (reverse "654321")))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G30) (cond ((equal? G30 #(1 2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) #(1 2 3 4 5 6) G30) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (reverse #(6 5 4 3 2 1))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G29) (cond ((equal? G29 '(1 2 3 4 5 6)) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) '(1 2 3 4 5 6) G29) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (reverse '(6 5 4 3 2 1))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (nth "abc" 4) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G28) (cond ((equal? G28 4) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 4 G28) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nth '(9 1 2 3 4) 4)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G27) (cond ((equal? G27 9) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 9 G27) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nth '(9 1 2 3 4) 0)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G26) (cond ((equal? G26 1) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect %v given %v\n" (_testidx) 1 G26) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (nth #(2 1 3 0) 1)))) ("I2RGpHZ4R" (lambda nil (_testout "sequences") (_testout " ") (set *testinfo* 'test "sequences"))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G25) (cond (G25 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G25) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (functional? car))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G24) (cond (G24 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G24) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (functional? expect))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G23) (cond (G23 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G23) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (functional? (lambda (x) (out x))))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G22) (cond (G22 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G22) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? void))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G21) (cond ((not G21) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G21) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? (future (void))))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G20) (cond ((not G20) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G20) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? 1))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G19) (cond ((not G19) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G19) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? expect))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G18) (cond (G18 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G18) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn (proc? (lambda (x) (out x))))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G17) (cond ((not G17) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G17) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn nil)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G16) (cond (G16 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G16) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn t)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G14) (cond ((not G14) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G14) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn ((lambda (G15) (cond ((member G15 '(foo bar)) t) (t nil))) 'test))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G12) (cond (G12 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G12) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn ((lambda (G13) (cond ((member G13 '(test)) t))) 'test))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G10) (cond (G10 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G10) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn ((lambda (G11) (cond ((member G11 '(foo test)) t) ((member G11 '(bar testing)) nil))) 'test))))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-eror-handler) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (list? (list-foreach (dump) (lambda (x) (apropos x)))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) (_testout (fmt "%v " (_testidx))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (_testout "help") (_testout " ") (set *testinfo* 'test "help"))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (_testout (fmt "%v " (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-error-handler) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (error "intentional error for testing") (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (fmt "\n%v FAIL, expect error but none occurred\n" (_testidx))))))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) (push-error-handler (lambda (err) (pop-eror-handler) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (void) (set *testinfo* 'success (add1 (get *testinfo* 'success 0))) (_testout (fmt "%v " (_testidx))) (pop-error-handler))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G6) (cond ((not G6) (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G6) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn nil)))) ("I2RGpHZ4R" (lambda nil (set *testinfo* 'count (add1 (get *testinfo* 'count 0))) ((lambda (G5) (cond (G5 (_testout (fmt "%v " (_testidx))) (set *testinfo* 'success (add1 (get *testinfo* 'success 0)))) (t (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (shorten (fmt "\n%v FAIL, expect true, result is %v\n" (_testidx) G5) (sys 'cols 80))))))) (set *testinfo* 'failure (add1 (get *testinfo* 'failure 0)))))) (progn t)))) ("I2RGpHZ4R" (lambda nil (_testout "testing") (_testout " ") (set *testinfo* 'test "testing")))))(externalize0 t ("I2RGpHZ4R" (lambda (arg) (cond ((sym? arg) arg) ((list? arg) (mapcar arg (lambda (x) (externalize0 x)))) ((array? arg) (map arg (lambda (x) (externalize0 x)))) ((dict? arg) (list 'dict (list 'quote (externalize0 (dict->list arg))))) ((num? arg) arg) ((str? arg) arg) ((port? arg) arg) (t (_external-str arg))))))(task t ("I2RGpHZ4R" (lambda (sel proc) ((lambda (i tproc) (set *tasks-state* i 'new) (set *tasks* i tproc) i) (_new-task-id) (lambda (id) (with-final (lambda (err result) (cond ((eq? sel 'remove) (task-remove id)) (t (cond (err (task-broadcast 'error id err) (set *tasks-state* id 'error) (*error-printer* err)) (t (cond ((eq? sel 'auto) (task-remove id)) (t (task-broadcast 'finished id result) (set *tasks-state* id 'finished))))))) (cdec! '*running-tasks*) result) (set *tasks-state* id 'running) (cinc! '*running-tasks*) (proc id)))))))(ling.hamming t ("I2RGpHZ4R" (intrinsic 'ling.hamming)))(array-ref t ("I2RGpHZ4R" (intrinsic 'array-ref)))(eof? t ("I2RGpHZ4R" (intrinsic 'eof?)))(dec.equal t ("I2RGpHZ4R" (intrinsic 'dec.equal)))(_schedule-task-future t ("I2RGpHZ4R" (lambda nil (task 'auto (lambda (id) ((lambda (G81) (setq G81 (lambda nil (cond ((not (eq? (task-recv id) 'end)) (cond ((queue-empty? *scheduled-tasks*) (sleep *scheduler-sleep-interval*)) (t (cond ((< *running-tasks* (cpunum)) (task-run (progn (mutex-lock (array-ref *scheduled-tasks* 1)) (cond ((null? (array-ref *scheduled-tasks* 2)) (mutex-unlock (array-ref *scheduled-tasks* 1)) (cond ('nil (car 'nil)) (t nil))) (t ((lambda (result) (array-set *scheduled-tasks* 2 (cdr (array-ref *scheduled-tasks* 2))) (mutex-unlock (array-ref *scheduled-tasks* 1)) result) (car (array-ref *scheduled-tasks* 2)))))) t)) (t (void))))) (G81)) (t (void))))) (G81)) nil))))))(fl.round-to-even t ("I2RGpHZ4R" (intrinsic 'fl.round-to-even)))(forall? t ("I2RGpHZ4R" (lambda (seq pred) (cond ((list? seq) (list-forall? seq pred)) ((array? seq) (array-forall? seq pred)) ((str? seq) (str-forall? seq pred)) (t (error "all - not a sequence: %v" seq))))))(stropen t ("I2RGpHZ4R" (intrinsic 'stropen)))(dir? t ("I2RGpHZ4R" (intrinsic 'dir?)))(ling.match-rating-codex t ("I2RGpHZ4R" (intrinsic 'ling.match-rating-codex)))(get-partitions t ("I2RGpHZ4R" (lambda (x n) (lambda (&rest idx) (cond ((null? idx) (count-partitions x n)) (t (cond ((cond ((< (1st idx -1) 0)) ((>= (1st idx -1) (count-partitions x n)))) nil) (t (nth-partition x n (1st idx 0))))))))))(struct-instantiate t ("I2RGpHZ4R" (lambda (s propli) ((lambda (defaults index arr) (array-set arr 0 '%record) (array-set arr 1 (struct-name s)) (dict-foreach index (lambda (k idx) (array-set arr idx (_struct-lookup k propli defaults)))) arr) (struct-props s) (struct-index s) (build-array (+ 2 (struct-size s)) nil)))))(_wait-until* t ("I2RGpHZ4R" (lambda (dict key pred timeout first-time) ((lambda (value) (cond ((cond ((pred value)) ((cond ((>= timeout 0) (>= (- (now-ns) first-time) timeout)) (t nil)))) value) (t (sleep-ns (rand 0 *sync-wait-lower-bound* *sync-wait-upper-bound*)) (_wait-until* dict key pred timeout first-time)))) (get dict key nil)))))(fl.tanh t ("I2RGpHZ4R" (intrinsic 'fl.tanh)))(with-mutex-rlock t ("I2RGpHZ4R" (macro (mu &rest body) (list 'progn (list 'mutex-rlock mu) (cons 'with-final (cons (list 'lambda (list 'err 'result) (list 'mutex-runlock mu) (list 'if 'err (list '*error-handler* 'err) 'result)) body))))))(dict? t ("I2RGpHZ4R" (intrinsic 'dict?)))(db.open* t ("I2RGpHZ4R" (intrinsic 'db.open*)))(synouty t ("I2RGpHZ4R" (lambda (li) (enq (lambda nil (outy li))))))(str-join t ("I2RGpHZ4R" (lambda (fields sep) (_str-join fields sep ""))))(load-zimage t ("I2RGpHZ4R" (lambda (fi) ((lambda (in) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (close in) (cond (err (*error-printer* err)) (t (void)))))) (read-zimage in fi) (pop-error-handler) (close in))) (open fi '(read))))))(db.fuzzify t ("I2RGpHZ4R" (intrinsic 'db.fuzzify)))(default-error-handler t ("I2RGpHZ4R" (lambda nil (lambda (err) (beep 'error) (*error-printer* err)))))(now t ("I2RGpHZ4R" (intrinsic 'now)))(*e* t 2.718281828459045)(*log2e* t 1.4426950408889634)(readall t ("I2RGpHZ4R" (lambda (n) (nreverse (_readall n nil)))))(dolist t ("I2RGpHZ4R" (macro (spec &rest body) ((lambda (name list) (cons 'let (cons (list name (list list (cadr spec))) (cons (_append (cons 'while (cons list (cons (list 'setq name (list 'car list)) body))) (list (list 'setq list (list 'cdr list)))) (cond ((cddr spec) (list (list 'setq name nil) (caddr spec)))))))) (car spec) (gensym)))))(null? t ("I2RGpHZ4R" (lambda (x) (eq? x nil))))(str->array t ("I2RGpHZ4R" (intrinsic 'str->array)))(str+ t ("I2RGpHZ4R" (intrinsic 'str+)))(add1 t ("I2RGpHZ4R" (lambda (n) (+ n 1))))(*ln2* t 0.6931471805599453)(semver.major-minor t ("I2RGpHZ4R" (intrinsic 'semver.major-minor)))(expect-false t ("I2RGpHZ4R" (macro (&rest computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym (cons 'progn computed))) (list 'cond (list (list 'not sym) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect true, result is %v\n" (list '_testidx) sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil))))(*sqrtpi* t 1.772453850905516)(*gensym-counter* nil 93)(dec.is-positive? t ("I2RGpHZ4R" (intrinsic 'dec.is-positive?)))(kvdb.*default-fuzzer* t ("I2RGpHZ4R" (lambda (s) (ling.metaphone s))))(strcnt t ("I2RGpHZ4R" (intrinsic 'strcnt)))(_transform-help-entries t ("I2RGpHZ4R" (lambda (strnew strold entries) (mapcar entries (lambda (entry) (cons (car entry) (mapcar (cdr entry) (lambda (x) (_maybe-translate-help x strnew strold)))))))))(log t ("I2RGpHZ4R" (intrinsic 'log)))(4th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 3)) (t (nthdef seq 3 (car default)))))))(fl.remainder t ("I2RGpHZ4R" (intrinsic 'fl.remainder)))(_new-task-id t ("I2RGpHZ4R" (lambda nil (cinc! '*task-counter*))))(point-move t ("I2RGpHZ4R" (lambda (obj &rest ag) (call-method obj (_mname-from-name 'point-move) ag))))(chars t ("I2RGpHZ4R" (lambda (s) (list->set (str->chars s)))))(_out-help-fix-end t ("I2RGpHZ4R" (lambda (li) ((lambda (arr m) (setq arr (list->array li)) (setq m (sub1 (len arr))) ((lambda (n G8) ((lambda (G9) (setq G9 (lambda nil (cond ((< n G8) (cond ((1st (array-ref arr n)) ((lambda (a b) (array-set arr (add1 n) (list (1st b) (str+ (slice (2nd a) (sub1 (len (2nd a))) (len (2nd a))) (2nd b)))) (array-set arr n (list (1st a) (slice (2nd a) 0 (sub1 (len (2nd a))))))) (array-ref arr n) (array-ref arr (add1 n)))) (t (void))) (setq n (+ n 1)) (G9)) (t (void))))) (G9)) nil) (array->list arr)) 0 m)) nil nil))))(the-color t ("I2RGpHZ4R" (lambda (spec) (cond ((sym? spec) ((lambda (c) (cond (c (cond ((sym? c) (color c)) ((> (len c) 3) c) (t (nreverse (cons 255 (nreverse c)))))) (t (error "color not in *colors*: %v" spec)))) (get *colors* spec nil))) ((list? spec) (cond ((< (len spec) 3) (error "expected a list of r g b values, given %v" spec)) ((= (len spec) 3) (nreverse (cons 255 (nreverse spec)))) ((> (len spec) 3) spec) (t (error "malformed color list: %v" spec)))) (t (error "malformed color specification: %v" spec))))))(fl.cos t ("I2RGpHZ4R" (intrinsic 'fl.cos)))(fl.floor t ("I2RGpHZ4R" (intrinsic 'fl.floor)))(void? t ("I2RGpHZ4R" (intrinsic 'void?)))(array-slice t ("I2RGpHZ4R" (intrinsic 'array-slice)))(array-map! t ("I2RGpHZ4R" (intrinsic 'array-map!)))(blob-equal? t ("I2RGpHZ4R" (intrinsic 'blob-equal?)))(_help-use t ("I2RGpHZ4R" (lambda (info) (cadr (assoc 'use info)))))(ling.soundex t ("I2RGpHZ4R" (intrinsic 'ling.soundex)))(_help-arity-to-str t ("I2RGpHZ4R" (lambda (n) (cond ((< n 0) (fmt "%v or more" (abs (+ n 1)))) (t (fmt "%v" n))))))(array? t ("I2RGpHZ4R" (intrinsic 'array?)))(queue? t ("I2RGpHZ4R" (lambda (sym) (cond ((not (array? sym)) nil) ((< (len sym) 2) nil) ((not (mutex? (array-ref sym 1))) nil) (t (equal? (array-ref sym 0) 'queue))))))(prune-unneeded-help-entries t ("I2RGpHZ4R" (lambda nil (foreach (find-unneeded-help-entries) (lambda (sym) (delete *help* sym))))))(dec.tan t ("I2RGpHZ4R" (intrinsic 'dec.tan)))(force t ("I2RGpHZ4R" (intrinsic 'force)))(*max-float32* t 3.4028234663852886e+38)(db.step t ("I2RGpHZ4R" (intrinsic 'db.step)))(cddar t ("I2RGpHZ4R" (lambda (x) (cdr (cdr (car x))))))(struct? t ("I2RGpHZ4R" (lambda (s) (cond ((array? s) (equal? (1st s nil) '%struct))))))(find-unneeded-help-entries t ("I2RGpHZ4R" (lambda nil ((lambda (d r) (dict-foreach *help* (lambda (k v) (cond ((not (memq k d)) (setq r (cons k r))) (t (void))))) r) (dump) nil))))(*hour-ns* t 3600000000000)(_help-see-to-str t ("I2RGpHZ4R" (lambda (li) (cond (li (apply str+ (cons (fmt "%v" (car li)) (mapcar (cdr li) (lambda (x) (fmt ", %v" x)))))) (t "n/a")))))(exit t ("I2RGpHZ4R" (intrinsic 'exit)))(start-task-scheduler t ("I2RGpHZ4R" (lambda nil (cond ((not (task? *scheduler*)) (setq *scheduler* (_schedule-task-future))) (t (void))) (task-run *scheduler*))))(dict-empty? t ("I2RGpHZ4R" (intrinsic 'dict-empty?)))(readable? t ("I2RGpHZ4R" (intrinsic 'readable?)))(db.query t ("I2RGpHZ4R" (intrinsic 'db.query)))(or t ("I2RGpHZ4R" (macro (x &rest y) (cond ((null? y) x) (t (list 'cond (list x) (list (cons 'or y))))))))(car t ("I2RGpHZ4R" (intrinsic 'car)))(dec.to-blob t ("I2RGpHZ4R" (intrinsic 'dec.to-blob)))(sort t ("I2RGpHZ4R" (intrinsic 'sort)))(stack-empty? t ("I2RGpHZ4R" (lambda (q) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (null? (array-ref q 2))))))(getstacked t ("I2RGpHZ4R" (lambda (dic key default) ((lambda (li) (cond ((null? li) default) (t (car li)))) (get dic key nil)))))(init-tasking t ("I2RGpHZ4R" (lambda nil (start-task-scheduler))))(str->sym t ("I2RGpHZ4R" (intrinsic 'str->sym)))(cdec! t ("I2RGpHZ4R" (intrinsic 'cdec!)))(kvdb.when t ("I2RGpHZ4R" (lambda (db key &rest opt) (kvdb._when db key (1st opt nil)))))(def-custom-hook t ("I2RGpHZ4R" (lambda (h) (cinc! '*custom-hook-counter*) (set *custom-hooks* h (+ 65635 *custom-hook-counter*)))))(get t ("I2RGpHZ4R" (lambda (d k &rest rargs) (_get d k (1st rargs nil)))))(str->chars t ("I2RGpHZ4R" (intrinsic 'str->chars)))(div t ("I2RGpHZ4R" (intrinsic 'div)))(semver.is-valid? t ("I2RGpHZ4R" (intrinsic 'semver.is-valid?)))(fl.max t ("I2RGpHZ4R" (intrinsic 'fl.max)))(write-binary t ("I2RGpHZ4R" (intrinsic 'write-binary)))(set-help-topic-info t ("I2RGpHZ4R" (lambda (topic header info) (set *help-topics* topic (list header info)))))(intrinsic? t ("I2RGpHZ4R" (intrinsic 'intrinsic?)))(sym->str t ("I2RGpHZ4R" (intrinsic 'sym->str)))(_read-zimage t ("I2RGpHZ4R" (lambda (in header file c nonce) ((lambda (li) (cond ((eof? li) (zimage-header-info header file c)) ((not (list? li)) (error "zimage corrupted: %v" li)) (t (cond ((get *volatile-toplevel-symbols* (car li) nil) (warn "read-zimage: cannot set volatile toplevel symbol '%v" (car li))) (t (_read-zimage-bind li nonce))) (_read-zimage in header file (add1 c) nonce)))) (read in)))))(nth-partition t ("I2RGpHZ4R" (lambda (m k idx) (cond ((= idx (div m k)) (list (* idx k) (sub1 m) (% m k))) (t (list (* k idx) (+ (* k idx) (sub1 k)) k))))))(cadr t ("I2RGpHZ4R" (lambda (x) (car (cdr x)))))(protect-toplevel-symbols t ("I2RGpHZ4R" (lambda nil (apply protect (filter (dump-bindings) (lambda (sym) (cond ((not (protected? sym)) (not (has-key? *mutable-toplevel-symbols* sym))))))))))(str-slice t ("I2RGpHZ4R" (intrinsic 'str-slice)))(if t ("I2RGpHZ4R" (macro (test then &rest else) (cons 'cond (cons (list test then) (cond (else (list (cons t else)))))))))(now-ns t ("I2RGpHZ4R" (intrinsic 'now-ns)))(list-reverse t ("I2RGpHZ4R" (intrinsic 'list-reverse)))(pop-finalizer t ("I2RGpHZ4R" (lambda nil (popstacked *finalizers* (sys 'taskid) (lambda (err result) (cond (err (*error-handler* err)) (t (void))) result)))))(defstruct t ("I2RGpHZ4R" (macro (name &rest props) (list 'progn (list 'bind (list 'quote name) (list new-struct (list 'quote name) (list 'quote props))) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "?")) (list 'lambda (list 'x) (list 'and (list 'record? 'x) (list 'equal? (list 'quote name) (list 'array-ref 'x 1))))) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "*")) (list 'lambda (list 'x 'proc) (list 'unless (list 'record? 'x) (list 'error "struct error: not a %v, given %v" (list 'quote name) 'x)) (list 'let (list (list 'y (list 'copy-record 'x))) (list 'proc 'y)))) (list 'foreach (list 'quote props) (list 'lambda (list 'x) (list 'let (list (list 'propsym (list 'if (list 'list? 'x) (list 'car 'x) 'x))) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "-" (list 'sym->str 'propsym) "*")) (list 'lambda (list 'r 'v 'proc) (list 'let (list (list 'v2 (list 'array-ref 'r (list 'get (list 'struct-index name) 'propsym)))) (list 'array-set 'r (list 'get (list 'struct-index name) 'propsym) 'v) (list 'proc) (list 'array-set 'r (list 'get (list 'struct-index name) 'propsym) 'v2)))) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "-" (list 'sym->str 'propsym))) (list 'lambda (list 'r) (list 'unless (list 'and (list 'record? 'r) (list 'equal? (list 'quote name) (list 'array-ref 'r 1))) (list 'error "struct get error: not a %v, given %v" (list 'quote name) 'r)) (list 'array-ref 'r (list 'get (list 'struct-index name) 'propsym)))) (list 'bind (list 'str->sym (list 'str+ (list 'sym->str (list 'quote name)) "-" (list 'sym->str 'propsym) "!")) (list 'lambda (list 'r 'v) (list 'unless (list 'and (list 'record? 'r) (list 'equal? (list 'quote name) (list 'array-ref 'r 1))) (list 'error "struct set error: not a %v, given %v and value %v" (list 'quote name) 'r 'v)) (list 'array-set 'r (list 'get (list 'struct-index name) 'propsym) 'v))))))))))(/= t ("I2RGpHZ4R" (lambda (x y) (not (= x y)))))(eq? t ("I2RGpHZ4R" (intrinsic 'eq?)))(float t ("I2RGpHZ4R" (intrinsic 'float)))(dec.sign t ("I2RGpHZ4R" (intrinsic 'dec.sign)))(nl t ("I2RGpHZ4R" (lambda nil (out "\n"))))(*sqrtphi* t 1.272019649514069)(has-prop? t ("I2RGpHZ4R" (lambda (obj slot) (has-key? (array-ref obj 2) (sym->str slot)))))(_wait-for* t ("I2RGpHZ4R" (lambda (dict key timeout first-time) (cond ((cond ((get dict key nil)) ((cond ((>= timeout 0) (>= (- (now-ns) first-time) timeout)) (t nil)))) (get dict key nil)) (t (sleep-ns (rand 0 *sync-wait-lower-bound* *sync-wait-upper-bound*)) (_wait-for* dict key timeout first-time))))))(struct-size t ("I2RGpHZ4R" (lambda (s) (5th s 0))))(bitshr t ("I2RGpHZ4R" (intrinsic 'bitshr)))(fl.signbit t ("I2RGpHZ4R" (intrinsic 'fl.signbit)))(peek t ("I2RGpHZ4R" (intrinsic 'peek)))(2nd t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 1)) (t (nthdef seq 1 (car default)))))))(close t ("I2RGpHZ4R" (intrinsic 'close)))(day-of-week t ("I2RGpHZ4R" (intrinsic 'day-of-week)))(make t ("I2RGpHZ4R" (macro (name props) (list 'struct-instantiate name props))))(intern t ("I2RGpHZ4R" (intrinsic 'intern)))(kvdb.*default-search-limit* nil 10000)(dec.div t ("I2RGpHZ4R" (intrinsic 'dec.div)))(8th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 7)) (t (nthdef seq 7 (car default)))))))(slice t ("I2RGpHZ4R" (lambda (seq low high) (cond ((array? seq) (array-slice seq low high)) ((list? seq) (list-slice seq low high)) ((str? seq) (str-slice seq low high)) (t (error "ref - not a sequence: %v" seq))))))(kvdb._get-nonce t ("I2RGpHZ4R" (lambda (db) ((lambda (result) (cond ((db.step result) ((lambda (datum) (db.close-result result) datum) (db.str result 0))) (t (db.close-result result) (nonce)))) (db.query db "SELECT (Value) FROM Internal WHERE id=1 LIMIT 1;")))))(db.result-columns t ("I2RGpHZ4R" (intrinsic 'db.result-columns)))(list-slice t ("I2RGpHZ4R" (intrinsic 'list-slice)))(class-of t ("I2RGpHZ4R" (lambda (obj) (cond ((object? obj) (_class-by-name (array-ref obj 1))) (t nil)))))(point? t ("I2RGpHZ4R" (letrec nil (lambda (obj) (cond ((object? obj) ((lambda (c) (cond (c (eq? (class-name c) 'point)) (t nil))) (class-of obj))))))))(init-remember t ("I2RGpHZ4R" (lambda nil (cond ((not *remember-db*) (setq *remember-db* (kvdb.open (str+ (sysdir 'z3s5-data) "/remembered.z3kv"))) (add-hook 'shutdown (lambda (args) (cond (*remember-db* (kvdb.close *remember-db*)) (t (void)))))) (t (void))))))(fl.min t ("I2RGpHZ4R" (intrinsic 'fl.min)))(db.blob t ("I2RGpHZ4R" (intrinsic 'db.blob)))(wait-until t ("I2RGpHZ4R" (lambda (dict key pred) (wait-until* dict key pred -1))))(dec.cmp t ("I2RGpHZ4R" (intrinsic 'dec.cmp)))(not t ("I2RGpHZ4R" (lambda (x) (eq? x nil))))(_set-help-entries t ("I2RGpHZ4R" (lambda (sym ent) (cond (*_current-lib* ((lambda (newstr) (set *help* (str->sym newstr) (_transform-help-entries newstr (sym->str sym) ent))) (_prefix-lib-sym *_current-lib* sym))) (t (set *help* sym ent))))))(princ t ("I2RGpHZ4R" (intrinsic 'princ)))(dec.quorem t ("I2RGpHZ4R" (intrinsic 'dec.quorem)))(dequeue! t ("I2RGpHZ4R" (macro (sym &rest default) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'cond (list (list 'null? (list 'array-ref sym 2)) (list 'mutex-unlock (list 'array-ref sym 1)) (list 'if (list 'quote default) (list 'car (list 'quote default)) nil)) (list t (list 'let (list (list 'result (list 'car (list 'array-ref sym 2)))) (list 'array-set sym 2 (list 'cdr (list 'array-ref sym 2))) (list 'mutex-unlock (list 'array-ref sym 1)) 'result)))))))(len t ("I2RGpHZ4R" (intrinsic 'len)))(db.open t ("I2RGpHZ4R" (intrinsic 'db.open)))(datestr->datelist t ("I2RGpHZ4R" (lambda (s) ((lambda (parts dstr tmstr dd tt nn year month day hour minute sec ns) (setq parts (strsplit s " ")) (setq dstr (array-ref parts 0)) (setq tmstr (cond ((> (len parts) 1) (array-ref parts 1)) (t "12:00:00.000000"))) (setq dd (strsplit dstr "-")) (setq tt (strsplit tmstr ":")) (setq nn (strsplit (cond ((> (len tt) 2) (array-ref tt 2)) (t "0.0")) ".")) (setq year (str->expr (array-ref dd 0))) (setq month (str->expr (array-ref dd 1))) (setq day (str->expr (array-ref dd 2))) (setq hour (str->expr (array-ref tt 0))) (setq minute (str->expr (array-ref tt 1))) (setq sec (str->expr (array-ref nn 0))) (setq ns (str->expr (cond ((> (len nn) 1) (array-ref nn 1)) (t "0")))) (list (list year month day (day-of-week year month day) (week-of-date year month day)) (list hour minute sec ns (date->epoch-ns year month day hour minute sec ns)))) nil nil nil nil nil nil nil nil nil nil nil nil nil))))(dec.int-part t ("I2RGpHZ4R" (intrinsic 'dec.int-part)))(dir t ("I2RGpHZ4R" (intrinsic 'dir)))(exists? t ("I2RGpHZ4R" (lambda (seq pred) (cond ((list? seq) (list-exists? seq pred)) ((array? seq) (array-exists? seq pred)) ((str? seq) (str-exists? seq pred)) (t (error "exists? - not a sequence: %v" seq))))))(try t ("I2RGpHZ4R" (macro (final-stms &rest body) (_append (cons 'progn (cons (list 'push-error-handler (list 'lambda (list 'err) (_append (cons 'progn (cons (list 'when 'err (list 'pop-error-handler)) final-stms)) (list (list 'when 'err (list '*error-printer* 'err)))))) body)) (cons (list 'pop-error-handler) final-stms)))))(expect-ok t ("I2RGpHZ4R" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-eror-handler) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed)))) (list (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'pop-error-handler))) '*tests*)))))(fl.exp2 t ("I2RGpHZ4R" (intrinsic 'fl.exp2)))(copy-record t ("I2RGpHZ4R" (lambda (r) (array-copy r))))(fl.pow10 t ("I2RGpHZ4R" (intrinsic 'fl.pow10)))(kvdb.commit t ("I2RGpHZ4R" (lambda (db) (db.exec (2nd db) "commit;"))))(save-zimage t ("I2RGpHZ4R" (lambda (min-version info entry-point &rest fi) (cond ((cond ((file-exists? (car fi)) (not (dir? (car fi))))) (fdelete (car fi))) (t (void))) ((lambda (out) (write-zimage out min-version info entry-point) (close out)) (apply open fi)))))(_maybe-translate-help t ("I2RGpHZ4R" (lambda (datum strnew strold) (cond ((sym? datum) ((lambda (dstr) (cond ((equal? dstr strold) (str->sym strnew)) ((equal? (1st dstr 0) 46) ((lambda (without-dot) (cond (*_current-lib* (str->sym (_prefix-lib-sym *_current-lib* without-dot))) (t without-dot))) (str->sym (slice dstr 1 (len dstr))))) (t datum))) (sym->str datum))) ((str? datum) (str-replace datum strold strnew -1)) ((cond ((list? datum) (not (null? datum)))) (cons (_maybe-translate-help (car datum) strnew strold) (_maybe-translate-help (cdr datum) strnew strold))) (t datum)))))(inchars t ("I2RGpHZ4R" (lambda (c chs) (set-element? chs c))))(sysmsg t ("I2RGpHZ4R" (lambda (msg) (cond ((member (sys 'editmode) '(page console)) (enq (lambda nil (synouty (list (list 'fg (the-color 'z3s5-sysmsg-text) (list 'bg (the-color 'z3s5-sysmsg-back) (fmt "%v\n" msg)))))))) (t (log msg))))))(semver.prerelease t ("I2RGpHZ4R" (intrinsic 'semver.prerelease)))(hook t ("I2RGpHZ4R" (lambda (h) ((lambda (id) (cond (id id) (t (get *custom-hooks* h nil)))) (get *hooks* h nil)))))(fl.next-after t ("I2RGpHZ4R" (intrinsic 'fl.next-after)))(popstacked t ("I2RGpHZ4R" (lambda (dic key default) ((lambda (li) (cond ((equal? li default) default) ((null? li) (delete dic key) default) (t (cond ((null? (cdr li)) (delete dic key)) (t (set dic key (cdr li)))) (car li)))) (get dic key default)))))(fl.log2 t ("I2RGpHZ4R" (intrinsic 'fl.log2)))(delete t ("I2RGpHZ4R" (intrinsic 'delete)))(apropos t ("I2RGpHZ4R" (lambda (arg) ((lambda (info) (cond (info (cadr (assoc 'see info))) (t nil))) (get *help* arg nil)))))(db.str t ("I2RGpHZ4R" (intrinsic 'db.str)))(pop-error-handler t ("I2RGpHZ4R" (lambda nil (popstacked *error-handler* (sys 'taskid) nil))))(kvdb.begin t ("I2RGpHZ4R" (lambda (db) (db.exec (2nd db) "begin transaction;"))))(now-ms t ("I2RGpHZ4R" (lambda nil (div (now-ns) 1000000))))(dec.to-json t ("I2RGpHZ4R" (intrinsic 'dec.to-json)))(*hooks-added-once* t ("I2RGpHZ4R" (dict 'nil)))(instr t ("I2RGpHZ4R" (intrinsic 'instr)))(take t ("I2RGpHZ4R" (lambda (seq n) (slice seq 0 n))))(ling.nysiis t ("I2RGpHZ4R" (intrinsic 'ling.nysiis)))(dec.str-fixed-cash t ("I2RGpHZ4R" (intrinsic 'dec.str-fixed-cash)))(db? t ("I2RGpHZ4R" (intrinsic 'db?)))(dict-merge t ("I2RGpHZ4R" (lambda (a b) ((lambda (c) (dict-foreach b (lambda (k v) (cond ((not (has-key? a k)) (set c k v)) (t (void))))) c) (dict-copy a)))))(ascii85->blob t ("I2RGpHZ4R" (intrinsic 'ascii85->blob)))(semver.build t ("I2RGpHZ4R" (intrinsic 'semver.build)))(dec.less-than-or-equal? t ("I2RGpHZ4R" (intrinsic 'dec.less-than-or-equal?)))(max t ("I2RGpHZ4R" (lambda (&rest args) (minmax > (cdr args) (car args)))))(read-zimage t ("I2RGpHZ4R" (lambda (in fi) ((lambda (header nonce) (setq header (read in)) (setq nonce (2nd (assoc 'nonce header) nil)) (cond ((not nonce) (error "read-zimage: zimage corrupted, empty nonce")) (t (void))) (cond ((>= (semver.compare (1st (sys 'version)) (2nd (assoc 'min-version header) "v0.0")) 0) (_read-zimage in header fi 1 nonce)) (t (error "read-zimage: zimage requires Lisp version %v, but this is only version %v" (semver.canonical (2nd (assoc 'min-version header) "v0.0")) (semver.canonical (1st (sys 'version))))))) nil nil))))(array-len t ("I2RGpHZ4R" (intrinsic 'array-len)))(cadar t ("I2RGpHZ4R" (lambda (x) (car (cdr (car x))))))(error t ("I2RGpHZ4R" (intrinsic 'error)))(+ t ("I2RGpHZ4R" (intrinsic '+)))(_read-zimage-bind t ("I2RGpHZ4R" (lambda (li nonce) (cond ((protected? (1st li)) (_unprotect (1st li))) (t (void))) (bind (1st li) (cond ((3rd li) (internalize (3rd li) nonce)) (t nil))) (cond ((2nd li) (_protect (1st li))) (t (void))))))(<= t ("I2RGpHZ4R" (lambda (x y) (not (< y x)))))(ling.metaphone t ("I2RGpHZ4R" (intrinsic 'ling.metaphone)))(*finalizers* t ("I2RGpHZ4R" (dict 'nil)))(bitand t ("I2RGpHZ4R" (intrinsic 'bitand)))(str-exists? t ("I2RGpHZ4R" (lambda (seq pred) (_seq-exists? seq pred 0 (strlen seq)))))(can-externalize? t ("I2RGpHZ4R" (lambda (datum) (cond ((seq? datum) (forall? datum can-externalize?)) ((dict? datum) (forall? (dict->alist datum) (lambda (x) (cond ((can-externalize? (car x)) (can-externalize? (cdr x))))))) ((blob? datum) t) ((cond ((num? datum)) ((cond ((eof? datum)) ((functional? datum))))) t) (t (_external? datum))))))(task-remove t ("I2RGpHZ4R" (lambda (id) (delete *tasks-to-msg* id) (delete *tasks* id) (delete *tasks-state* id))))(shorten t ("I2RGpHZ4R" (lambda (s n) (cond ((not (str? s)) s) ((< (len s) n) s) (t (str+ (slice s 0 (div (- n 3) 2)) "..." (slice s (div (- n 3) 2) (- n 3))))))))(glance t ("I2RGpHZ4R" (lambda (q &rest default) (mutex-rlock (array-ref q 1)) ((lambda (result) (mutex-runlock (array-ref q 1)) result) (1st (array-ref q 2) (cond (default (car default)) (t nil)))))))(min t ("I2RGpHZ4R" (lambda (&rest args) (minmax < (cdr args) (car args)))))(unbind t ("I2RGpHZ4R" (intrinsic 'unbind)))(set-difference t ("I2RGpHZ4R" (lambda (a b) ((lambda (c) (dict-foreach a (lambda (k v) (cond ((not (has-key? b k)) (set c k t)) (t (void))))) c) (dict)))))(expect-err t ("I2RGpHZ4R" (macro (&rest computed) (list 'setq '*tests* (list 'cons (_append (cons 'lambda (cons nil (cons (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list '_testout (list 'fmt "%v " (list 'get '*testinfo* (list 'quote 'count) 0))) (cons (list 'push-error-handler (list 'lambda (list 'err) (list 'pop-error-handler) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0))) (list 'let (list (list 'continuation (list 'get '*testinfo* (list 'quote 'continuation) nil))) (list 'when 'continuation (list 'continuation))))) computed))))) (list (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))) (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'fmt "\n%v FAIL, expect error but none occurred\n" (list '_testidx))))))) (list 'pop-error-handler))) '*tests*)))))(help-topic-info t ("I2RGpHZ4R" (lambda (topic) (get *help-topics* topic))))(_make-class t ("I2RGpHZ4R" (lambda (name supers slots) ((lambda (mapping superclasses) (foreach slots (lambda (slot) (set mapping (cond ((list? slot) (car slot)) (t slot)) (cond ((list? slot) (eval (cadr slot))) (t nil))))) (array '%class name superclasses mapping (_merge-class-dicts 4 superclasses))) (dict) (map supers (lambda (x) (cond ((list? x) (list (_class-by-name (car x)) (cdr x))) (t (_class-by-name x)))))))))(cdadr t ("I2RGpHZ4R" (lambda (x) (cdr (car (cdr x))))))(defmethod t ("I2RGpHZ4R" (macro (name args &rest body) (list 'progn (list '_setmethod (list '_class-from-name (list 'quote name)) (list '_mname-from-name (list 'quote name)) (cons 'lambda (cons args body))) (list 'setq name (list 'lambda (list 'obj '&rest 'ag) (list 'call-method 'obj (list '_mname-from-name (list 'quote name)) 'ag)))))))(setprop t ("I2RGpHZ4R" (lambda (obj slot value) (cond ((not (has-key? (array-ref obj 2) slot)) (error "setprop: class %v does not have a property %v" (array-ref obj 1) slot)) (t (void))) (set (array-ref obj 2) slot value))))(class? t ("I2RGpHZ4R" (lambda (c) (cond ((array? c) (eq? (array-ref c 0) '%class))))))(make-symbol t ("I2RGpHZ4R" (intrinsic 'make-symbol)))(remove-duplicates t ("I2RGpHZ4R" (lambda (seq) (cond ((list? seq) (_remove-duplicates seq nil (dict))) ((array? seq) (list->array (_remove-duplicates (array->list seq) nil (dict)))) ((str? seq) (list->str (_remove-duplicates (str->list seq) nil (dict)))) (t (error "remove-duplicates: not a sequence: %v" seq))))))(methods t ("I2RGpHZ4R" (lambda (obj) (cond ((object? obj) (_methods (class-of obj))) ((class? obj) (_methods obj)) ((_class-by-name obj) (_methods (_class-by-name obj))) (t (error "methods: expected class or object, given %v" obj))))))(rnd t ("I2RGpHZ4R" (intrinsic 'rnd)))(readall-str t ("I2RGpHZ4R" (lambda (p &rest opt) ((lambda (m buff reader) (setq m (1st opt 2048)) (setq buff (make-blob m)) (setq reader (lambda (s) ((lambda (n) (cond ((> n 0) (reader (str+ s (blob->str buff 0 n)))) (t (blob-free buff) s))) (read-binary p buff m)))) (reader "")) nil nil nil))))(*testinfo* t ("I2RGpHZ4R" (dict 'nil)))(outy t ("I2RGpHZ4R" (lambda (li) ((lambda (styled G87) ((lambda (G88) (setq G88 (lambda nil (cond (G87 (setq styled (car G87)) (outy1 styled) (setq G87 (cdr G87)) (G88)) (t (void))))) (G88)) nil) (setq styled nil) (void)) nil li))))(str->expr t ("I2RGpHZ4R" (intrinsic 'str->expr)))(fl.hypot t ("I2RGpHZ4R" (intrinsic 'fl.hypot)))(dec.ceil t ("I2RGpHZ4R" (intrinsic 'dec.ceil)))(run-selftest t ("I2RGpHZ4R" (lambda (&rest opt) (set *testinfo* 'silent? (1st opt nil)) (_testouty (list (list 'fg 'z3s5-blue (list 'bg 'z3s5-orange (list 'text "<<< RUNNING Z3S5 LISP SELFTEST >>>\n"))))) (cond ((not (get *testinfo* 'silent? nil)) (beep 'info)) (t (void))) (set *testinfo* 'count 0) (set *testinfo* 'failure 0) (set *testinfo* 'success 0) (set *testinfo* 'error 0) ((lambda (tests traverse continue) (setq tests (reverse *tests*)) (setq traverse (lambda nil (cond ((null? tests) (void)) (t ((lambda (test) (setq tests (cdr tests)) (test) (traverse)) (car tests)))))) (setq continue (lambda nil (pop-error-handler) (set *testinfo* 'continuation nil) ((lambda (perfect?) (cond ((not (get *testinfo* 'silent? nil)) (cond (perfect? (void (future ((lambda (n G1) ((lambda (G3) (setq G3 (lambda nil (cond ((< n G1) (beep 'okay) (sleep 500) (setq n (+ n 1)) (G3)) (t (void))))) (G3)) nil)) 0 3)))) (t (void (future ((lambda (n G2) ((lambda (G4) (setq G4 (lambda nil (cond ((< n G2) (beep 'error) (sleep 400) (setq n (+ n 1)) (G4)) (t (void))))) (G4)) nil)) 0 3)))))) (t (void))) ((lambda (msg) (cond (perfect? (_testout msg)) (t (_testouty (list (list 'bg 'z3s5-error-back (list 'fg 'z3s5-error-text (list 'text msg)))))))) (fmt "\n==> Passed %v of %v tests, %v errors, %v failures.\n" (get *testinfo* 'success) (get *testinfo* 'count) (get *testinfo* 'error) (get *testinfo* 'failure)))) (cond ((= (get *testinfo* 'failure 0) 0) (= (get *testinfo* 'error 0) 0)))))) (set *testinfo* 'continuation (lambda nil (traverse) (continue))) (push-error-handler (lambda (err) (set *testinfo* 'error (add1 (get *testinfo* 'error 0))) (_testouty (list (list 'fg 'z3s5-error-text (list 'bg 'z3s5-error-back (list 'text (str+ (shorten (fmt "\n%v ERR %v" (get *testinfo* 'count 0) err) (* 3 (sys 'cols 80))) "\n")))))) ((lambda (continuation) (cond (continuation (continuation)) (t (void)))) (get *testinfo* 'continuation nil)))) (traverse) (continue)) nil nil nil))))(str->expr* t ("I2RGpHZ4R" (intrinsic 'str->expr*)))(strlimit t ("I2RGpHZ4R" (lambda (s n) (cond ((> (len s) n) (slice s 0 n)) (t s)))))(str-replace t ("I2RGpHZ4R" (intrinsic 'str-replace)))(dict-key-equal? t ("I2RGpHZ4R" (intrinsic 'dict-key-equal?)))(cddr t ("I2RGpHZ4R" (lambda (x) (cdr (cdr x)))))(valid? t ("I2RGpHZ4R" (intrinsic 'valid?)))(9th t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 8)) (t (nthdef seq 8 (car default)))))))(list-last t ("I2RGpHZ4R" (lambda (list) (cond ((atom? (cdr list)) list) (t (list-last (cdr list)))))))(*classes* t ("I2RGpHZ4R" (dict '(point #(%class point nil ("I2RGpHZ4R" (dict '(y 0 x 0))) ("I2RGpHZ4R" (dict '(move ("I2RGpHZ4R" (lambda (this delta) (setprop this 'x (+ (prop this 'x) delta)) (setprop this 'y (+ (prop this 'y) delta))))))))))))(kvdb.*report-maintenance* nil ("I2RGpHZ4R" (lambda (x) (sysmsg (fmt "kvdb automated maintenance for %v" x)))))(_class-by-name t ("I2RGpHZ4R" (lambda (cname) (get *classes* cname nil))))(wait-until* t ("I2RGpHZ4R" (lambda (dict key pred timeout) (_wait-until* dict key pred timeout (now-ns)))))(_str-index t ("I2RGpHZ4R" (lambda (s chars pos end) (cond ((>= pos end) nil) ((inchars (str->char (slice s pos (add1 pos))) chars) pos) (t (_str-index s chars (add1 pos) end))))))(make-stack t ("I2RGpHZ4R" (lambda nil (array 'stack (make-mutex) nil))))(set-permissions t ("I2RGpHZ4R" (intrinsic 'set-permissions)))(call-super t ("I2RGpHZ4R" (lambda (obj name args) ((lambda (supers) (cond ((not supers) (error "call-super: class %v does not have any super classes" (class-of obj))) (t (void))) (_call-super obj supers name args)) (array-ref (class-of obj) 2)))))(base64->blob t ("I2RGpHZ4R" (intrinsic 'base64->blob)))(with-error-handler t ("I2RGpHZ4R" (macro (handler &rest body) ((lambda (result) (list 'let (list (list result nil)) (list 'push-error-handler handler) (list 'setq result (cons 'progn body)) (list 'void (list 'pop-error-handler)) result)) (gensym)))))(sets nil ("I2RGpHZ4R" (letrec nil (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x)))))))))(dump t ("I2RGpHZ4R" (lambda (&rest arg) ((lambda (all? li) (cond (all? li) (t (filter li (lambda (x) (< (instr (sym->str x) "_") 0)))))) (2nd arg nil) (cond ((list? arg) ((lambda (start) (cond ((sym? start) ((lambda (sym0 n) (setq sym0 (sym->str start)) (setq n (len sym0)) (sort-symbols (filter (dump-bindings) (lambda (sym) (cond ((> n (len (sym->str sym))) nil) (t (equal? (slice (sym->str sym) 0 n) sym0))))))) nil nil)) (t (sort-symbols (dump-bindings))))) (1st arg nil))) (t (t (sort-symbols (dump-bindings)))))))))(wait-for-empty* t ("I2RGpHZ4R" (lambda (dict key timeout) (_wait-for-empty* dict key timeout (now-ns)))))(_out-help t ("I2RGpHZ4R" (lambda (sym info) (cond (info (_out-help1 sym info)) (t (outy (list (list 'fg 'z3s5-help-text (list 'bg 'z3s5-help-back (fmt "No help available for '%v.\n" sym))))))))))(kvdb._init t ("I2RGpHZ4R" (lambda (db) (db.exec db "pragma journal_mode = WAL;") (db.exec db "pragma fullfsync = 1;") (db.exec db "begin;") (db.exec db "create table if not exists StrData (Slot text primary key not null, Value text not null, Info text not null,Fuzzy text not null, Modified text not null);") (db.exec db "create table if not exists IntData (Id integer primary key, Value text not null, Info text not null,Fuzzy text not null, Modified text not null);") (db.exec db "create table if not exists SymData (Slot text primary key not null, Value text not null, Info text not null, Fuzzy text not null,Modified text not null);") (db.exec db "create table if not exists ExprData (Slot text primary key not null, Value text not null, Info text not null,Fuzzy text not null, Modified text not null);") (db.exec db "create table if not exists Internal (Id integer primary key, Value text not null);") (db.exec db "create virtual table if not exists StrFts using FTS5 (content='StrData',prefix='2 3 4',Slot,Value,Info,Fuzzy,Modified);") (db.exec db "create virtual table if not exists IntFts using FTS5 (content='IntData',prefix='2 3 4',Id,Value,Info,Fuzzy,Modified);") (db.exec db "create virtual table if not exists SymFts using FTS5 (content='SymData',prefix='2 3 4',Slot,Value,Info,Fuzzy,Modified);") (db.exec db "create virtual table if not exists ExprFts using FTS5 (content='ExprData',prefix='2 3 4',Slot,Value,Info,Fuzzy,Modified);") (db.exec db "commit;"))))(terpri t ("I2RGpHZ4R" (intrinsic 'terpri)))(make-mutex t ("I2RGpHZ4R" (intrinsic 'make-mutex)))(flatten t ("I2RGpHZ4R" (lambda (lst) ((lambda (loop) (setq loop (lambda (lst acc) (cond ((null? lst) acc) ((cond ((list? lst) (not (null? lst)))) (loop (car lst) (loop (cdr lst) acc))) (t (cons lst acc))))) (loop lst nil)) nil))))(cwait t ("I2RGpHZ4R" (intrinsic 'cwait)))(*_current-lib* nil nil)(strcase t ("I2RGpHZ4R" (intrinsic 'strcase)))(permissions t ("I2RGpHZ4R" (intrinsic 'permissions)))(_externalize-nonce t ("I2RGpHZ4R" (lambda (arg nonce) ((lambda (s) ((lambda (G89) (push-finalizer (lambda (err x) (cond (err (*error-handler* err)) (t (void))) ((lambda (result) (close s) (cond (nonce (list nonce result)) (t result))) (car (readall s))))) (push-error-handler (lambda (err) (void (pop-error-handler)) ((pop-finalizer) err G89) ((lambda (handler) (cond (handler (handler err)) (t (void)))) (pop-error-handler)))) (setq G89 (progn)) (pop-error-handler) ((pop-finalizer) nil G89)) nil)) (stropen (_external arg))))))(fmt t ("I2RGpHZ4R" (intrinsic 'fmt)))(foreach t ("I2RGpHZ4R" (lambda (seq proc) (cond ((list? seq) (list-foreach seq proc)) ((array? seq) (array-foreach seq proc)) ((str? seq) (str-foreach seq proc)) (t (error "foreach - not a sequence: %v" seq))))))(fl.mod t ("I2RGpHZ4R" (intrinsic 'fl.mod)))(fl.round t ("I2RGpHZ4R" (intrinsic 'fl.round)))(end-of-file t ("I2RGpHZ4R" (intrinsic 'end-of-file)))(_out-help-segment t ("I2RGpHZ4R" (lambda (s start end) (_out-help-fix-end (mapcar (str-segment s start end) (lambda (x) (cond ((1st x nil) (list t (slice (2nd x) 1 (len (2nd x))))) (t x))))))))(dec.from-num t ("I2RGpHZ4R" (intrinsic 'dec.from-num)))(fl.frexp t ("I2RGpHZ4R" (intrinsic 'fl.frexp)))(pushstacked t ("I2RGpHZ4R" (lambda (dic key datum) (set dic key (cons datum (get dic key nil))))))(task-broadcast t ("I2RGpHZ4R" (lambda (sel id &rest msg) (mutex-lock *blackboard-mutex*) (setq *blackboard* (cons (list sel (cons id msg)) *blackboard*)) (mutex-unlock *blackboard-mutex*))))(_include-library t ("I2RGpHZ4R" (lambda (in last table) (foreach (_library-transform table *_current-lib* (_forward-symbol-table table *_current-lib* (expand-macros (readall in)))) eval))))(dec.is-negative? t ("I2RGpHZ4R" (intrinsic 'dec.is-negative?)))(eql? t ("I2RGpHZ4R" (intrinsic 'eql?)))(strmap t ("I2RGpHZ4R" (intrinsic 'strmap)))(count-partitions t ("I2RGpHZ4R" (lambda (x n) ((lambda (m) (cond ((> (% x n) 0) (add1 m)) (t m))) (div x n)))))(map t ("I2RGpHZ4R" (lambda (seq proc) (cond ((list? seq) (mapcar seq proc)) ((array? seq) ((lambda (c) ((lambda (i G50) ((lambda (G51) (setq G51 (lambda nil (cond ((< i G50) (array-set c i (proc (array-ref seq i))) (setq i (+ i 1)) (G51)) (t (void))))) (G51)) nil)) 0 (array-len seq)) c) (array-copy seq))) ((str? seq) (strmap seq proc)) (t (error "map - not a sequence: %v" seq))))))(dotimes t ("I2RGpHZ4R" (macro (spec &rest body) ((lambda (name count) (cons 'let (cons (list (list name 0) (list count (cadr spec))) (cons (_append (cons 'while (cons (list '< name count) body)) (list (list 'setq name (list '+ name 1)))) (cond ((cddr spec) (list (caddr spec)))))))) (car spec) (gensym)))))(fl.sqrt t ("I2RGpHZ4R" (intrinsic 'fl.sqrt)))(global-sym? t ("I2RGpHZ4R" (lambda (s) (cond ((sym? s) (equal? (slice (sym->str s) 0 1) "*"))))))(equal? t ("I2RGpHZ4R" (lambda (x y) (cond ((atom? x) (eql? x y)) ((atom? y) nil) ((equal? (car x) (car y)) (equal? (cdr x) (cdr y)))))))(push-error-handler t ("I2RGpHZ4R" (lambda (proc) (pushstacked *error-handler* (sys 'taskid) proc))))(externalize* t ("I2RGpHZ4R" (lambda (arg nonce) (cond ((sym? arg) arg) ((list? arg) (mapcar arg (lambda (x) (externalize* x nonce)))) ((array? arg) (map arg (lambda (x) (externalize* x nonce)))) ((dict? arg) (list nonce (list 'dict (list 'quote (dict->list (dict-map arg (lambda (k v) (externalize* v nonce)))))))) ((blob? arg) (list nonce (list 'ascii85->blob (list 'quote (blob->ascii85 arg))))) ((num? arg) arg) ((str? arg) arg) ((eof? arg) (list nonce '(end-of-file))) (t (_externalize-nonce arg nonce))))))(kvdb._get t ("I2RGpHZ4R" (lambda (db key other) (cond ((num? key) (kvdb._get-value (db.query (2nd db) "select distinct Value from IntData where Id = ?;" key) (3rd db) other)) ((sym? key) (kvdb._get-value (db.query (2nd db) "select distinct Value from SymData where Slot = ?;" (sym->str key)) (3rd db) other)) ((str? key) (kvdb._get-value (db.query (2nd db) "select distinct Value from StrData where Slot = ?;" key) (3rd db) other)) (t (kvdb._get-value (db.query (2nd db) "select distinct Value from ExprData where Slot = ?;" (expr->str (externalize key (3rd db)))) (3rd db) other))))))(include t ("I2RGpHZ4R" (lambda (&rest fi) ((lambda (io) (progn (push-error-handler (lambda (err) (progn (cond (err (pop-error-handler)) (t (void))) (cond (io (close io)) (t (void))) (cond (err (*error-printer* err)) (t (void)))))) (setq io (apply open fi)) (_include io (void)) (pop-error-handler) (cond (io (close io)) (t (void))))) nil))))(set? t ("I2RGpHZ4R" (lambda (x) (dict? x))))(nonce t ("I2RGpHZ4R" (intrinsic 'nonce)))(writable? t ("I2RGpHZ4R" (intrinsic 'writable?)))(kvdb.set t ("I2RGpHZ4R" (lambda (db key value &rest opt) (kvdb._set db key value (cond ((1st opt nil) (1st opt)) (t "")) (cond ((2nd opt nil) (2nd opt)) (t kvdb.*default-fuzzer*))))))(dec.div-round t ("I2RGpHZ4R" (intrinsic 'dec.div-round)))(false t nil)(_darken-delta t ("I2RGpHZ4R" (lambda (c proposed) ((lambda (li m) (setq li (reverse (cdr (reverse c)))) (setq m (apply min li)) (cond ((< m proposed) m) (t proposed))) nil nil))))(array-pmap! t ("I2RGpHZ4R" (intrinsic 'array-pmap!)))(atom? t ("I2RGpHZ4R" (intrinsic 'atom?)))(array-sort t ("I2RGpHZ4R" (intrinsic 'array-sort)))(db.close-result t ("I2RGpHZ4R" (intrinsic 'db.close-result)))(bind t ("I2RGpHZ4R" (intrinsic 'bind)))(dict-map! t ("I2RGpHZ4R" (intrinsic 'dict-map!)))(*scheduler-sleep-interval* nil 800)(*ln10* t 2.302585092994046)(letrec t ("I2RGpHZ4R" (macro (args &rest body) ((lambda (vars setqs) (progn (setq vars (lambda (x) (cond (x (cons (caar x) (vars (cdr x))))))) 'vars) (progn (setq sets (lambda (x) (cond (x (cons (list 'setq (caar x) (cadar x)) (sets (cdr x))))))) 'sets) (append (cons 'let (cons (vars args) (sets args))) body)) nil nil))))(fl.log t ("I2RGpHZ4R" (intrinsic 'fl.log)))(ling.match-rating-compare t ("I2RGpHZ4R" (intrinsic 'ling.match-rating-compare)))(current-zimage t ("I2RGpHZ4R" (lambda (&rest r) ((lambda (d nonce) (foreach (dump-bindings) (lambda (sym) (cond ((not (get *volatile-toplevel-symbols* sym nil)) (cond ((can-externalize? sym) (set d sym (externalize (eval sym) nonce))) (t (set d sym nil) (warn "cannot externalize '%v, set to nil" sym)))) (t (void))))) d) (dict 'nil) (1st r nil)))))(has-method? t ("I2RGpHZ4R" (lambda (obj name) (has-key? (array-ref (class-of obj) 4) name))))(list->array t ("I2RGpHZ4R" (lambda (li) (apply array li))))(identity t ("I2RGpHZ4R" (lambda (x) x)))(mapcar t ("I2RGpHZ4R" (lambda (x f) (cond (x (cons (f (car x)) (mapcar (cdr x) f)))))))(zimage-header t ("I2RGpHZ4R" (lambda (fi) ((lambda (in header) (setq in (open fi '(read))) (setq header (read in)) (close in) header) nil nil))))(_include t ("I2RGpHZ4R" (lambda (in last) ((lambda (datum) (cond ((eof? datum) last) (t (eval datum) (_include in datum)))) (read in)))))(blob-chksum t ("I2RGpHZ4R" (intrinsic 'blob-chksum)))(/ t ("I2RGpHZ4R" (intrinsic '/)))(ling.damerau-levenshtein t ("I2RGpHZ4R" (intrinsic 'ling.damerau-levenshtein)))(mutex-lock t ("I2RGpHZ4R" (intrinsic 'mutex-lock)))(make-blob t ("I2RGpHZ4R" (intrinsic 'make-blob)))(week-of-date t ("I2RGpHZ4R" (intrinsic 'week-of-date)))(beep t ("I2RGpHZ4R" (intrinsic 'beep)))(internalize t ("I2RGpHZ4R" (lambda (arg nonce) (cond ((list? arg) (cond ((equal? (1st arg nil) nonce) (eval (internalize (2nd arg nil) nonce))) (t (mapcar arg (lambda (x) (internalize x nonce)))))) ((array? arg) (map arg (lambda (x) (internalize x nonce)))) ((dict? arg) (dict-map arg (lambda (k v) (internalize v nonce)))) (t arg)))))(_help-type-to-str t ("I2RGpHZ4R" (lambda (sym) ((lambda (G7) (cond ((member G7 '(proc func function)) "procedure") ((member G7 '(special)) "special form") ((member G7 '(macro)) "macro") ((member G7 '(dict)) "dict") ((member G7 '(string str)) "string") ((member G7 '(array arr)) "array") ((member G7 '(list)) "list") ((member G7 '(a-list)) "association list") ((member G7 '(color)) "color list (r g b a)") ((member G7 '(color-spec)) "color name or color list (r g b) or (r g b a)") (t (fmt "%v" sym)))) sym))))(set-color t ("I2RGpHZ4R" (intrinsic 'set-color)))(= t ("I2RGpHZ4R" (intrinsic 'eql?)))(_merge-class-dicts t ("I2RGpHZ4R" (lambda (idx li) ((lambda (d) (list-foreach li (lambda (c) (cond ((list? c) ((lambda (d2) (dict-foreach (array-ref (car c) idx) (lambda (k v) (cond ((has-key? d2 k) ((lambda (newkey) (cond ((not (has-key? d (cond ((list? newkey) (car newkey)) (t newkey)))) (set d (cond ((list? newkey) (car newkey)) (t newkey)) v)) (t (void)))) (get d2 k))) (t (cond ((not (has-key? d k)) (set d k v)) (t (void)))))))) (alist->dict (cdr c)))) (t (dict-foreach (array-ref c idx) (lambda (k v) (cond ((not (has-key? d k)) (set d k v)) (t (void))))))))) d) (dict)))))(fl.cbrt t ("I2RGpHZ4R" (intrinsic 'fl.cbrt)))(_help-is-functional t ("I2RGpHZ4R" (lambda (sym) (member sym '(proc func function macro)))))(fl.tan t ("I2RGpHZ4R" (intrinsic 'fl.tan)))(nthdef t ("I2RGpHZ4R" (lambda (seq n default) (cond ((seq? seq) (cond ((cond ((< n 0)) ((>= n (len seq)))) default) (t (nth seq n)))) (t default)))))(has t ("I2RGpHZ4R" (lambda (d k) ((lambda (s) (cond ((equal? (get d k s) s) nil) (t t))) (gensym)))))(alist? t ("I2RGpHZ4R" (lambda (li) (cond ((null? li) t) (t (cond ((list? li) (cond ((list? (car li)) (alist? (cdr li)))))))))))(kvdb._fuzzify t ("I2RGpHZ4R" (lambda (fuzzer s) (db.fuzzify s fuzzer))))(write-zimage t ("I2RGpHZ4R" (lambda (out min-version info entry-point) (cond ((not (str? min-version)) (error "write-zimage: min-version must be a version string, given %v" min-version)) (t (void))) (cond ((not (list? info)) (error "write-zimage: info must be a list, given %v" info)) (t (void))) ((lambda (n) (write out (list 'z3s5-image (list 'version (sys 'version)) (list 'info info) (list 'nonce n) (list 'min-version min-version) (list 'time (now)) (list 'entry (externalize entry-point)))) (foreach (dump-bindings) (lambda (sym) (cond ((not (get *volatile-toplevel-symbols* sym nil)) (cond ((can-externalize? sym) (write out (list sym (protected? sym) (externalize (eval sym) n)))) (t (write out (list sym (protected? sym) nil)) (warn "cannot externalize '%v, set to nil" sym)))) (t (void)))))) (nonce)))))(isa? t ("I2RGpHZ4R" (lambda (obj cname) (cond ((not (object? obj)) (error "isa?: the first argument must be a valid object array, given %v" obj)) (t (void))) (cond ((eq? (array-ref obj 1) cname) t) ((class? cname) (isa? obj (class-name cname))) (t ((lambda (c) (cond ((not c) (error "isa?: %v is not the name of a registered class" cname)) (t (void))) (_isa? (array-ref obj 1) (supers c))) (_class-by-name cname)))))))(_prefix-lib-sym t ("I2RGpHZ4R" (lambda (prefixli oldsym) (str+ (str-join (mapcar (reverse prefixli) sym->str) ".") "." (sym->str oldsym)))))(fl.pow t ("I2RGpHZ4R" (intrinsic 'fl.pow)))(sec+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns ti) (* *second-ns* delta))))))(functional-has-rest? t ("I2RGpHZ4R" (intrinsic 'functional-has-rest?)))(dec.exponent t ("I2RGpHZ4R" (intrinsic 'dec.exponent)))(apply t ("I2RGpHZ4R" (intrinsic 'apply)))(dict->list t ("I2RGpHZ4R" (intrinsic 'dict->list)))(struct-name t ("I2RGpHZ4R" (lambda (s) (2nd s nil))))(void t ("I2RGpHZ4R" (intrinsic 'void)))(array-forall? t ("I2RGpHZ4R" (lambda (arr pred) (_seq-forall? arr pred 0 (array-len arr)))))(recall t ("I2RGpHZ4R" (lambda (k &rest opt) (kvdb.get *remember-db* k (1st opt nil)))))(spaces t ("I2RGpHZ4R" (lambda (n) (strbuild " " n))))(props t ("I2RGpHZ4R" (lambda (obj) (cond ((not (object? obj)) (error "props: expected an object, given %v" obj)) (t (void))) ((lambda (li) (dict-foreach (array-ref obj 2) (lambda (k v) (setq li (cons k li)))) li) nil))))(caar t ("I2RGpHZ4R" (lambda (x) (car (car x)))))(intrinsic t ("I2RGpHZ4R" (intrinsic 'intrinsic)))(object? t ("I2RGpHZ4R" (lambda (obj) (cond ((array? obj) (cond ((>= (array-len obj) 3) (eq? (array-ref obj 0) '%object))))))))(dict-protect t ("I2RGpHZ4R" (intrinsic 'dict-protect)))(recall-info t ("I2RGpHZ4R" (lambda (k &rest opt) (kvdb.info *remember-db* k (1st opt nil)))))(fl.y1 t ("I2RGpHZ4R" (intrinsic 'fl.y1)))(defhelp t ("I2RGpHZ4R" (macro (sym &rest entries) (list '_set-help-entries (list 'quote sym) (list 'quote entries)))))(record? t ("I2RGpHZ4R" (lambda (s) (cond ((array? s) (equal? (1st s nil) '%record))))))(when-permission t ("I2RGpHZ4R" (macro (perm &rest body) (list 'cond (cons (list 'permission? perm) body)))))(semver.canonical t ("I2RGpHZ4R" (intrinsic 'semver.canonical)))(enqueue! t ("I2RGpHZ4R" (macro (sym elem) (list 'progn (list 'mutex-lock (list 'array-ref sym 1)) (list 'array-set sym 2 (list 'append (list 'array-ref sym 2) (list 'list elem))) (list 'mutex-unlock (list 'array-ref sym 1))))))(kvdb.info t ("I2RGpHZ4R" (lambda (db key &rest opt) (kvdb._info db key (1st opt nil)))))(dec.cos t ("I2RGpHZ4R" (intrinsic 'dec.cos)))(semver.major t ("I2RGpHZ4R" (intrinsic 'semver.major)))(*second-ns* t 1000000000)(dec.from-blob t ("I2RGpHZ4R" (intrinsic 'dec.from-blob)))(find-missing-help-entries t ("I2RGpHZ4R" (lambda nil (filter (dump) (lambda (sym) (get *help* sym nil))))))(init-testing t ("I2RGpHZ4R" (lambda nil (setq *tests* nil) (declare-unprotected '*tests*) (setq *testinfo* (dict)))))(fl.ceil t ("I2RGpHZ4R" (intrinsic 'fl.ceil)))(zimage-runable? t ("I2RGpHZ4R" (lambda (fi) ((lambda (in header) (setq in (open fi)) (setq header (read in)) (close in) (cond ((equal? (1st header nil) 'z3s5-image) (cond ((>= (semver.compare (1st (sys 'version "v0.0")) (2nd (assoc 'min-version header) "v0.1")) 0) (2nd (assoc 'entry header) nil)))))) nil nil))))(on-feature t ("I2RGpHZ4R" (macro (test &rest body) (cons 'when (cons (list 'feature? test) body)))))(remove-hook-internal t ("I2RGpHZ4R" (intrinsic 'remove-hook-internal)))(dec.is-zero? t ("I2RGpHZ4R" (intrinsic 'dec.is-zero?)))(str-remove-suffix t ("I2RGpHZ4R" (lambda (s sfx) (cond ((cond ((str-empty? sfx)) ((str-empty? s))) s) ((equal? (str-slice s (- (len s) (min (len sfx) (len s))) (len s)) sfx) (str-slice s (- (len s) (min (len sfx) (len s))) (len s))) (t s)))))(fl.dim t ("I2RGpHZ4R" (intrinsic 'fl.dim)))(kvdb.get t ("I2RGpHZ4R" (lambda (db key &rest opt) (kvdb._get db key (1st opt nil)))))(recall-when t ("I2RGpHZ4R" (lambda (k &rest opt) (kvdb.when *remember-db* k (1st opt nil)))))(help-entry t ("I2RGpHZ4R" (lambda (sym) (get *help* sym nil))))(month+ t ("I2RGpHZ4R" (lambda (ti delta) (epoch-ns->datelist (+ (datelist->epoch-ns (list (list (1st (1st ti)) (+ (2nd (1st ti) 1) delta) (3rd (1st ti) 1)) (list (1st (2nd ti nil) 12) (2nd (2nd ti nil) 0) (3rd (2nd ti nil) 0) (4th (2nd ti nil) 0)))))))))(kvdb._get-all t ("I2RGpHZ4R" (lambda (result converter getter acc) (cond ((db.step result) ((lambda (s) (cond (s (kvdb._get-all result converter getter (cons (converter s) acc))) (t (db.close-result result) acc))) (getter result 0))) (t (db.close-result result) acc)))))(fdelete t ("I2RGpHZ4R" (intrinsic 'fdelete)))(hex->blob t ("I2RGpHZ4R" (intrinsic 'hex->blob)))(datelist->epoch-ns t ("I2RGpHZ4R" (lambda (d) ((lambda (unix-ns) (cond (unix-ns unix-ns) (t (date->epoch-ns (1st (1st d)) (2nd (1st d) 1) (3rd (1st d) 1) (1st (2nd d nil) 12) (2nd (2nd d nil) 0) (3rd (2nd d nil) 0) (4th (2nd d nil) 0))))) (5th (2nd d nil) nil)))))(rplacd t ("I2RGpHZ4R" (intrinsic 'rplacd)))(fl.logb t ("I2RGpHZ4R" (intrinsic 'fl.logb)))(blob-free t ("I2RGpHZ4R" (intrinsic 'blob-free)))(strcenter t ("I2RGpHZ4R" (lambda (s n) ((lambda (x) (str+ (strbuild " " x) s (strbuild " " x))) (truncate (/ (- n (len s)) 2))))))(dfc! t ("I2RGpHZ4R" (lambda (sym) (progn (bind sym 0) sym))))(help-about t ("I2RGpHZ4R" (lambda (topic &rest opt) ((lambda (topics) (cond ((not (member topic topics)) (warn (fmt "topic '%v is unknown" topic))) (t (void))) (cond ((cond ((not (null? opt)) (not (cond ((equal? 'any (car opt))) ((equal? 'first (car opt))))))) (error (fmt "help-about: the optional argument must be one of '(any first), given '%v" (car opt)))) (t (void))) ((lambda (d) (dict-foreach *help* (lambda (k v) ((lambda (li) (cond ((not (null? li)) (cond ((cond ((cond ((null? opt)) ((equal? 'any (car opt)))) (member topic (car li))) (t (equal? topic (caar li)))) (set d k t)) (t (void)))) (t (void)))) (cdr (assoc 'topic v))))) (sort-symbols (dict->keys d))) (dict))) (help-topics)))))(array-walk t ("I2RGpHZ4R" (intrinsic 'array-walk)))(protect t ("I2RGpHZ4R" (lambda (&rest symbols) (cond ((permission? 'allow-protect) (list-foreach symbols _protect)) (t (error "protect: security violation - no permission to protect symbols!"))))))(list-forall? t ("I2RGpHZ4R" (lambda (li pred) (cond ((null? li) t) ((pred (car li)) (list-forall? (cdr li) pred)) (t nil)))))(*halfhour-ns* t 1800000000000)(expect t ("I2RGpHZ4R" (macro (value computed) ((lambda (sym) (setq sym (gensym)) (list 'setq '*tests* (list 'cons (list 'lambda nil (list 'set '*testinfo* (list 'quote 'count) (list 'add1 (list 'get '*testinfo* (list 'quote 'count) 0))) (list 'let (list (list sym computed)) (list 'cond (list (list 'equal? sym value) (list '_testout (list 'fmt "%v " (list '_testidx))) (list 'set '*testinfo* (list 'quote 'success) (list 'add1 (list 'get '*testinfo* (list 'quote 'success) 0)))) (list t (list '_testouty (list 'list (list 'list (list 'quote 'fg) (list 'quote 'z3s5-error-text) (list 'list (list 'quote 'bg) (list 'quote 'z3s5-error-back) (list 'list (list 'quote 'text) (list 'shorten (list 'fmt "\n%v FAIL, expect %v given %v\n" (list '_testidx) value sym) (list 'sys (list 'quote 'cols) 80))))))) (list 'set '*testinfo* (list 'quote 'failure) (list 'add1 (list 'get '*testinfo* (list 'quote 'failure) 0))))))) '*tests*))) nil))))(_testouty t ("I2RGpHZ4R" (lambda (arg) (cond ((not (get *testinfo* 'silent? nil)) (outy arg)) (t (void))))))(_unprotect t ("I2RGpHZ4R" (intrinsic '_unprotect)))(str-count-substr t ("I2RGpHZ4R" (intrinsic 'str-count-substr)))(mutex? t ("I2RGpHZ4R" (intrinsic 'mutex?)))(ling.porter t ("I2RGpHZ4R" (intrinsic 'ling.porter)))(with-final t ("I2RGpHZ4R" (macro (finalizer &rest body) ((lambda (result) (list 'let (list (list result nil)) (list 'push-finalizer finalizer) (list 'push-error-handler (list 'lambda (list 'err) (list 'void (list 'pop-error-handler)) (list (list 'pop-finalizer) 'err result) (list 'let (list (list 'handler (list 'pop-error-handler))) (list 'when 'handler (list 'handler 'err))))) (list 'setq result (cons 'progn body)) (list 'pop-error-handler) (list (list 'pop-finalizer) nil result))) (gensym)))))(_nreverse t ("I2RGpHZ4R" (lambda (x prev) ((lambda (next) (setcdr x prev) (cond ((null? next) x) (t (_nreverse next x)))) (cdr x)))))(with-mutex-lock t ("I2RGpHZ4R" (macro (mu &rest body) (list 'progn (list 'mutex-lock mu) (cons 'with-final (cons (list 'lambda (list 'err 'result) (list 'mutex-unlock mu) (list 'if 'err (list '*error-handler* 'err) 'result)) body))))))(struct-index t ("I2RGpHZ4R" (lambda (s) (4th s (dict)))))(even? t ("I2RGpHZ4R" (lambda (x) (= (mod (abs x) 2) 0))))(reverse t ("I2RGpHZ4R" (lambda (seq) (cond ((array? seq) (array-reverse seq)) ((list? seq) (list-reverse seq)) ((str? seq) (str-reverse seq)) (t (error "reverse - not a sequence: %v" seq))))))(current-error-handler t ("I2RGpHZ4R" (lambda nil ((lambda (handler) (cond (handler handler) (t (getstacked *error-handler* 0 (default-error-handler))))) (getstacked *error-handler* (sys 'taskid) nil)))))(db.result-column-count t ("I2RGpHZ4R" (intrinsic 'db.result-column-count)))(1st t ("I2RGpHZ4R" (lambda (seq &rest default) (cond ((null? default) (nth seq 0)) (t (nthdef seq 0 (car default)))))))(unprotect-toplevel-symbols t ("I2RGpHZ4R" (lambda nil (apply unprotect (dump-bindings)))))(cons t ("I2RGpHZ4R" (intrinsic 'cons)))(dec.mod t ("I2RGpHZ4R" (intrinsic 'dec.mod)))(a nil #(%object point ("I2RGpHZ4R" (dict '(x 20 y 40))) #:G92))(break t ("I2RGpHZ4R" (intrinsic 'break)))(dec.to-text t ("I2RGpHZ4R" (intrinsic 'dec.to-text)))(array->list t ("I2RGpHZ4R" (intrinsic 'array->list)))(fl.abs t ("I2RGpHZ4R" (intrinsic 'fl.abs)))(*sqrt2* t 1.4142135623730951)(dec.shift t ("I2RGpHZ4R" (intrinsic 'dec.shift)))(prune-task-table t ("I2RGpHZ4R" (lambda nil (dict-foreach *tasks-state* (lambda (k v) (cond ((cond ((eq? v 'finished)) ((cond ((eq? v 'canceled)) ((eq? v 'error))))) (task-remove k)) (t (void))))))))(> t ("I2RGpHZ4R" (lambda (x y) (< y x))))(db.int t ("I2RGpHZ4R" (intrinsic 'db.int)))